
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDEQUALSleftEQDIFFleftHTHELTLEleftPLUSMINUSleftTIMESDIVIDEMODADDRESS AND ASSERT BREAK CHAR CHAR_CONST COMMA DIFF DIVIDE DIVIDEASSIGN ELSE EQ EQUALS FLOAT FLOAT_CONST FOR HE HT ID IF INT INT_CONST LBRACE LBRACKET LE LPAREN LT MINUS MINUSASSIGN MINUSMINUS MOD MODASSIGN OR PLUS PLUSASSIGN PLUSPLUS PRINT RBRACE RBRACKET READ RETURN RPAREN SEMI STRING TIMES TIMESASSIGN UNARYDIFF VOID WHILE program  : global_declaration_list\n         global_declaration_list : global_declaration\n                                    | global_declaration_list global_declaration\n         global_declaration  : declaration  global_declaration  : function_definition  declaration : decl_body SEMI  declaration_list    : declaration\n                                | declaration_list declaration\n         declaration_list_opt    : declaration_list\n                                    | empty\n         decl_body  : type_specifier init_declarator_list_opt  declarator  : direct_declarator\n         init_declarator : declarator\n                            | declarator EQUALS initializer\n         init_declarator_list    : init_declarator\n                                    | init_declarator_list COMMA init_declarator\n         init_declarator_list_opt    : init_declarator_list\n                                        | empty\n         parameter_declaration  : type_specifier declarator  parameter_list  : parameter_declaration\n                            | parameter_list COMMA parameter_declaration\n         direct_declarator : identifier  direct_declarator :  LPAREN declarator RPAREN  direct_declarator : direct_declarator LBRACKET constant_expression_opt RBRACKET  direct_declarator : direct_declarator LPAREN identifier_list_opt RPAREN\n                              | direct_declarator LPAREN parameter_list RPAREN\n         initializer : assignment_expression  initializer : LBRACE initializer_list RBRACE\n                        | LBRACE initializer_list COMMA RBRACE\n         initializer_list : initializer\n                             | initializer_list COMMA initializer\n         postfix_expression : primary_expression  postfix_expression : postfix_expression PLUSPLUS\n                               | postfix_expression MINUSMINUS\n         postfix_expression  : postfix_expression LPAREN RPAREN\n                                | postfix_expression LPAREN argument_expression RPAREN\n         postfix_expression  : postfix_expression LBRACKET expression RBRACKET  argument_expression : assignment_expression\n                                | argument_expression COMMA assignment_expression\n         expression  : assignment_expression  expression  : expression COMMA assignment_expression  primary_expression : identifier\n                               | constant\n         primary_expression : LPAREN expression RPAREN  cast_expression : unary_expression  cast_expression : LPAREN type_specifier RPAREN cast_expression  assignment_expression   : binary_expression\n                                    | unary_expression assignment_operator assignment_expression\n         assignment_operator : EQUALS\n                                | TIMESASSIGN\n                                | DIVIDEASSIGN\n                                | MODASSIGN\n                                | PLUSASSIGN\n                                | MINUSASSIGN\n         unary_expression : postfix_expression\n         unary_expression    : PLUSPLUS unary_expression\n                                | MINUSMINUS unary_expression\n                                | unary_operator cast_expression\n         binary_expression   : cast_expression\n                                | binary_expression TIMES binary_expression\n                                | binary_expression DIVIDE binary_expression\n                                | binary_expression MOD binary_expression\n                                | binary_expression PLUS binary_expression\n                                | binary_expression MINUS binary_expression\n                                | binary_expression LT binary_expression\n                                | binary_expression LE binary_expression\n                                | binary_expression HT binary_expression\n                                | binary_expression HE binary_expression\n                                | binary_expression EQ binary_expression\n                                | binary_expression DIFF binary_expression\n                                | binary_expression AND binary_expression\n                                | binary_expression OR binary_expression\n         constant_expression : binary_expression  constant_expression_opt : constant_expression\n                                    | empty\n         identifier : ID  identifier_list_opt : identifier_list\n                                | empty\n         identifier_list : identifier\n                            | identifier_list COMMA identifier\n         unary_operator : ADDRESS\n                           | TIMES\n                           | PLUS\n                           | MINUS\n                           | UNARYDIFF\n         type_specifier : VOID\n                           | CHAR\n                           | INT\n                           | FLOAT\n         constant : INT_CONST  constant : FLOAT_CONST  constant : CHAR_CONST  constant : STRING  jump_statement  : BREAK SEMI  jump_statement  : RETURN expression_opt SEMI  block_item  : declaration\n                        | statement\n         block_item_list : block_item\n                            | block_item_list block_item\n         compound_statement   : LBRACE block_item_list RBRACE  selection_statement : IF LPAREN expression RPAREN statement  selection_statement : IF LPAREN expression RPAREN statement ELSE statement  iteration_statement : WHILE LPAREN expression RPAREN statement  iteration_statement : FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement  iteration_statement : FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement  expression_statement : expression_opt SEMI  assert_statement : ASSERT expression SEMI  print_statement : PRINT LPAREN expression_opt RPAREN SEMI  read_statement : READ LPAREN argument_expression RPAREN SEMI  statement   : expression_statement\n                        | selection_statement\n                        | compound_statement\n                        | iteration_statement\n                        | jump_statement\n                        | assert_statement\n                        | print_statement\n                        | read_statement\n         expression_opt : expression\n                           | empty\n         function_definition : type_specifier declarator declaration_list_opt compound_statement  function_definition : declarator declaration_list_opt compound_statement empty :\n        '
    
_lr_action_items = {'VOID':([0,2,3,4,5,8,13,14,16,17,18,19,25,27,30,35,36,37,48,69,70,77,78,79,80,81,82,83,84,85,86,87,88,101,125,126,127,139,140,141,145,146,180,181,197,198,201,202,206,210,211,],[9,9,-2,-4,-5,9,-12,-22,-76,-3,-6,9,9,-7,9,-121,9,-8,9,-23,-120,9,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,-24,-25,-26,9,-100,-99,-106,9,-94,-95,-107,-101,-103,-108,-109,-102,-105,-104,]),'CHAR':([0,2,3,4,5,8,13,14,16,17,18,19,25,27,30,35,36,37,48,69,70,77,78,79,80,81,82,83,84,85,86,87,88,101,125,126,127,139,140,141,145,146,180,181,197,198,201,202,206,210,211,],[10,10,-2,-4,-5,10,-12,-22,-76,-3,-6,10,10,-7,10,-121,10,-8,10,-23,-120,10,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,-24,-25,-26,10,-100,-99,-106,10,-94,-95,-107,-101,-103,-108,-109,-102,-105,-104,]),'INT':([0,2,3,4,5,8,13,14,16,17,18,19,25,27,30,35,36,37,48,69,70,77,78,79,80,81,82,83,84,85,86,87,88,101,125,126,127,139,140,141,145,146,180,181,197,198,201,202,206,210,211,],[11,11,-2,-4,-5,11,-12,-22,-76,-3,-6,11,11,-7,11,-121,11,-8,11,-23,-120,11,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,-24,-25,-26,11,-100,-99,-106,11,-94,-95,-107,-101,-103,-108,-109,-102,-105,-104,]),'FLOAT':([0,2,3,4,5,8,13,14,16,17,18,19,25,27,30,35,36,37,48,69,70,77,78,79,80,81,82,83,84,85,86,87,88,101,125,126,127,139,140,141,145,146,180,181,197,198,201,202,206,210,211,],[12,12,-2,-4,-5,12,-12,-22,-76,-3,-6,12,12,-7,12,-121,12,-8,12,-23,-120,12,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,-24,-25,-26,12,-100,-99,-106,12,-94,-95,-107,-101,-103,-108,-109,-102,-105,-104,]),'LPAREN':([0,2,3,4,5,7,9,10,11,12,13,14,15,16,17,18,28,29,33,34,35,36,44,45,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,68,69,70,73,77,78,79,80,81,82,83,84,85,86,87,88,90,92,93,95,96,97,98,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,120,122,125,126,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,149,150,164,165,166,173,179,180,181,185,186,187,190,191,192,197,198,200,201,202,203,204,206,208,209,210,211,],[15,15,-2,-4,-5,15,-86,-87,-88,-89,30,-22,15,-76,-3,-6,15,48,48,15,-121,48,-82,-83,-84,48,119,122,122,48,-32,-81,-85,-42,-43,-90,-91,-92,-93,15,-23,-120,48,48,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,142,144,145,48,48,149,150,-24,48,48,48,48,48,48,48,48,48,48,48,48,48,-33,-34,48,48,48,-25,-26,48,-49,-50,-51,-52,-53,-54,-100,-99,-106,48,48,48,48,-94,48,48,48,-44,-35,48,48,-95,-107,-36,48,-37,48,48,48,-101,-103,48,-108,-109,48,48,-102,48,48,-105,-104,]),'ID':([0,2,3,4,5,7,9,10,11,12,15,17,18,28,29,30,33,34,35,36,44,45,46,48,50,51,52,54,55,68,70,73,77,78,79,80,81,82,83,84,85,86,87,88,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,122,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,149,150,164,173,179,180,181,186,190,191,192,197,198,200,201,202,203,204,206,208,209,210,211,],[16,16,-2,-4,-5,16,-86,-87,-88,-89,16,-3,-6,16,16,16,16,16,-121,16,-82,-83,-84,16,16,16,16,-81,-85,16,-120,16,16,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-49,-50,-51,-52,-53,-54,-100,-99,-106,16,16,16,16,-94,16,16,16,16,16,-95,-107,16,16,16,16,-101,-103,16,-108,-109,16,16,-102,16,16,-105,-104,]),'$end':([1,2,3,4,5,17,18,35,70,139,],[0,-1,-2,-4,-5,-3,-6,-121,-120,-100,]),'SEMI':([6,7,9,10,11,12,13,14,16,18,19,20,21,22,23,28,36,38,43,47,49,53,56,57,58,59,60,61,69,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,95,99,100,101,117,118,121,123,124,125,126,139,140,141,145,146,147,148,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,172,174,176,178,179,180,181,184,185,187,188,190,191,192,193,194,195,197,198,199,201,202,203,206,208,209,210,211,],[18,-122,-86,-87,-88,-89,-12,-22,-76,-6,-13,-11,-17,-18,-15,-122,-122,-13,-59,-45,-55,-32,-42,-43,-90,-91,-92,-93,-23,-14,-27,-47,-45,-16,-122,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,141,-118,146,-122,-119,-40,-24,-33,-34,-56,-57,-58,-25,-26,-100,-99,-106,-122,-94,180,181,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-44,-35,-28,-48,-41,192,-122,-95,-107,-46,-36,-37,-29,-122,-122,-122,200,201,202,-101,-103,204,-108,-109,-122,-102,-122,-122,-105,-104,]),'LBRACE':([8,13,14,16,18,19,24,25,26,27,32,33,36,37,69,73,77,78,79,80,81,82,83,84,85,86,87,88,101,125,126,139,140,141,146,173,180,181,190,191,197,198,201,202,203,206,208,209,210,211,],[-122,-12,-22,-76,-6,-122,36,-9,-10,-7,36,73,36,-8,-23,73,36,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,-24,-25,-26,-100,-99,-106,-94,73,-95,-107,36,36,-101,-103,-108,-109,36,-102,36,36,-105,-104,]),'RPAREN':([9,10,11,12,13,14,16,30,31,43,47,49,53,56,57,58,59,60,61,62,63,64,65,66,67,69,74,75,91,99,100,101,115,116,117,118,119,121,123,124,125,126,129,149,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,170,171,174,175,176,177,182,183,184,185,187,196,200,204,205,207,],[-86,-87,-88,-89,-12,-22,-76,-122,69,-59,-45,-55,-32,-42,-43,-90,-91,-92,-93,125,126,-77,-78,-20,-79,-23,-47,-45,-118,-119,-40,-24,164,165,-33,-34,166,-56,-57,-58,-25,-26,-19,-122,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-44,-35,185,-38,-21,-80,-48,190,-41,191,194,195,-46,-36,-37,-39,-122,-122,208,209,]),'EQUALS':([13,14,16,19,38,47,49,53,56,57,58,59,60,61,69,75,101,117,118,121,123,124,125,126,165,166,184,185,187,],[-12,-22,-76,33,33,-45,-55,-32,-42,-43,-90,-91,-92,-93,-23,133,-24,-33,-34,-56,-57,-58,-25,-26,-44,-35,-46,-36,-37,]),'COMMA':([13,14,16,19,21,23,38,43,47,49,53,56,57,58,59,60,61,63,64,66,67,69,71,72,74,75,76,91,100,101,116,117,118,121,123,124,125,126,129,130,131,148,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,169,170,171,172,174,175,176,177,183,184,185,187,188,189,196,],[-12,-22,-76,-13,34,-15,-13,-59,-45,-55,-32,-42,-43,-90,-91,-92,-93,127,128,-20,-79,-23,-14,-27,-47,-45,-16,143,-40,-24,143,-33,-34,-56,-57,-58,-25,-26,-19,173,-30,143,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-44,-35,186,-38,143,-21,-80,-28,-48,143,-41,143,186,-46,-36,-37,-29,-31,-39,]),'LBRACKET':([13,14,16,49,53,56,57,58,59,60,61,69,101,117,118,125,126,165,166,185,187,],[29,-22,-76,120,-32,-42,-43,-90,-91,-92,-93,-23,-24,-33,-34,-25,-26,-44,-35,-36,-37,]),'PLUSPLUS':([16,18,29,33,36,44,45,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,73,77,78,79,80,81,82,83,84,85,86,87,88,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,120,122,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,149,150,164,165,166,173,179,180,181,185,186,187,190,191,192,197,198,200,201,202,203,204,206,208,209,210,211,],[-76,-6,50,50,50,-82,-83,-84,50,117,50,50,50,-32,-81,-85,-42,-43,-90,-91,-92,-93,50,50,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-33,-34,50,50,50,50,-49,-50,-51,-52,-53,-54,-100,-99,-106,50,50,50,50,-94,50,50,50,-44,-35,50,50,-95,-107,-36,50,-37,50,50,50,-101,-103,50,-108,-109,50,50,-102,50,50,-105,-104,]),'MINUSMINUS':([16,18,29,33,36,44,45,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,73,77,78,79,80,81,82,83,84,85,86,87,88,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,120,122,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,149,150,164,165,166,173,179,180,181,185,186,187,190,191,192,197,198,200,201,202,203,204,206,208,209,210,211,],[-76,-6,51,51,51,-82,-83,-84,51,118,51,51,51,-32,-81,-85,-42,-43,-90,-91,-92,-93,51,51,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-33,-34,51,51,51,51,-49,-50,-51,-52,-53,-54,-100,-99,-106,51,51,51,51,-94,51,51,51,-44,-35,51,51,-95,-107,-36,51,-37,51,51,51,-101,-103,51,-108,-109,51,51,-102,51,51,-105,-104,]),'TIMES':([16,18,29,33,36,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,120,121,122,123,124,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,173,179,180,181,184,185,186,187,190,191,192,197,198,200,201,202,203,204,206,208,209,210,211,],[-76,-6,44,44,44,102,-59,-82,-83,-84,-45,44,-55,44,44,44,-32,-81,-85,-42,-43,-90,-91,-92,-93,44,102,-45,44,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-33,-34,44,44,-56,44,-57,-58,44,-49,-50,-51,-52,-53,-54,-100,-99,-106,44,44,44,44,-94,44,44,-60,-61,-62,102,102,102,102,102,102,102,102,102,102,44,-44,-35,44,44,-95,-107,-46,-36,44,-37,44,44,44,-101,-103,44,-108,-109,44,44,-102,44,44,-105,-104,]),'DIVIDE':([16,42,43,47,49,53,56,57,58,59,60,61,74,75,117,118,121,123,124,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,184,185,187,],[-76,103,-59,-45,-55,-32,-42,-43,-90,-91,-92,-93,103,-45,-33,-34,-56,-57,-58,-60,-61,-62,103,103,103,103,103,103,103,103,103,103,-44,-35,-46,-36,-37,]),'MOD':([16,42,43,47,49,53,56,57,58,59,60,61,74,75,117,118,121,123,124,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,184,185,187,],[-76,104,-59,-45,-55,-32,-42,-43,-90,-91,-92,-93,104,-45,-33,-34,-56,-57,-58,-60,-61,-62,104,104,104,104,104,104,104,104,104,104,-44,-35,-46,-36,-37,]),'PLUS':([16,18,29,33,36,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,120,121,122,123,124,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,173,179,180,181,184,185,186,187,190,191,192,197,198,200,201,202,203,204,206,208,209,210,211,],[-76,-6,45,45,45,105,-59,-82,-83,-84,-45,45,-55,45,45,45,-32,-81,-85,-42,-43,-90,-91,-92,-93,45,105,-45,45,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-33,-34,45,45,-56,45,-57,-58,45,-49,-50,-51,-52,-53,-54,-100,-99,-106,45,45,45,45,-94,45,45,-60,-61,-62,-63,-64,105,105,105,105,105,105,105,105,45,-44,-35,45,45,-95,-107,-46,-36,45,-37,45,45,45,-101,-103,45,-108,-109,45,45,-102,45,45,-105,-104,]),'MINUS':([16,18,29,33,36,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,120,121,122,123,124,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,173,179,180,181,184,185,186,187,190,191,192,197,198,200,201,202,203,204,206,208,209,210,211,],[-76,-6,46,46,46,106,-59,-82,-83,-84,-45,46,-55,46,46,46,-32,-81,-85,-42,-43,-90,-91,-92,-93,46,106,-45,46,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-33,-34,46,46,-56,46,-57,-58,46,-49,-50,-51,-52,-53,-54,-100,-99,-106,46,46,46,46,-94,46,46,-60,-61,-62,-63,-64,106,106,106,106,106,106,106,106,46,-44,-35,46,46,-95,-107,-46,-36,46,-37,46,46,46,-101,-103,46,-108,-109,46,46,-102,46,46,-105,-104,]),'LT':([16,42,43,47,49,53,56,57,58,59,60,61,74,75,117,118,121,123,124,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,184,185,187,],[-76,107,-59,-45,-55,-32,-42,-43,-90,-91,-92,-93,107,-45,-33,-34,-56,-57,-58,-60,-61,-62,-63,-64,-65,-66,-67,-68,107,107,107,107,-44,-35,-46,-36,-37,]),'LE':([16,42,43,47,49,53,56,57,58,59,60,61,74,75,117,118,121,123,124,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,184,185,187,],[-76,108,-59,-45,-55,-32,-42,-43,-90,-91,-92,-93,108,-45,-33,-34,-56,-57,-58,-60,-61,-62,-63,-64,-65,-66,-67,-68,108,108,108,108,-44,-35,-46,-36,-37,]),'HT':([16,42,43,47,49,53,56,57,58,59,60,61,74,75,117,118,121,123,124,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,184,185,187,],[-76,109,-59,-45,-55,-32,-42,-43,-90,-91,-92,-93,109,-45,-33,-34,-56,-57,-58,-60,-61,-62,-63,-64,-65,-66,-67,-68,109,109,109,109,-44,-35,-46,-36,-37,]),'HE':([16,42,43,47,49,53,56,57,58,59,60,61,74,75,117,118,121,123,124,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,184,185,187,],[-76,110,-59,-45,-55,-32,-42,-43,-90,-91,-92,-93,110,-45,-33,-34,-56,-57,-58,-60,-61,-62,-63,-64,-65,-66,-67,-68,110,110,110,110,-44,-35,-46,-36,-37,]),'EQ':([16,42,43,47,49,53,56,57,58,59,60,61,74,75,117,118,121,123,124,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,184,185,187,],[-76,111,-59,-45,-55,-32,-42,-43,-90,-91,-92,-93,111,-45,-33,-34,-56,-57,-58,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,111,111,-44,-35,-46,-36,-37,]),'DIFF':([16,42,43,47,49,53,56,57,58,59,60,61,74,75,117,118,121,123,124,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,184,185,187,],[-76,112,-59,-45,-55,-32,-42,-43,-90,-91,-92,-93,112,-45,-33,-34,-56,-57,-58,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,112,112,-44,-35,-46,-36,-37,]),'AND':([16,42,43,47,49,53,56,57,58,59,60,61,74,75,117,118,121,123,124,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,184,185,187,],[-76,113,-59,-45,-55,-32,-42,-43,-90,-91,-92,-93,113,-45,-33,-34,-56,-57,-58,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,113,-44,-35,-46,-36,-37,]),'OR':([16,42,43,47,49,53,56,57,58,59,60,61,74,75,117,118,121,123,124,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,184,185,187,],[-76,114,-59,-45,-55,-32,-42,-43,-90,-91,-92,-93,114,-45,-33,-34,-56,-57,-58,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-44,-35,-46,-36,-37,]),'RBRACKET':([16,29,39,40,41,42,43,47,49,53,56,57,58,59,60,61,74,75,100,117,118,121,123,124,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,169,174,176,184,185,187,],[-76,-122,101,-74,-75,-73,-59,-45,-55,-32,-42,-43,-90,-91,-92,-93,-47,-45,-40,-33,-34,-56,-57,-58,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-44,-35,187,-48,-41,-46,-36,-37,]),'TIMESASSIGN':([16,47,49,53,56,57,58,59,60,61,75,117,118,121,123,124,165,166,184,185,187,],[-76,-45,-55,-32,-42,-43,-90,-91,-92,-93,134,-33,-34,-56,-57,-58,-44,-35,-46,-36,-37,]),'DIVIDEASSIGN':([16,47,49,53,56,57,58,59,60,61,75,117,118,121,123,124,165,166,184,185,187,],[-76,-45,-55,-32,-42,-43,-90,-91,-92,-93,135,-33,-34,-56,-57,-58,-44,-35,-46,-36,-37,]),'MODASSIGN':([16,47,49,53,56,57,58,59,60,61,75,117,118,121,123,124,165,166,184,185,187,],[-76,-45,-55,-32,-42,-43,-90,-91,-92,-93,136,-33,-34,-56,-57,-58,-44,-35,-46,-36,-37,]),'PLUSASSIGN':([16,47,49,53,56,57,58,59,60,61,75,117,118,121,123,124,165,166,184,185,187,],[-76,-45,-55,-32,-42,-43,-90,-91,-92,-93,137,-33,-34,-56,-57,-58,-44,-35,-46,-36,-37,]),'MINUSASSIGN':([16,47,49,53,56,57,58,59,60,61,75,117,118,121,123,124,165,166,184,185,187,],[-76,-45,-55,-32,-42,-43,-90,-91,-92,-93,138,-33,-34,-56,-57,-58,-44,-35,-46,-36,-37,]),'RBRACE':([16,18,43,47,49,53,56,57,58,59,60,61,72,74,75,77,78,79,80,81,82,83,84,85,86,87,88,117,118,121,123,124,130,131,139,140,141,146,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,172,173,174,180,181,184,185,187,188,189,197,198,201,202,206,210,211,],[-76,-6,-59,-45,-55,-32,-42,-43,-90,-91,-92,-93,-27,-47,-45,139,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,-33,-34,-56,-57,-58,172,-30,-100,-99,-106,-94,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-44,-35,-28,188,-48,-95,-107,-46,-36,-37,-29,-31,-101,-103,-108,-109,-102,-105,-104,]),'IF':([18,36,77,78,79,80,81,82,83,84,85,86,87,88,139,140,141,146,180,181,190,191,197,198,201,202,203,206,208,209,210,211,],[-6,90,90,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,-100,-99,-106,-94,-95,-107,90,90,-101,-103,-108,-109,90,-102,90,90,-105,-104,]),'WHILE':([18,36,77,78,79,80,81,82,83,84,85,86,87,88,139,140,141,146,180,181,190,191,197,198,201,202,203,206,208,209,210,211,],[-6,92,92,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,-100,-99,-106,-94,-95,-107,92,92,-101,-103,-108,-109,92,-102,92,92,-105,-104,]),'FOR':([18,36,77,78,79,80,81,82,83,84,85,86,87,88,139,140,141,146,180,181,190,191,197,198,201,202,203,206,208,209,210,211,],[-6,93,93,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,-100,-99,-106,-94,-95,-107,93,93,-101,-103,-108,-109,93,-102,93,93,-105,-104,]),'BREAK':([18,36,77,78,79,80,81,82,83,84,85,86,87,88,139,140,141,146,180,181,190,191,197,198,201,202,203,206,208,209,210,211,],[-6,94,94,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,-100,-99,-106,-94,-95,-107,94,94,-101,-103,-108,-109,94,-102,94,94,-105,-104,]),'RETURN':([18,36,77,78,79,80,81,82,83,84,85,86,87,88,139,140,141,146,180,181,190,191,197,198,201,202,203,206,208,209,210,211,],[-6,95,95,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,-100,-99,-106,-94,-95,-107,95,95,-101,-103,-108,-109,95,-102,95,95,-105,-104,]),'ASSERT':([18,36,77,78,79,80,81,82,83,84,85,86,87,88,139,140,141,146,180,181,190,191,197,198,201,202,203,206,208,209,210,211,],[-6,96,96,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,-100,-99,-106,-94,-95,-107,96,96,-101,-103,-108,-109,96,-102,96,96,-105,-104,]),'PRINT':([18,36,77,78,79,80,81,82,83,84,85,86,87,88,139,140,141,146,180,181,190,191,197,198,201,202,203,206,208,209,210,211,],[-6,97,97,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,-100,-99,-106,-94,-95,-107,97,97,-101,-103,-108,-109,97,-102,97,97,-105,-104,]),'READ':([18,36,77,78,79,80,81,82,83,84,85,86,87,88,139,140,141,146,180,181,190,191,197,198,201,202,203,206,208,209,210,211,],[-6,98,98,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,-100,-99,-106,-94,-95,-107,98,98,-101,-103,-108,-109,98,-102,98,98,-105,-104,]),'ADDRESS':([18,29,33,36,44,45,46,48,50,51,52,54,55,73,77,78,79,80,81,82,83,84,85,86,87,88,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,122,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,149,150,164,173,179,180,181,186,190,191,192,197,198,200,201,202,203,204,206,208,209,210,211,],[-6,54,54,54,-82,-83,-84,54,54,54,54,-81,-85,54,54,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-49,-50,-51,-52,-53,-54,-100,-99,-106,54,54,54,54,-94,54,54,54,54,54,-95,-107,54,54,54,54,-101,-103,54,-108,-109,54,54,-102,54,54,-105,-104,]),'UNARYDIFF':([18,29,33,36,44,45,46,48,50,51,52,54,55,73,77,78,79,80,81,82,83,84,85,86,87,88,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,122,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,149,150,164,173,179,180,181,186,190,191,192,197,198,200,201,202,203,204,206,208,209,210,211,],[-6,55,55,55,-82,-83,-84,55,55,55,55,-81,-85,55,55,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-49,-50,-51,-52,-53,-54,-100,-99,-106,55,55,55,55,-94,55,55,55,55,55,-95,-107,55,55,55,55,-101,-103,55,-108,-109,55,55,-102,55,55,-105,-104,]),'INT_CONST':([18,29,33,36,44,45,46,48,50,51,52,54,55,73,77,78,79,80,81,82,83,84,85,86,87,88,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,122,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,149,150,164,173,179,180,181,186,190,191,192,197,198,200,201,202,203,204,206,208,209,210,211,],[-6,58,58,58,-82,-83,-84,58,58,58,58,-81,-85,58,58,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-49,-50,-51,-52,-53,-54,-100,-99,-106,58,58,58,58,-94,58,58,58,58,58,-95,-107,58,58,58,58,-101,-103,58,-108,-109,58,58,-102,58,58,-105,-104,]),'FLOAT_CONST':([18,29,33,36,44,45,46,48,50,51,52,54,55,73,77,78,79,80,81,82,83,84,85,86,87,88,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,122,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,149,150,164,173,179,180,181,186,190,191,192,197,198,200,201,202,203,204,206,208,209,210,211,],[-6,59,59,59,-82,-83,-84,59,59,59,59,-81,-85,59,59,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-49,-50,-51,-52,-53,-54,-100,-99,-106,59,59,59,59,-94,59,59,59,59,59,-95,-107,59,59,59,59,-101,-103,59,-108,-109,59,59,-102,59,59,-105,-104,]),'CHAR_CONST':([18,29,33,36,44,45,46,48,50,51,52,54,55,73,77,78,79,80,81,82,83,84,85,86,87,88,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,122,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,149,150,164,173,179,180,181,186,190,191,192,197,198,200,201,202,203,204,206,208,209,210,211,],[-6,60,60,60,-82,-83,-84,60,60,60,60,-81,-85,60,60,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-49,-50,-51,-52,-53,-54,-100,-99,-106,60,60,60,60,-94,60,60,60,60,60,-95,-107,60,60,60,60,-101,-103,60,-108,-109,60,60,-102,60,60,-105,-104,]),'STRING':([18,29,33,36,44,45,46,48,50,51,52,54,55,73,77,78,79,80,81,82,83,84,85,86,87,88,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,122,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,149,150,164,173,179,180,181,186,190,191,192,197,198,200,201,202,203,204,206,208,209,210,211,],[-6,61,61,61,-82,-83,-84,61,61,61,61,-81,-85,61,61,-98,-96,-97,-110,-111,-112,-113,-114,-115,-116,-117,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-49,-50,-51,-52,-53,-54,-100,-99,-106,61,61,61,61,-94,61,61,61,61,61,-95,-107,61,61,61,61,-101,-103,61,-108,-109,61,61,-102,61,61,-105,-104,]),'ELSE':([81,82,83,84,85,86,87,88,139,141,146,180,181,197,198,201,202,206,210,211,],[-110,-111,-112,-113,-114,-115,-116,-117,-100,-106,-94,-95,-107,203,-103,-108,-109,-102,-105,-104,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list':([0,],[2,]),'global_declaration':([0,2,],[3,17,]),'declaration':([0,2,8,19,25,36,77,145,],[4,4,27,27,37,79,79,179,]),'function_definition':([0,2,],[5,5,]),'decl_body':([0,2,8,19,25,36,77,145,],[6,6,6,6,6,6,6,6,]),'type_specifier':([0,2,8,19,25,30,36,48,77,127,145,],[7,7,28,28,28,68,28,115,28,68,28,]),'declarator':([0,2,7,15,28,34,68,],[8,8,19,31,38,38,129,]),'direct_declarator':([0,2,7,15,28,34,68,],[13,13,13,13,13,13,13,]),'identifier':([0,2,7,15,28,29,30,33,34,36,48,50,51,52,68,73,77,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,122,128,132,142,143,144,145,149,150,164,173,179,186,190,191,192,200,203,204,208,209,],[14,14,14,14,14,56,67,56,14,56,56,56,56,56,14,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,171,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'init_declarator_list_opt':([7,28,],[20,20,]),'init_declarator_list':([7,28,],[21,21,]),'empty':([7,8,19,28,29,30,36,77,95,145,149,179,190,191,192,200,203,204,208,209,],[22,26,26,22,41,65,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'init_declarator':([7,28,34,],[23,23,76,]),'declaration_list_opt':([8,19,],[24,32,]),'declaration_list':([8,19,],[25,25,]),'compound_statement':([24,32,36,77,190,191,203,208,209,],[35,70,83,83,83,83,83,83,83,]),'constant_expression_opt':([29,],[39,]),'constant_expression':([29,],[40,]),'binary_expression':([29,33,36,48,73,77,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,122,132,142,143,144,145,149,150,173,179,186,190,191,192,200,203,204,208,209,],[42,74,74,74,74,74,74,74,151,152,153,154,155,156,157,158,159,160,161,162,163,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'cast_expression':([29,33,36,48,52,73,77,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,122,132,142,143,144,145,149,150,164,173,179,186,190,191,192,200,203,204,208,209,],[43,43,43,43,124,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,184,43,43,43,43,43,43,43,43,43,43,43,]),'unary_expression':([29,33,36,48,50,51,52,73,77,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,122,132,142,143,144,145,149,150,164,173,179,186,190,191,192,200,203,204,208,209,],[47,75,75,75,121,123,47,75,75,75,75,47,47,47,47,47,47,47,47,47,47,47,47,47,75,75,75,75,75,75,75,75,75,75,47,75,75,75,75,75,75,75,75,75,75,75,]),'postfix_expression':([29,33,36,48,50,51,52,73,77,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,122,132,142,143,144,145,149,150,164,173,179,186,190,191,192,200,203,204,208,209,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'unary_operator':([29,33,36,48,50,51,52,73,77,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,122,132,142,143,144,145,149,150,164,173,179,186,190,191,192,200,203,204,208,209,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'primary_expression':([29,33,36,48,50,51,52,73,77,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,122,132,142,143,144,145,149,150,164,173,179,186,190,191,192,200,203,204,208,209,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'constant':([29,33,36,48,50,51,52,73,77,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,122,132,142,143,144,145,149,150,164,173,179,186,190,191,192,200,203,204,208,209,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'identifier_list_opt':([30,],[62,]),'parameter_list':([30,],[63,]),'identifier_list':([30,],[64,]),'parameter_declaration':([30,127,],[66,170,]),'initializer':([33,73,173,],[71,131,189,]),'assignment_expression':([33,36,48,73,77,95,96,119,120,122,132,142,143,144,145,149,150,173,179,186,190,191,192,200,203,204,208,209,],[72,100,100,72,100,100,100,168,100,100,174,100,176,100,100,100,168,72,100,196,100,100,100,100,100,100,100,100,]),'block_item_list':([36,],[77,]),'block_item':([36,77,],[78,140,]),'statement':([36,77,190,191,203,208,209,],[80,80,197,198,206,210,211,]),'expression_statement':([36,77,190,191,203,208,209,],[81,81,81,81,81,81,81,]),'selection_statement':([36,77,190,191,203,208,209,],[82,82,82,82,82,82,82,]),'iteration_statement':([36,77,190,191,203,208,209,],[84,84,84,84,84,84,84,]),'jump_statement':([36,77,190,191,203,208,209,],[85,85,85,85,85,85,85,]),'assert_statement':([36,77,190,191,203,208,209,],[86,86,86,86,86,86,86,]),'print_statement':([36,77,190,191,203,208,209,],[87,87,87,87,87,87,87,]),'read_statement':([36,77,190,191,203,208,209,],[88,88,88,88,88,88,88,]),'expression_opt':([36,77,95,145,149,179,190,191,192,200,203,204,208,209,],[89,89,147,178,182,193,89,89,199,205,89,207,89,89,]),'expression':([36,48,77,95,96,120,122,142,144,145,149,179,190,191,192,200,203,204,208,209,],[91,116,91,91,148,169,116,175,177,91,91,91,91,91,91,91,91,91,91,91,]),'initializer_list':([73,],[130,]),'assignment_operator':([75,],[132,]),'argument_expression':([119,150,],[167,183,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_declaration_list','program',1,'p_program','Parser.py',154),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','Parser.py',159),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','Parser.py',160),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration_1','Parser.py',168),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration_2','Parser.py',172),
  ('declaration -> decl_body SEMI','declaration',2,'p_declaration','Parser.py',176),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',180),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','Parser.py',181),
  ('declaration_list_opt -> declaration_list','declaration_list_opt',1,'p_declaration_list_opt','Parser.py',190),
  ('declaration_list_opt -> empty','declaration_list_opt',1,'p_declaration_list_opt','Parser.py',191),
  ('decl_body -> type_specifier init_declarator_list_opt','decl_body',2,'p_decl_body','Parser.py',196),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','Parser.py',203),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','Parser.py',208),
  ('init_declarator -> declarator EQUALS initializer','init_declarator',3,'p_init_declarator','Parser.py',209),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','Parser.py',214),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','Parser.py',215),
  ('init_declarator_list_opt -> init_declarator_list','init_declarator_list_opt',1,'p_init_declarator_list_opt','Parser.py',223),
  ('init_declarator_list_opt -> empty','init_declarator_list_opt',1,'p_init_declarator_list_opt','Parser.py',224),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','Parser.py',229),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','Parser.py',233),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','Parser.py',234),
  ('direct_declarator -> identifier','direct_declarator',1,'p_direct_declarator_1','Parser.py',243),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator_2','Parser.py',247),
  ('direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET','direct_declarator',4,'p_direct_declarator_3','Parser.py',251),
  ('direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN','direct_declarator',4,'p_direct_declarator_4','Parser.py',258),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator_4','Parser.py',259),
  ('initializer -> assignment_expression','initializer',1,'p_initializer_1','Parser.py',264),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer_2','Parser.py',268),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer_2','Parser.py',269),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','Parser.py',277),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','Parser.py',278),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','Parser.py',287),
  ('postfix_expression -> postfix_expression PLUSPLUS','postfix_expression',2,'p_postfix_expression_2','Parser.py',291),
  ('postfix_expression -> postfix_expression MINUSMINUS','postfix_expression',2,'p_postfix_expression_2','Parser.py',292),
  ('postfix_expression -> postfix_expression LPAREN RPAREN','postfix_expression',3,'p_postfix_expression_3','Parser.py',297),
  ('postfix_expression -> postfix_expression LPAREN argument_expression RPAREN','postfix_expression',4,'p_postfix_expression_3','Parser.py',298),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression_4','Parser.py',304),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','Parser.py',308),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','Parser.py',309),
  ('expression -> assignment_expression','expression',1,'p_expression_1','Parser.py',320),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression_2','Parser.py',324),
  ('primary_expression -> identifier','primary_expression',1,'p_primary_expression_1','Parser.py',331),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression_1','Parser.py',332),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression_2','Parser.py',337),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression_1','Parser.py',341),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression_2','Parser.py',345),
  ('assignment_expression -> binary_expression','assignment_expression',1,'p_assignment_expression','Parser.py',349),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','Parser.py',350),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','Parser.py',358),
  ('assignment_operator -> TIMESASSIGN','assignment_operator',1,'p_assignment_operator','Parser.py',359),
  ('assignment_operator -> DIVIDEASSIGN','assignment_operator',1,'p_assignment_operator','Parser.py',360),
  ('assignment_operator -> MODASSIGN','assignment_operator',1,'p_assignment_operator','Parser.py',361),
  ('assignment_operator -> PLUSASSIGN','assignment_operator',1,'p_assignment_operator','Parser.py',362),
  ('assignment_operator -> MINUSASSIGN','assignment_operator',1,'p_assignment_operator','Parser.py',363),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','Parser.py',368),
  ('unary_expression -> PLUSPLUS unary_expression','unary_expression',2,'p_unary_expression_2','Parser.py',373),
  ('unary_expression -> MINUSMINUS unary_expression','unary_expression',2,'p_unary_expression_2','Parser.py',374),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','Parser.py',375),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','Parser.py',380),
  ('binary_expression -> binary_expression TIMES binary_expression','binary_expression',3,'p_binary_expression','Parser.py',381),
  ('binary_expression -> binary_expression DIVIDE binary_expression','binary_expression',3,'p_binary_expression','Parser.py',382),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression','Parser.py',383),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression','Parser.py',384),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression','Parser.py',385),
  ('binary_expression -> binary_expression LT binary_expression','binary_expression',3,'p_binary_expression','Parser.py',386),
  ('binary_expression -> binary_expression LE binary_expression','binary_expression',3,'p_binary_expression','Parser.py',387),
  ('binary_expression -> binary_expression HT binary_expression','binary_expression',3,'p_binary_expression','Parser.py',388),
  ('binary_expression -> binary_expression HE binary_expression','binary_expression',3,'p_binary_expression','Parser.py',389),
  ('binary_expression -> binary_expression EQ binary_expression','binary_expression',3,'p_binary_expression','Parser.py',390),
  ('binary_expression -> binary_expression DIFF binary_expression','binary_expression',3,'p_binary_expression','Parser.py',391),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression','Parser.py',392),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression','Parser.py',393),
  ('constant_expression -> binary_expression','constant_expression',1,'p_constant_expression','Parser.py',401),
  ('constant_expression_opt -> constant_expression','constant_expression_opt',1,'p_constant_expression_opt','Parser.py',405),
  ('constant_expression_opt -> empty','constant_expression_opt',1,'p_constant_expression_opt','Parser.py',406),
  ('identifier -> ID','identifier',1,'p_identifier','Parser.py',411),
  ('identifier_list_opt -> identifier_list','identifier_list_opt',1,'p_identifier_list_opt','Parser.py',415),
  ('identifier_list_opt -> empty','identifier_list_opt',1,'p_identifier_list_opt','Parser.py',416),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','Parser.py',421),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','Parser.py',422),
  ('unary_operator -> ADDRESS','unary_operator',1,'p_unary_operator','Parser.py',431),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','Parser.py',432),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','Parser.py',433),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','Parser.py',434),
  ('unary_operator -> UNARYDIFF','unary_operator',1,'p_unary_operator','Parser.py',435),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','Parser.py',440),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','Parser.py',441),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','Parser.py',442),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','Parser.py',443),
  ('constant -> INT_CONST','constant',1,'p_constant_1','Parser.py',448),
  ('constant -> FLOAT_CONST','constant',1,'p_constant_2','Parser.py',452),
  ('constant -> CHAR_CONST','constant',1,'p_constant_3','Parser.py',456),
  ('constant -> STRING','constant',1,'p_constant_4','Parser.py',460),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement_1','Parser.py',464),
  ('jump_statement -> RETURN expression_opt SEMI','jump_statement',3,'p_jump_statement_2','Parser.py',468),
  ('block_item -> declaration','block_item',1,'p_block_item','Parser.py',476),
  ('block_item -> statement','block_item',1,'p_block_item','Parser.py',477),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','Parser.py',485),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','Parser.py',486),
  ('compound_statement -> LBRACE block_item_list RBRACE','compound_statement',3,'p_compound_statement','Parser.py',495),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement_1','Parser.py',499),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement_2','Parser.py',503),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement_1','Parser.py',507),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement_2','Parser.py',511),
  ('iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement','iteration_statement',8,'p_iteration_statement_3','Parser.py',515),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','Parser.py',519),
  ('assert_statement -> ASSERT expression SEMI','assert_statement',3,'p_assert_statement','Parser.py',526),
  ('print_statement -> PRINT LPAREN expression_opt RPAREN SEMI','print_statement',5,'p_print_statement','Parser.py',530),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','Parser.py',534),
  ('statement -> expression_statement','statement',1,'p_statement','Parser.py',538),
  ('statement -> selection_statement','statement',1,'p_statement','Parser.py',539),
  ('statement -> compound_statement','statement',1,'p_statement','Parser.py',540),
  ('statement -> iteration_statement','statement',1,'p_statement','Parser.py',541),
  ('statement -> jump_statement','statement',1,'p_statement','Parser.py',542),
  ('statement -> assert_statement','statement',1,'p_statement','Parser.py',543),
  ('statement -> print_statement','statement',1,'p_statement','Parser.py',544),
  ('statement -> read_statement','statement',1,'p_statement','Parser.py',545),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','Parser.py',550),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','Parser.py',551),
  ('function_definition -> type_specifier declarator declaration_list_opt compound_statement','function_definition',4,'p_function_definition_1','Parser.py',556),
  ('function_definition -> declarator declaration_list_opt compound_statement','function_definition',3,'p_function_definition_2','Parser.py',560),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',565),
]
