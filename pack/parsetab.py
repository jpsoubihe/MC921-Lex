
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNOT_EQUALleftGTGTELTLTEleftPLUSMINUSleftTIMESDIVMODADDRESS AND ASSERT BREAK CHAR CHAR_CONST COMMA DIV DIV_EQUALS ELSE EQ EQUALS FLOAT FLOAT_CONST FOR GT GTE ID IF INT INT_CONST LBRACE LBRACKET LPAREN LT LTE MINUS MINUSMINUS MINUS_EQUALS MOD MOD_EQUALS NOT NOT_EQUAL OR PLUS PLUSPLUS PLUS_EQUALS PRINT RBRACE RBRACKET READ RETURN RPAREN SEMI STRING TIMES TIMES_EQUALS VOID WHILE\n        program : global_declaration_list\n        \n        global_declaration_list : global_declaration\n                                | global_declaration_list global_declaration\n        \n        global_declaration : function_definition\n        \n        function_definition : type_specifier_opt declarator compound_statement\n        \n        global_declaration : declaration\n        \n        type_specifier_opt : type_specifier\n                           | empty\n        \n        declaration_list : declaration\n                        | declaration_list declaration\n        \n        type_specifier : VOID\n                        | CHAR\n                        | INT\n                        | FLOAT\n        \n        declarator : pointer direct_declarator\n                   | direct_declarator\n         pointer : TIMES\n                    | TIMES pointer\n        \n        constant_expression_opt : constant_expression\n                                | empty\n        \n        direct_declarator : LPAREN declarator RPAREN\n        \n        direct_declarator : direct_declarator LBRACKET constant_expression_opt RBRACKET\n        \n        direct_declarator : direct_declarator LPAREN parameter_list RPAREN\n        \n        direct_declarator : direct_declarator LPAREN identifier_list_opt RPAREN\n        \n        direct_declarator : identifier\n        \n        identifier_list_opt : identifier_list\n                            | empty\n        \n        identifier_list : identifier\n                        | identifier_list identifier\n        \n        identifier : ID\n        \n        constant_expression : binary_expression\n        \n        binary_expression : cast_expression\n        \n        binary_expression : binary_expression TIMES binary_expression\n                        | binary_expression DIV binary_expression\n                        | binary_expression MOD binary_expression\n                        | binary_expression PLUS binary_expression\n                        | binary_expression MINUS binary_expression\n                        | binary_expression LT binary_expression\n                        | binary_expression LTE binary_expression\n                        | binary_expression GT binary_expression\n                        | binary_expression GTE binary_expression\n                        | binary_expression EQ binary_expression\n                        | binary_expression NOT_EQUAL binary_expression\n                        | binary_expression AND binary_expression\n                        | binary_expression OR binary_expression\n        \n        cast_expression : unary_expression\n        \n        cast_expression : LPAREN type_specifier RPAREN cast_expression\n        \n        unary_expression : postfix_expression\n                        | PLUSPLUS unary_expression\n                        | MINUSMINUS unary_expression\n                        | unary_operator cast_expression\n        \n        postfix_expression : primary_expression\n        \n        postfix_expression : postfix_expression LBRACKET expression RBRACKET\n        \n        postfix_expression : postfix_expression LPAREN argument_expression RPAREN\n                        | postfix_expression LPAREN RPAREN\n        \n        postfix_expression : postfix_expression PLUSPLUS\n                        | postfix_expression MINUSMINUS\n        \n        string_constant : STRING\n        \n        primary_expression : identifier\n                           | constant\n                           | string_constant\n        \n        primary_expression : LPAREN expression RPAREN\n        \n        constant : INT_CONST\n        \n        constant : CHAR_CONST\n        \n        constant : FLOAT_CONST\n        \n        expression : assignment_expression\n                   | expression COMMA assignment_expression\n        \n        argument_expression : assignment_expression\n                            | argument_expression COMMA assignment_expression\n        \n        assignment_expression : binary_expression\n                            | unary_expression assignment_operator assignment_expression\n        \n        assignment_operator : EQUALS\n                            | TIMES_EQUALS\n                            | DIV_EQUALS\n                            | MOD_EQUALS\n                            | PLUS_EQUALS\n                            | MINUS_EQUALS\n        \n        unary_operator : ADDRESS\n                       | TIMES\n                       | PLUS\n                       | MINUS\n                       | NOT\n        \n        parameter_list : parameter_declaration\n                        | parameter_list COMMA parameter_declaration\n        \n        parameter_declaration : type_specifier declarator\n         decl_body : type_specifier_opt init_declarator_list_opt\n         declaration : decl_body SEMI\n        \n        init_declarator_list_opt : init_declarator_list\n                                 | empty\n        \n        init_declarator_list : init_declarator\n        \n        init_declarator_list : init_declarator_list COMMA init_declarator\n        \n        init_declarator : declarator\n                        | declarator EQUALS initializer\n        \n        initializer : assignment_expression\n        \n        initializer : LBRACE initializer_list RBRACE\n                    | LBRACE initializer_list COMMA RBRACE\n        \n        initializer_list : initializer\n                        | initializer_list COMMA initializer\n        \n        compound_statement : LBRACE block_item_list_opt RBRACE\n        \n        block_item_list_opt : block_item_list\n                            | empty\n        \n        block_item_list : block_item\n                        | block_item_list block_item\n        \n        block_item : statement\n                   | declaration\n        \n        statement : expression_statement\n                | compound_statement\n                | selection_statement\n                | iteration_statement\n                | jump_statement\n                | assert_statement\n                | print_statement\n                | read_statement\n        \n        expression_statement : expression_opt SEMI\n        \n        expression_opt : expression\n                       | empty\n        \n        selection_statement : IF LPAREN expression RPAREN statement\n        \n        selection_statement : IF LPAREN expression RPAREN statement ELSE statement\n        \n        iteration_statement : WHILE LPAREN expression RPAREN statement\n        \n        iteration_statement : FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement\n        \n        iteration_statement : FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement\n        \n        jump_statement : BREAK SEMI\n        \n        jump_statement : RETURN expression SEMI\n                    | RETURN SEMI\n        \n        assert_statement : ASSERT expression SEMI\n        \n        print_statement : PRINT LPAREN expression_opt RPAREN SEMI\n        \n        read_statement : READ LPAREN argument_expression RPAREN SEMI\n        \n        empty :\n        '
    
_lr_action_items = {'VOID':([0,2,3,4,5,14,26,27,29,32,49,61,63,64,65,66,67,68,69,70,71,72,73,133,134,136,140,141,143,149,180,181,199,200,203,204,208,211,213,],[10,10,-2,-4,-6,-3,-87,-5,10,10,10,10,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-99,-103,-114,10,-122,-124,10,-123,-125,-117,-119,-126,-127,-118,-120,-121,]),'CHAR':([0,2,3,4,5,14,26,27,29,32,49,61,63,64,65,66,67,68,69,70,71,72,73,133,134,136,140,141,143,149,180,181,199,200,203,204,208,211,213,],[11,11,-2,-4,-6,-3,-87,-5,11,11,11,11,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-99,-103,-114,11,-122,-124,11,-123,-125,-117,-119,-126,-127,-118,-120,-121,]),'INT':([0,2,3,4,5,14,26,27,29,32,49,61,63,64,65,66,67,68,69,70,71,72,73,133,134,136,140,141,143,149,180,181,199,200,203,204,208,211,213,],[12,12,-2,-4,-6,-3,-87,-5,12,12,12,12,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-99,-103,-114,12,-122,-124,12,-123,-125,-117,-119,-126,-127,-118,-120,-121,]),'FLOAT':([0,2,3,4,5,14,26,27,29,32,49,61,63,64,65,66,67,68,69,70,71,72,73,133,134,136,140,141,143,149,180,181,199,200,203,204,208,211,213,],[13,13,-2,-4,-6,-3,-87,-5,13,13,13,13,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-99,-103,-114,13,-122,-124,13,-123,-125,-117,-119,-126,-127,-118,-120,-121,]),'TIMES':([0,2,3,4,5,6,8,9,10,11,12,13,14,21,22,25,26,27,28,29,31,33,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,80,81,84,89,90,96,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,135,136,137,138,139,140,141,143,145,146,154,155,156,157,158,159,160,161,162,163,164,165,166,167,171,173,174,178,180,181,188,189,190,191,192,193,195,199,200,201,203,204,205,207,208,209,211,212,213,],[-128,-128,-2,-4,-6,21,-7,-8,-11,-12,-13,-14,-3,21,21,-30,-87,-5,42,42,42,21,42,103,-46,-32,-79,-80,-81,-48,42,42,42,42,-52,-78,-82,-59,-60,-61,-63,-64,-65,-58,42,-8,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,42,42,21,103,-46,21,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-72,-73,-74,-75,-76,-77,42,42,-56,-57,-49,42,-50,-51,-99,-103,-8,-114,42,42,42,42,-122,-124,42,42,42,-33,-34,-35,103,103,103,103,103,103,103,103,103,103,-55,42,-62,42,-123,-125,-53,-54,42,-47,42,42,42,-117,-119,42,-126,-127,42,42,-118,42,-120,42,-121,]),'LPAREN':([0,2,3,4,5,6,8,9,10,11,12,13,14,17,18,21,22,23,25,26,27,28,29,30,31,33,34,38,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,75,77,78,80,81,82,83,84,96,100,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,133,134,135,136,137,138,139,140,141,143,145,146,147,148,150,154,171,173,174,178,180,181,188,189,190,192,193,195,199,200,201,203,204,205,207,208,209,211,212,213,],[-128,-128,-2,-4,-6,22,-7,-8,-11,-12,-13,-14,-3,22,32,-17,22,-25,-30,-87,-5,49,49,32,49,22,-18,49,-79,-80,-81,124,128,128,49,49,-52,-78,-82,-59,-60,-61,-63,-64,-65,-58,49,-8,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,137,139,140,49,49,145,146,22,22,-21,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-72,-73,-74,-75,-76,-77,49,49,-56,-57,49,-99,-103,-8,-114,49,49,49,49,-122,-124,49,49,-22,-23,-24,49,-55,49,-62,49,-123,-125,-53,-54,49,49,49,49,-117,-119,49,-126,-127,49,49,-118,49,-120,49,-121,]),'ID':([0,2,3,4,5,6,8,9,10,11,12,13,14,17,21,22,25,26,27,28,29,31,32,33,34,38,42,43,44,46,47,48,49,51,52,61,62,63,64,65,66,67,68,69,70,71,72,73,80,81,84,94,96,97,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,133,134,135,136,137,138,139,140,141,143,145,146,151,154,173,178,180,181,190,192,193,195,199,200,201,203,204,205,207,208,209,211,212,213,],[-128,-128,-2,-4,-6,25,-7,-8,-11,-12,-13,-14,-3,25,-17,25,-30,-87,-5,25,25,25,25,25,-18,25,-79,-80,-81,25,25,25,25,-78,-82,25,-8,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,25,25,25,25,25,-28,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-72,-73,-74,-75,-76,-77,25,25,25,-99,-103,-8,-114,25,25,25,25,-122,-124,25,25,-29,25,25,25,-123,-125,25,25,25,25,-117,-119,25,-126,-127,25,25,-118,25,-120,25,-121,]),'SEMI':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,23,24,25,26,27,29,30,36,37,39,40,41,45,50,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,79,80,84,85,90,98,99,100,125,126,127,129,130,133,134,135,136,140,141,142,143,144,147,148,150,153,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,174,176,178,179,180,181,183,186,188,189,191,192,193,194,195,196,197,199,200,202,203,204,205,208,209,211,212,213,],[-128,-128,-2,-4,-6,-128,26,-7,-8,-11,-12,-13,-14,-3,-92,-86,-16,-88,-89,-25,-90,-30,-87,-5,-128,-15,-93,-94,-70,-46,-32,-48,-52,-59,-60,-61,-63,-64,-65,-58,-128,-8,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,136,-115,141,143,-128,-66,-46,-91,-92,-21,-56,-57,-49,-50,-51,-99,-103,-8,-114,-128,-122,180,-124,181,-22,-23,-24,-95,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-71,-55,-62,-67,-128,195,-123,-125,-116,-96,-53,-54,-47,-128,-128,201,-128,203,204,-117,-119,207,-126,-127,-128,-118,-128,-120,-128,-121,]),'$end':([1,2,3,4,5,14,26,27,133,],[0,-1,-2,-4,-6,-3,-87,-5,-99,]),'RPAREN':([10,11,12,13,18,23,25,30,32,35,39,40,41,45,50,53,54,55,56,57,58,59,76,85,90,91,92,93,94,95,97,100,124,125,126,127,129,130,131,132,145,147,148,150,151,152,155,156,157,158,159,160,161,162,163,164,165,166,167,168,170,171,172,174,175,176,177,182,183,184,185,188,189,191,198,201,206,207,210,],[-11,-12,-13,-14,-16,-25,-30,-15,-128,100,-70,-46,-32,-48,-52,-59,-60,-61,-63,-64,-65,-58,-115,-66,-46,148,150,-83,-26,-27,-28,-21,171,-56,-57,-49,-50,-51,173,174,-128,-22,-23,-24,-29,-85,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-71,189,-55,-68,-62,192,-67,193,196,-116,197,-84,-53,-54,-47,-69,-128,209,-128,212,]),'COMMA':([15,18,19,23,24,25,30,36,37,39,40,41,45,50,53,54,55,56,57,58,59,76,85,90,91,93,98,99,100,101,102,125,126,127,129,130,132,142,144,147,148,150,152,153,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,184,185,186,187,188,189,191,198,],[-92,-16,33,-25,-90,-30,-15,-93,-94,-70,-46,-32,-48,-52,-59,-60,-61,-63,-64,-65,-58,138,-66,-46,149,-83,-91,-92,-21,154,-97,-56,-57,-49,-50,-51,138,138,138,-22,-23,-24,-85,-95,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-71,138,190,-55,-68,-62,138,-67,138,190,-84,-96,-98,-53,-54,-47,-69,]),'EQUALS':([15,18,23,25,30,40,45,50,53,54,55,56,57,58,59,90,99,100,125,126,127,129,130,147,148,150,171,174,188,189,191,],[28,-16,-25,-30,-15,117,-48,-52,-59,-60,-61,-63,-64,-65,-58,-46,28,-21,-56,-57,-49,-50,-51,-22,-23,-24,-55,-62,-53,-54,-47,]),'LBRACE':([15,18,23,25,26,28,29,30,38,61,63,64,65,66,67,68,69,70,71,72,73,100,133,134,136,141,143,147,148,150,154,180,181,192,193,199,200,203,204,205,208,209,211,212,213,],[29,-16,-25,-30,-87,38,29,-15,38,29,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-21,-99,-103,-114,-122,-124,-22,-23,-24,38,-123,-125,29,29,-117,-119,-126,-127,29,-118,29,-120,29,-121,]),'LBRACKET':([18,23,25,30,45,50,53,54,55,56,57,58,59,100,125,126,147,148,150,171,174,188,189,],[31,-25,-30,31,123,-52,-59,-60,-61,-63,-64,-65,-58,-21,-56,-57,-22,-23,-24,-55,-62,-53,-54,]),'PLUSPLUS':([25,26,28,29,31,38,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,63,64,65,66,67,68,69,70,71,72,73,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,133,134,136,137,138,139,140,141,143,145,146,154,171,173,174,178,180,181,188,189,190,192,193,195,199,200,201,203,204,205,207,208,209,211,212,213,],[-30,-87,46,46,46,46,-79,-80,-81,125,46,46,46,46,-52,-78,-82,-59,-60,-61,-63,-64,-65,-58,46,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-72,-73,-74,-75,-76,-77,46,46,-56,-57,46,-99,-103,-114,46,46,46,46,-122,-124,46,46,46,-55,46,-62,46,-123,-125,-53,-54,46,46,46,46,-117,-119,46,-126,-127,46,46,-118,46,-120,46,-121,]),'MINUSMINUS':([25,26,28,29,31,38,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,63,64,65,66,67,68,69,70,71,72,73,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,133,134,136,137,138,139,140,141,143,145,146,154,171,173,174,178,180,181,188,189,190,192,193,195,199,200,201,203,204,205,207,208,209,211,212,213,],[-30,-87,47,47,47,47,-79,-80,-81,126,47,47,47,47,-52,-78,-82,-59,-60,-61,-63,-64,-65,-58,47,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-72,-73,-74,-75,-76,-77,47,47,-56,-57,47,-99,-103,-114,47,47,47,47,-122,-124,47,47,47,-55,47,-62,47,-123,-125,-53,-54,47,47,47,47,-117,-119,47,-126,-127,47,47,-118,47,-120,47,-121,]),'TIMES_EQUALS':([25,40,45,50,53,54,55,56,57,58,59,90,125,126,127,129,130,171,174,188,189,191,],[-30,118,-48,-52,-59,-60,-61,-63,-64,-65,-58,-46,-56,-57,-49,-50,-51,-55,-62,-53,-54,-47,]),'DIV_EQUALS':([25,40,45,50,53,54,55,56,57,58,59,90,125,126,127,129,130,171,174,188,189,191,],[-30,119,-48,-52,-59,-60,-61,-63,-64,-65,-58,-46,-56,-57,-49,-50,-51,-55,-62,-53,-54,-47,]),'MOD_EQUALS':([25,40,45,50,53,54,55,56,57,58,59,90,125,126,127,129,130,171,174,188,189,191,],[-30,120,-48,-52,-59,-60,-61,-63,-64,-65,-58,-46,-56,-57,-49,-50,-51,-55,-62,-53,-54,-47,]),'PLUS_EQUALS':([25,40,45,50,53,54,55,56,57,58,59,90,125,126,127,129,130,171,174,188,189,191,],[-30,121,-48,-52,-59,-60,-61,-63,-64,-65,-58,-46,-56,-57,-49,-50,-51,-55,-62,-53,-54,-47,]),'MINUS_EQUALS':([25,40,45,50,53,54,55,56,57,58,59,90,125,126,127,129,130,171,174,188,189,191,],[-30,122,-48,-52,-59,-60,-61,-63,-64,-65,-58,-46,-56,-57,-49,-50,-51,-55,-62,-53,-54,-47,]),'DIV':([25,39,40,41,45,50,53,54,55,56,57,58,59,89,90,125,126,127,129,130,155,156,157,158,159,160,161,162,163,164,165,166,167,171,174,188,189,191,],[-30,104,-46,-32,-48,-52,-59,-60,-61,-63,-64,-65,-58,104,-46,-56,-57,-49,-50,-51,-33,-34,-35,104,104,104,104,104,104,104,104,104,104,-55,-62,-53,-54,-47,]),'MOD':([25,39,40,41,45,50,53,54,55,56,57,58,59,89,90,125,126,127,129,130,155,156,157,158,159,160,161,162,163,164,165,166,167,171,174,188,189,191,],[-30,105,-46,-32,-48,-52,-59,-60,-61,-63,-64,-65,-58,105,-46,-56,-57,-49,-50,-51,-33,-34,-35,105,105,105,105,105,105,105,105,105,105,-55,-62,-53,-54,-47,]),'PLUS':([25,26,28,29,31,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,63,64,65,66,67,68,69,70,71,72,73,80,81,89,90,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,136,137,138,139,140,141,143,145,146,154,155,156,157,158,159,160,161,162,163,164,165,166,167,171,173,174,178,180,181,188,189,190,191,192,193,195,199,200,201,203,204,205,207,208,209,211,212,213,],[-30,-87,43,43,43,43,106,-46,-32,-79,-80,-81,-48,43,43,43,43,-52,-78,-82,-59,-60,-61,-63,-64,-65,-58,43,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,43,43,106,-46,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-72,-73,-74,-75,-76,-77,43,43,-56,-57,-49,43,-50,-51,-99,-103,-114,43,43,43,43,-122,-124,43,43,43,-33,-34,-35,-36,-37,106,106,106,106,106,106,106,106,-55,43,-62,43,-123,-125,-53,-54,43,-47,43,43,43,-117,-119,43,-126,-127,43,43,-118,43,-120,43,-121,]),'MINUS':([25,26,28,29,31,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,63,64,65,66,67,68,69,70,71,72,73,80,81,89,90,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,136,137,138,139,140,141,143,145,146,154,155,156,157,158,159,160,161,162,163,164,165,166,167,171,173,174,178,180,181,188,189,190,191,192,193,195,199,200,201,203,204,205,207,208,209,211,212,213,],[-30,-87,44,44,44,44,107,-46,-32,-79,-80,-81,-48,44,44,44,44,-52,-78,-82,-59,-60,-61,-63,-64,-65,-58,44,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,44,44,107,-46,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-72,-73,-74,-75,-76,-77,44,44,-56,-57,-49,44,-50,-51,-99,-103,-114,44,44,44,44,-122,-124,44,44,44,-33,-34,-35,-36,-37,107,107,107,107,107,107,107,107,-55,44,-62,44,-123,-125,-53,-54,44,-47,44,44,44,-117,-119,44,-126,-127,44,44,-118,44,-120,44,-121,]),'LT':([25,39,40,41,45,50,53,54,55,56,57,58,59,89,90,125,126,127,129,130,155,156,157,158,159,160,161,162,163,164,165,166,167,171,174,188,189,191,],[-30,108,-46,-32,-48,-52,-59,-60,-61,-63,-64,-65,-58,108,-46,-56,-57,-49,-50,-51,-33,-34,-35,-36,-37,-38,-39,-40,-41,108,108,108,108,-55,-62,-53,-54,-47,]),'LTE':([25,39,40,41,45,50,53,54,55,56,57,58,59,89,90,125,126,127,129,130,155,156,157,158,159,160,161,162,163,164,165,166,167,171,174,188,189,191,],[-30,109,-46,-32,-48,-52,-59,-60,-61,-63,-64,-65,-58,109,-46,-56,-57,-49,-50,-51,-33,-34,-35,-36,-37,-38,-39,-40,-41,109,109,109,109,-55,-62,-53,-54,-47,]),'GT':([25,39,40,41,45,50,53,54,55,56,57,58,59,89,90,125,126,127,129,130,155,156,157,158,159,160,161,162,163,164,165,166,167,171,174,188,189,191,],[-30,110,-46,-32,-48,-52,-59,-60,-61,-63,-64,-65,-58,110,-46,-56,-57,-49,-50,-51,-33,-34,-35,-36,-37,-38,-39,-40,-41,110,110,110,110,-55,-62,-53,-54,-47,]),'GTE':([25,39,40,41,45,50,53,54,55,56,57,58,59,89,90,125,126,127,129,130,155,156,157,158,159,160,161,162,163,164,165,166,167,171,174,188,189,191,],[-30,111,-46,-32,-48,-52,-59,-60,-61,-63,-64,-65,-58,111,-46,-56,-57,-49,-50,-51,-33,-34,-35,-36,-37,-38,-39,-40,-41,111,111,111,111,-55,-62,-53,-54,-47,]),'EQ':([25,39,40,41,45,50,53,54,55,56,57,58,59,89,90,125,126,127,129,130,155,156,157,158,159,160,161,162,163,164,165,166,167,171,174,188,189,191,],[-30,112,-46,-32,-48,-52,-59,-60,-61,-63,-64,-65,-58,112,-46,-56,-57,-49,-50,-51,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,112,112,-55,-62,-53,-54,-47,]),'NOT_EQUAL':([25,39,40,41,45,50,53,54,55,56,57,58,59,89,90,125,126,127,129,130,155,156,157,158,159,160,161,162,163,164,165,166,167,171,174,188,189,191,],[-30,113,-46,-32,-48,-52,-59,-60,-61,-63,-64,-65,-58,113,-46,-56,-57,-49,-50,-51,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,113,113,-55,-62,-53,-54,-47,]),'AND':([25,39,40,41,45,50,53,54,55,56,57,58,59,89,90,125,126,127,129,130,155,156,157,158,159,160,161,162,163,164,165,166,167,171,174,188,189,191,],[-30,114,-46,-32,-48,-52,-59,-60,-61,-63,-64,-65,-58,114,-46,-56,-57,-49,-50,-51,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,114,-55,-62,-53,-54,-47,]),'OR':([25,39,40,41,45,50,53,54,55,56,57,58,59,89,90,125,126,127,129,130,155,156,157,158,159,160,161,162,163,164,165,166,167,171,174,188,189,191,],[-30,115,-46,-32,-48,-52,-59,-60,-61,-63,-64,-65,-58,115,-46,-56,-57,-49,-50,-51,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-55,-62,-53,-54,-47,]),'RBRACKET':([25,31,39,40,41,45,50,53,54,55,56,57,58,59,85,86,87,88,89,90,125,126,127,129,130,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,171,174,176,188,189,191,],[-30,-128,-70,-46,-32,-48,-52,-59,-60,-61,-63,-64,-65,-58,-66,147,-19,-20,-31,-46,-56,-57,-49,-50,-51,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-71,188,-55,-62,-67,-53,-54,-47,]),'RBRACE':([25,26,29,37,39,40,41,45,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,90,101,102,125,126,127,129,130,133,134,136,141,143,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,174,180,181,186,187,188,189,191,199,200,203,204,208,211,213,],[-30,-87,-128,-94,-70,-46,-32,-48,-52,-59,-60,-61,-63,-64,-65,-58,133,-100,-101,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-46,153,-97,-56,-57,-49,-50,-51,-99,-103,-114,-122,-124,-95,186,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-71,-55,-62,-123,-125,-96,-98,-53,-54,-47,-117,-119,-126,-127,-118,-120,-121,]),'IF':([26,29,61,63,64,65,66,67,68,69,70,71,72,73,133,134,136,141,143,180,181,192,193,199,200,203,204,205,208,209,211,212,213,],[-87,75,75,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-99,-103,-114,-122,-124,-123,-125,75,75,-117,-119,-126,-127,75,-118,75,-120,75,-121,]),'WHILE':([26,29,61,63,64,65,66,67,68,69,70,71,72,73,133,134,136,141,143,180,181,192,193,199,200,203,204,205,208,209,211,212,213,],[-87,77,77,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-99,-103,-114,-122,-124,-123,-125,77,77,-117,-119,-126,-127,77,-118,77,-120,77,-121,]),'FOR':([26,29,61,63,64,65,66,67,68,69,70,71,72,73,133,134,136,141,143,180,181,192,193,199,200,203,204,205,208,209,211,212,213,],[-87,78,78,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-99,-103,-114,-122,-124,-123,-125,78,78,-117,-119,-126,-127,78,-118,78,-120,78,-121,]),'BREAK':([26,29,61,63,64,65,66,67,68,69,70,71,72,73,133,134,136,141,143,180,181,192,193,199,200,203,204,205,208,209,211,212,213,],[-87,79,79,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-99,-103,-114,-122,-124,-123,-125,79,79,-117,-119,-126,-127,79,-118,79,-120,79,-121,]),'RETURN':([26,29,61,63,64,65,66,67,68,69,70,71,72,73,133,134,136,141,143,180,181,192,193,199,200,203,204,205,208,209,211,212,213,],[-87,80,80,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-99,-103,-114,-122,-124,-123,-125,80,80,-117,-119,-126,-127,80,-118,80,-120,80,-121,]),'ASSERT':([26,29,61,63,64,65,66,67,68,69,70,71,72,73,133,134,136,141,143,180,181,192,193,199,200,203,204,205,208,209,211,212,213,],[-87,81,81,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-99,-103,-114,-122,-124,-123,-125,81,81,-117,-119,-126,-127,81,-118,81,-120,81,-121,]),'PRINT':([26,29,61,63,64,65,66,67,68,69,70,71,72,73,133,134,136,141,143,180,181,192,193,199,200,203,204,205,208,209,211,212,213,],[-87,82,82,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-99,-103,-114,-122,-124,-123,-125,82,82,-117,-119,-126,-127,82,-118,82,-120,82,-121,]),'READ':([26,29,61,63,64,65,66,67,68,69,70,71,72,73,133,134,136,141,143,180,181,192,193,199,200,203,204,205,208,209,211,212,213,],[-87,83,83,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-99,-103,-114,-122,-124,-123,-125,83,83,-117,-119,-126,-127,83,-118,83,-120,83,-121,]),'ADDRESS':([26,28,29,31,38,42,43,44,46,47,48,49,51,52,61,63,64,65,66,67,68,69,70,71,72,73,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,133,134,136,137,138,139,140,141,143,145,146,154,173,178,180,181,190,192,193,195,199,200,201,203,204,205,207,208,209,211,212,213,],[-87,51,51,51,51,-79,-80,-81,51,51,51,51,-78,-82,51,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-72,-73,-74,-75,-76,-77,51,51,51,-99,-103,-114,51,51,51,51,-122,-124,51,51,51,51,51,-123,-125,51,51,51,51,-117,-119,51,-126,-127,51,51,-118,51,-120,51,-121,]),'NOT':([26,28,29,31,38,42,43,44,46,47,48,49,51,52,61,63,64,65,66,67,68,69,70,71,72,73,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,133,134,136,137,138,139,140,141,143,145,146,154,173,178,180,181,190,192,193,195,199,200,201,203,204,205,207,208,209,211,212,213,],[-87,52,52,52,52,-79,-80,-81,52,52,52,52,-78,-82,52,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-72,-73,-74,-75,-76,-77,52,52,52,-99,-103,-114,52,52,52,52,-122,-124,52,52,52,52,52,-123,-125,52,52,52,52,-117,-119,52,-126,-127,52,52,-118,52,-120,52,-121,]),'INT_CONST':([26,28,29,31,38,42,43,44,46,47,48,49,51,52,61,63,64,65,66,67,68,69,70,71,72,73,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,133,134,136,137,138,139,140,141,143,145,146,154,173,178,180,181,190,192,193,195,199,200,201,203,204,205,207,208,209,211,212,213,],[-87,56,56,56,56,-79,-80,-81,56,56,56,56,-78,-82,56,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-72,-73,-74,-75,-76,-77,56,56,56,-99,-103,-114,56,56,56,56,-122,-124,56,56,56,56,56,-123,-125,56,56,56,56,-117,-119,56,-126,-127,56,56,-118,56,-120,56,-121,]),'CHAR_CONST':([26,28,29,31,38,42,43,44,46,47,48,49,51,52,61,63,64,65,66,67,68,69,70,71,72,73,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,133,134,136,137,138,139,140,141,143,145,146,154,173,178,180,181,190,192,193,195,199,200,201,203,204,205,207,208,209,211,212,213,],[-87,57,57,57,57,-79,-80,-81,57,57,57,57,-78,-82,57,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-72,-73,-74,-75,-76,-77,57,57,57,-99,-103,-114,57,57,57,57,-122,-124,57,57,57,57,57,-123,-125,57,57,57,57,-117,-119,57,-126,-127,57,57,-118,57,-120,57,-121,]),'FLOAT_CONST':([26,28,29,31,38,42,43,44,46,47,48,49,51,52,61,63,64,65,66,67,68,69,70,71,72,73,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,133,134,136,137,138,139,140,141,143,145,146,154,173,178,180,181,190,192,193,195,199,200,201,203,204,205,207,208,209,211,212,213,],[-87,58,58,58,58,-79,-80,-81,58,58,58,58,-78,-82,58,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-72,-73,-74,-75,-76,-77,58,58,58,-99,-103,-114,58,58,58,58,-122,-124,58,58,58,58,58,-123,-125,58,58,58,58,-117,-119,58,-126,-127,58,58,-118,58,-120,58,-121,]),'STRING':([26,28,29,31,38,42,43,44,46,47,48,49,51,52,61,63,64,65,66,67,68,69,70,71,72,73,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,133,134,136,137,138,139,140,141,143,145,146,154,173,178,180,181,190,192,193,195,199,200,201,203,204,205,207,208,209,211,212,213,],[-87,59,59,59,59,-79,-80,-81,59,59,59,59,-78,-82,59,-102,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-72,-73,-74,-75,-76,-77,59,59,59,-99,-103,-114,59,59,59,59,-122,-124,59,59,59,59,59,-123,-125,59,59,59,59,-117,-119,59,-126,-127,59,59,-118,59,-120,59,-121,]),'ELSE':([66,67,68,69,70,71,72,73,133,136,141,143,180,181,199,200,203,204,208,211,213,],[-106,-107,-108,-109,-110,-111,-112,-113,-99,-114,-122,-124,-123,-125,205,-119,-126,-127,-118,-120,-121,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list':([0,],[2,]),'global_declaration':([0,2,],[3,14,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,29,61,140,],[5,5,65,65,178,]),'type_specifier_opt':([0,2,29,61,140,],[6,6,84,84,84,]),'decl_body':([0,2,29,61,140,],[7,7,7,7,7,]),'type_specifier':([0,2,29,32,49,61,140,149,],[8,8,8,96,131,8,8,96,]),'empty':([0,2,6,29,31,32,61,84,140,145,178,192,193,195,201,205,207,209,212,],[9,9,20,62,88,95,135,20,135,183,183,183,183,183,183,183,183,183,183,]),'declarator':([6,22,33,84,96,],[15,35,99,99,152,]),'init_declarator_list_opt':([6,84,],[16,16,]),'pointer':([6,21,22,33,84,96,],[17,34,17,17,17,17,]),'direct_declarator':([6,17,22,33,84,96,],[18,30,18,18,18,18,]),'init_declarator_list':([6,84,],[19,19,]),'identifier':([6,17,22,28,29,31,32,33,38,46,47,48,49,61,80,81,84,94,96,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,124,128,137,138,139,140,145,146,154,173,178,190,192,193,195,201,205,207,209,212,],[23,23,23,53,53,53,97,23,53,53,53,53,53,53,53,53,23,151,23,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'init_declarator':([6,33,84,],[24,98,24,]),'compound_statement':([15,29,61,192,193,205,209,212,],[27,67,67,67,67,67,67,67,]),'initializer':([28,38,154,],[36,102,187,]),'assignment_expression':([28,29,38,49,61,80,81,116,123,124,128,137,138,139,140,145,146,154,178,190,192,193,195,201,205,207,209,212,],[37,85,37,85,85,85,85,168,85,172,85,85,176,85,85,85,172,37,85,198,85,85,85,85,85,85,85,85,]),'binary_expression':([28,29,31,38,49,61,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,124,128,137,138,139,140,145,146,154,178,190,192,193,195,201,205,207,209,212,],[39,39,89,39,39,39,39,39,155,156,157,158,159,160,161,162,163,164,165,166,167,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'unary_expression':([28,29,31,38,46,47,48,49,61,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,124,128,137,138,139,140,145,146,154,173,178,190,192,193,195,201,205,207,209,212,],[40,40,90,40,127,129,90,40,40,40,40,90,90,90,90,90,90,90,90,90,90,90,90,90,40,40,40,40,40,40,40,40,40,40,40,90,40,40,40,40,40,40,40,40,40,40,]),'cast_expression':([28,29,31,38,48,49,61,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,124,128,137,138,139,140,145,146,154,173,178,190,192,193,195,201,205,207,209,212,],[41,41,41,41,130,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,191,41,41,41,41,41,41,41,41,41,41,]),'postfix_expression':([28,29,31,38,46,47,48,49,61,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,124,128,137,138,139,140,145,146,154,173,178,190,192,193,195,201,205,207,209,212,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'unary_operator':([28,29,31,38,46,47,48,49,61,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,124,128,137,138,139,140,145,146,154,173,178,190,192,193,195,201,205,207,209,212,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'primary_expression':([28,29,31,38,46,47,48,49,61,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,124,128,137,138,139,140,145,146,154,173,178,190,192,193,195,201,205,207,209,212,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'constant':([28,29,31,38,46,47,48,49,61,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,124,128,137,138,139,140,145,146,154,173,178,190,192,193,195,201,205,207,209,212,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'string_constant':([28,29,31,38,46,47,48,49,61,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,124,128,137,138,139,140,145,146,154,173,178,190,192,193,195,201,205,207,209,212,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'block_item_list_opt':([29,],[60,]),'block_item_list':([29,],[61,]),'block_item':([29,61,],[63,134,]),'statement':([29,61,192,193,205,209,212,],[64,64,199,200,208,211,213,]),'expression_statement':([29,61,192,193,205,209,212,],[66,66,66,66,66,66,66,]),'selection_statement':([29,61,192,193,205,209,212,],[68,68,68,68,68,68,68,]),'iteration_statement':([29,61,192,193,205,209,212,],[69,69,69,69,69,69,69,]),'jump_statement':([29,61,192,193,205,209,212,],[70,70,70,70,70,70,70,]),'assert_statement':([29,61,192,193,205,209,212,],[71,71,71,71,71,71,71,]),'print_statement':([29,61,192,193,205,209,212,],[72,72,72,72,72,72,72,]),'read_statement':([29,61,192,193,205,209,212,],[73,73,73,73,73,73,73,]),'expression_opt':([29,61,140,145,178,192,193,195,201,205,207,209,212,],[74,74,179,182,194,74,74,202,206,74,210,74,74,]),'expression':([29,49,61,80,81,123,128,137,139,140,145,178,192,193,195,201,205,207,209,212,],[76,132,76,142,144,169,132,175,177,76,76,76,76,76,76,76,76,76,76,76,]),'constant_expression_opt':([31,],[86,]),'constant_expression':([31,],[87,]),'parameter_list':([32,],[91,]),'identifier_list_opt':([32,],[92,]),'parameter_declaration':([32,149,],[93,185,]),'identifier_list':([32,],[94,]),'initializer_list':([38,],[101,]),'assignment_operator':([40,],[116,]),'argument_expression':([124,146,],[170,184,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_declaration_list','program',1,'p_program','parser.py',160),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','parser.py',167),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','parser.py',168),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration_1','parser.py',177),
  ('function_definition -> type_specifier_opt declarator compound_statement','function_definition',3,'p_function_definition','parser.py',183),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration_2','parser.py',193),
  ('type_specifier_opt -> type_specifier','type_specifier_opt',1,'p_type_specifier_opt','parser.py',199),
  ('type_specifier_opt -> empty','type_specifier_opt',1,'p_type_specifier_opt','parser.py',200),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',206),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',207),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser.py',218),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',219),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',220),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser.py',221),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','parser.py',231),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','parser.py',232),
  ('pointer -> TIMES','pointer',1,'p_pointer','parser.py',241),
  ('pointer -> TIMES pointer','pointer',2,'p_pointer','parser.py',242),
  ('constant_expression_opt -> constant_expression','constant_expression_opt',1,'p_constant_expression_opt','parser.py',251),
  ('constant_expression_opt -> empty','constant_expression_opt',1,'p_constant_expression_opt','parser.py',252),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator_1','parser.py',258),
  ('direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET','direct_declarator',4,'p_direct_declarator_2','parser.py',264),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator_3','parser.py',274),
  ('direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN','direct_declarator',4,'p_direct_declarator_4','parser.py',285),
  ('direct_declarator -> identifier','direct_declarator',1,'p_direct_declarator_0','parser.py',293),
  ('identifier_list_opt -> identifier_list','identifier_list_opt',1,'p_identifier_list_opt','parser.py',304),
  ('identifier_list_opt -> empty','identifier_list_opt',1,'p_identifier_list_opt','parser.py',305),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',311),
  ('identifier_list -> identifier_list identifier','identifier_list',2,'p_identifier_list','parser.py',312),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',321),
  ('constant_expression -> binary_expression','constant_expression',1,'p_constant_expression','parser.py',327),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression_1','parser.py',334),
  ('binary_expression -> binary_expression TIMES binary_expression','binary_expression',3,'p_binary_expression_2','parser.py',340),
  ('binary_expression -> binary_expression DIV binary_expression','binary_expression',3,'p_binary_expression_2','parser.py',341),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression_2','parser.py',342),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression_2','parser.py',343),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression_2','parser.py',344),
  ('binary_expression -> binary_expression LT binary_expression','binary_expression',3,'p_binary_expression_2','parser.py',345),
  ('binary_expression -> binary_expression LTE binary_expression','binary_expression',3,'p_binary_expression_2','parser.py',346),
  ('binary_expression -> binary_expression GT binary_expression','binary_expression',3,'p_binary_expression_2','parser.py',347),
  ('binary_expression -> binary_expression GTE binary_expression','binary_expression',3,'p_binary_expression_2','parser.py',348),
  ('binary_expression -> binary_expression EQ binary_expression','binary_expression',3,'p_binary_expression_2','parser.py',349),
  ('binary_expression -> binary_expression NOT_EQUAL binary_expression','binary_expression',3,'p_binary_expression_2','parser.py',350),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression_2','parser.py',351),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression_2','parser.py',352),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression_1','parser.py',358),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression_2','parser.py',364),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','parser.py',370),
  ('unary_expression -> PLUSPLUS unary_expression','unary_expression',2,'p_unary_expression','parser.py',371),
  ('unary_expression -> MINUSMINUS unary_expression','unary_expression',2,'p_unary_expression','parser.py',372),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','parser.py',373),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','parser.py',386),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression_2','parser.py',397),
  ('postfix_expression -> postfix_expression LPAREN argument_expression RPAREN','postfix_expression',4,'p_postfix_expression_3','parser.py',403),
  ('postfix_expression -> postfix_expression LPAREN RPAREN','postfix_expression',3,'p_postfix_expression_3','parser.py',404),
  ('postfix_expression -> postfix_expression PLUSPLUS','postfix_expression',2,'p_postfix_expression_4','parser.py',410),
  ('postfix_expression -> postfix_expression MINUSMINUS','postfix_expression',2,'p_postfix_expression_4','parser.py',411),
  ('string_constant -> STRING','string_constant',1,'p_string_constant','parser.py',417),
  ('primary_expression -> identifier','primary_expression',1,'p_primary_expression_1','parser.py',423),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression_1','parser.py',424),
  ('primary_expression -> string_constant','primary_expression',1,'p_primary_expression_1','parser.py',425),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression_2','parser.py',431),
  ('constant -> INT_CONST','constant',1,'p_constant_1','parser.py',437),
  ('constant -> CHAR_CONST','constant',1,'p_constant_2','parser.py',446),
  ('constant -> FLOAT_CONST','constant',1,'p_constant_3','parser.py',452),
  ('expression -> assignment_expression','expression',1,'p_expression','parser.py',458),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','parser.py',459),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','parser.py',474),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','parser.py',475),
  ('assignment_expression -> binary_expression','assignment_expression',1,'p_assignment_expression','parser.py',487),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','parser.py',488),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',499),
  ('assignment_operator -> TIMES_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',500),
  ('assignment_operator -> DIV_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',501),
  ('assignment_operator -> MOD_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',502),
  ('assignment_operator -> PLUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',503),
  ('assignment_operator -> MINUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',504),
  ('unary_operator -> ADDRESS','unary_operator',1,'p_unary_operator','parser.py',516),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','parser.py',517),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','parser.py',518),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','parser.py',519),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','parser.py',520),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','parser.py',531),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','parser.py',532),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','parser.py',544),
  ('decl_body -> type_specifier_opt init_declarator_list_opt','decl_body',2,'p_decl_body','parser.py',556),
  ('declaration -> decl_body SEMI','declaration',2,'p_declaration','parser.py',572),
  ('init_declarator_list_opt -> init_declarator_list','init_declarator_list_opt',1,'p_init_declarator_list_opt','parser.py',578),
  ('init_declarator_list_opt -> empty','init_declarator_list_opt',1,'p_init_declarator_list_opt','parser.py',579),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list_1','parser.py',585),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list_2','parser.py',593),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','parser.py',599),
  ('init_declarator -> declarator EQUALS initializer','init_declarator',3,'p_init_declarator','parser.py',600),
  ('initializer -> assignment_expression','initializer',1,'p_initializer_1','parser.py',608),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer_2','parser.py',617),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer_2','parser.py',618),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','parser.py',627),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','parser.py',628),
  ('compound_statement -> LBRACE block_item_list_opt RBRACE','compound_statement',3,'p_compound_statement','parser.py',640),
  ('block_item_list_opt -> block_item_list','block_item_list_opt',1,'p_block_item_list_opt','parser.py',649),
  ('block_item_list_opt -> empty','block_item_list_opt',1,'p_block_item_list_opt','parser.py',650),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','parser.py',656),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','parser.py',657),
  ('block_item -> statement','block_item',1,'p_block_item','parser.py',663),
  ('block_item -> declaration','block_item',1,'p_block_item','parser.py',664),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',670),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',671),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',672),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',673),
  ('statement -> jump_statement','statement',1,'p_statement','parser.py',674),
  ('statement -> assert_statement','statement',1,'p_statement','parser.py',675),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',676),
  ('statement -> read_statement','statement',1,'p_statement','parser.py',677),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','parser.py',691),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','parser.py',698),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','parser.py',699),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement_1','parser.py',705),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement_2','parser.py',713),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement_1','parser.py',719),
  ('iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement','iteration_statement',8,'p_iteration_statement_0','parser.py',725),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement_2','parser.py',732),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement_1','parser.py',738),
  ('jump_statement -> RETURN expression SEMI','jump_statement',3,'p_jump_statement_2','parser.py',746),
  ('jump_statement -> RETURN SEMI','jump_statement',2,'p_jump_statement_2','parser.py',747),
  ('assert_statement -> ASSERT expression SEMI','assert_statement',3,'p_assert_statement','parser.py',753),
  ('print_statement -> PRINT LPAREN expression_opt RPAREN SEMI','print_statement',5,'p_print_statement','parser.py',760),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','parser.py',767),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',774),
]
