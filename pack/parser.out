Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> global_declaration_list
Rule 2     global_declaration_list -> global_declaration
Rule 3     global_declaration_list -> global_declaration_list global_declaration
Rule 4     global_declaration -> function_definition
Rule 5     function_definition -> type_specifier_opt declarator compound_statement
Rule 6     global_declaration -> declaration
Rule 7     type_specifier_opt -> type_specifier
Rule 8     type_specifier_opt -> empty
Rule 9     declaration_list -> declaration
Rule 10    declaration_list -> declaration_list declaration
Rule 11    type_specifier -> VOID
Rule 12    type_specifier -> CHAR
Rule 13    type_specifier -> INT
Rule 14    type_specifier -> FLOAT
Rule 15    declarator -> pointer direct_declarator
Rule 16    declarator -> direct_declarator
Rule 17    pointer -> TIMES
Rule 18    pointer -> TIMES pointer
Rule 19    constant_expression_opt -> constant_expression
Rule 20    constant_expression_opt -> empty
Rule 21    direct_declarator -> LPAREN declarator RPAREN
Rule 22    direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET
Rule 23    direct_declarator -> direct_declarator LPAREN parameter_list RPAREN
Rule 24    direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN
Rule 25    direct_declarator -> identifier
Rule 26    identifier_list_opt -> identifier_list
Rule 27    identifier_list_opt -> empty
Rule 28    identifier_list -> identifier
Rule 29    identifier_list -> identifier_list identifier
Rule 30    identifier -> ID
Rule 31    constant_expression -> binary_expression
Rule 32    binary_expression -> cast_expression
Rule 33    binary_expression -> binary_expression TIMES binary_expression
Rule 34    binary_expression -> binary_expression DIV binary_expression
Rule 35    binary_expression -> binary_expression MOD binary_expression
Rule 36    binary_expression -> binary_expression PLUS binary_expression
Rule 37    binary_expression -> binary_expression MINUS binary_expression
Rule 38    binary_expression -> binary_expression LT binary_expression
Rule 39    binary_expression -> binary_expression LTE binary_expression
Rule 40    binary_expression -> binary_expression GT binary_expression
Rule 41    binary_expression -> binary_expression GTE binary_expression
Rule 42    binary_expression -> binary_expression EQ binary_expression
Rule 43    binary_expression -> binary_expression NOT_EQUAL binary_expression
Rule 44    binary_expression -> binary_expression AND binary_expression
Rule 45    binary_expression -> binary_expression OR binary_expression
Rule 46    cast_expression -> unary_expression
Rule 47    cast_expression -> LPAREN type_specifier RPAREN cast_expression
Rule 48    unary_expression -> postfix_expression
Rule 49    unary_expression -> PLUSPLUS unary_expression
Rule 50    unary_expression -> MINUSMINUS unary_expression
Rule 51    unary_expression -> unary_operator cast_expression
Rule 52    postfix_expression -> primary_expression
Rule 53    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 54    postfix_expression -> postfix_expression LPAREN argument_expression RPAREN
Rule 55    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 56    postfix_expression -> postfix_expression PLUSPLUS
Rule 57    postfix_expression -> postfix_expression MINUSMINUS
Rule 58    string_constant -> STRING
Rule 59    primary_expression -> identifier
Rule 60    primary_expression -> constant
Rule 61    primary_expression -> string_constant
Rule 62    primary_expression -> LPAREN expression RPAREN
Rule 63    constant -> INT_CONST
Rule 64    constant -> CHAR_CONST
Rule 65    constant -> FLOAT_CONST
Rule 66    expression -> assignment_expression
Rule 67    expression -> expression COMMA assignment_expression
Rule 68    argument_expression -> assignment_expression
Rule 69    argument_expression -> argument_expression COMMA assignment_expression
Rule 70    assignment_expression -> binary_expression
Rule 71    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 72    assignment_operator -> EQUALS
Rule 73    assignment_operator -> TIMES_EQUALS
Rule 74    assignment_operator -> DIV_EQUALS
Rule 75    assignment_operator -> MOD_EQUALS
Rule 76    assignment_operator -> PLUS_EQUALS
Rule 77    assignment_operator -> MINUS_EQUALS
Rule 78    unary_operator -> ADDRESS
Rule 79    unary_operator -> TIMES
Rule 80    unary_operator -> PLUS
Rule 81    unary_operator -> MINUS
Rule 82    unary_operator -> NOT
Rule 83    parameter_list -> parameter_declaration
Rule 84    parameter_list -> parameter_list COMMA parameter_declaration
Rule 85    parameter_declaration -> type_specifier declarator
Rule 86    decl_body -> type_specifier_opt init_declarator_list_opt
Rule 87    declaration -> decl_body SEMI
Rule 88    init_declarator_list_opt -> init_declarator_list
Rule 89    init_declarator_list_opt -> empty
Rule 90    init_declarator_list -> init_declarator
Rule 91    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 92    init_declarator -> declarator
Rule 93    init_declarator -> declarator EQUALS initializer
Rule 94    initializer -> assignment_expression
Rule 95    initializer -> LBRACE initializer_list RBRACE
Rule 96    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 97    initializer_list -> initializer
Rule 98    initializer_list -> initializer_list COMMA initializer
Rule 99    compound_statement -> LBRACE block_item_list_opt RBRACE
Rule 100   block_item_list_opt -> block_item_list
Rule 101   block_item_list_opt -> empty
Rule 102   block_item_list -> block_item
Rule 103   block_item_list -> block_item_list block_item
Rule 104   block_item -> statement
Rule 105   block_item -> declaration
Rule 106   statement -> expression_statement
Rule 107   statement -> compound_statement
Rule 108   statement -> selection_statement
Rule 109   statement -> iteration_statement
Rule 110   statement -> jump_statement
Rule 111   statement -> assert_statement
Rule 112   statement -> print_statement
Rule 113   statement -> read_statement
Rule 114   expression_statement -> expression_opt SEMI
Rule 115   expression_opt -> expression
Rule 116   expression_opt -> empty
Rule 117   selection_statement -> IF LPAREN expression RPAREN statement
Rule 118   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 119   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 120   iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
Rule 121   iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 122   jump_statement -> BREAK SEMI
Rule 123   jump_statement -> RETURN expression SEMI
Rule 124   jump_statement -> RETURN SEMI
Rule 125   assert_statement -> ASSERT expression SEMI
Rule 126   print_statement -> PRINT LPAREN expression_opt RPAREN SEMI
Rule 127   read_statement -> READ LPAREN argument_expression RPAREN SEMI
Rule 128   empty -> <empty>

Terminals, with rules where they appear

ADDRESS              : 78
AND                  : 44
ASSERT               : 125
BREAK                : 122
CHAR                 : 12
CHAR_CONST           : 64
COMMA                : 67 69 84 91 96 98
DIV                  : 34
DIV_EQUALS           : 74
ELSE                 : 118
EQ                   : 42
EQUALS               : 72 93
FLOAT                : 14
FLOAT_CONST          : 65
FOR                  : 120 121
GT                   : 40
GTE                  : 41
ID                   : 30
IF                   : 117 118
INT                  : 13
INT_CONST            : 63
LBRACE               : 95 96 99
LBRACKET             : 22 53
LPAREN               : 21 23 24 47 54 55 62 117 118 119 120 121 126 127
LT                   : 38
LTE                  : 39
MINUS                : 37 81
MINUSMINUS           : 50 57
MINUS_EQUALS         : 77
MOD                  : 35
MOD_EQUALS           : 75
NOT                  : 82
NOT_EQUAL            : 43
OR                   : 45
PLUS                 : 36 80
PLUSPLUS             : 49 56
PLUS_EQUALS          : 76
PRINT                : 126
RBRACE               : 95 96 99
RBRACKET             : 22 53
READ                 : 127
RETURN               : 123 124
RPAREN               : 21 23 24 47 54 55 62 117 118 119 120 121 126 127
SEMI                 : 87 114 120 121 121 122 123 124 125 126 127
STRING               : 58
TIMES                : 17 18 33 79
TIMES_EQUALS         : 73
VOID                 : 11
WHILE                : 119
error                : 

Nonterminals, with rules where they appear

argument_expression  : 54 69 127
assert_statement     : 111
assignment_expression : 66 67 68 69 71 94
assignment_operator  : 71
binary_expression    : 31 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 70
block_item           : 102 103
block_item_list      : 100 103
block_item_list_opt  : 99
cast_expression      : 32 47 51
compound_statement   : 5 107
constant             : 60
constant_expression  : 19
constant_expression_opt : 22
decl_body            : 87
declaration          : 6 9 10 105 120
declaration_list     : 10
declarator           : 5 21 85 92 93
direct_declarator    : 15 16 22 23 24
empty                : 8 20 27 89 101 116
expression           : 53 62 67 115 117 118 119 123 125
expression_opt       : 114 120 120 121 121 121 126
expression_statement : 106
function_definition  : 4
global_declaration   : 2 3
global_declaration_list : 1 3
identifier           : 25 28 29 59
identifier_list      : 26 29
identifier_list_opt  : 24
init_declarator      : 90 91
init_declarator_list : 88 91
init_declarator_list_opt : 86
initializer          : 93 97 98
initializer_list     : 95 96 98
iteration_statement  : 109
jump_statement       : 110
parameter_declaration : 83 84
parameter_list       : 23 84
pointer              : 15 18
postfix_expression   : 48 53 54 55 56 57
primary_expression   : 52
print_statement      : 112
program              : 0
read_statement       : 113
selection_statement  : 108
statement            : 104 117 118 118 119 120 121
string_constant      : 61
type_specifier       : 7 47 85
type_specifier_opt   : 5 86
unary_expression     : 46 49 50 71
unary_operator       : 51

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global_declaration_list
    (2) global_declaration_list -> . global_declaration
    (3) global_declaration_list -> . global_declaration_list global_declaration
    (4) global_declaration -> . function_definition
    (6) global_declaration -> . declaration
    (5) function_definition -> . type_specifier_opt declarator compound_statement
    (87) declaration -> . decl_body SEMI
    (7) type_specifier_opt -> . type_specifier
    (8) type_specifier_opt -> . empty
    (86) decl_body -> . type_specifier_opt init_declarator_list_opt
    (11) type_specifier -> . VOID
    (12) type_specifier -> . CHAR
    (13) type_specifier -> . INT
    (14) type_specifier -> . FLOAT
    (128) empty -> .

    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    TIMES           reduce using rule 128 (empty -> .)
    LPAREN          reduce using rule 128 (empty -> .)
    ID              reduce using rule 128 (empty -> .)
    SEMI            reduce using rule 128 (empty -> .)

    program                        shift and go to state 1
    global_declaration_list        shift and go to state 2
    global_declaration             shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    type_specifier_opt             shift and go to state 6
    decl_body                      shift and go to state 7
    type_specifier                 shift and go to state 8
    empty                          shift and go to state 9

state 1

    (0) S' -> program .



state 2

    (1) program -> global_declaration_list .
    (3) global_declaration_list -> global_declaration_list . global_declaration
    (4) global_declaration -> . function_definition
    (6) global_declaration -> . declaration
    (5) function_definition -> . type_specifier_opt declarator compound_statement
    (87) declaration -> . decl_body SEMI
    (7) type_specifier_opt -> . type_specifier
    (8) type_specifier_opt -> . empty
    (86) decl_body -> . type_specifier_opt init_declarator_list_opt
    (11) type_specifier -> . VOID
    (12) type_specifier -> . CHAR
    (13) type_specifier -> . INT
    (14) type_specifier -> . FLOAT
    (128) empty -> .

    $end            reduce using rule 1 (program -> global_declaration_list .)
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    TIMES           reduce using rule 128 (empty -> .)
    LPAREN          reduce using rule 128 (empty -> .)
    ID              reduce using rule 128 (empty -> .)
    SEMI            reduce using rule 128 (empty -> .)

    global_declaration             shift and go to state 14
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    type_specifier_opt             shift and go to state 6
    decl_body                      shift and go to state 7
    type_specifier                 shift and go to state 8
    empty                          shift and go to state 9

state 3

    (2) global_declaration_list -> global_declaration .

    VOID            reduce using rule 2 (global_declaration_list -> global_declaration .)
    CHAR            reduce using rule 2 (global_declaration_list -> global_declaration .)
    INT             reduce using rule 2 (global_declaration_list -> global_declaration .)
    FLOAT           reduce using rule 2 (global_declaration_list -> global_declaration .)
    TIMES           reduce using rule 2 (global_declaration_list -> global_declaration .)
    LPAREN          reduce using rule 2 (global_declaration_list -> global_declaration .)
    ID              reduce using rule 2 (global_declaration_list -> global_declaration .)
    SEMI            reduce using rule 2 (global_declaration_list -> global_declaration .)
    $end            reduce using rule 2 (global_declaration_list -> global_declaration .)


state 4

    (4) global_declaration -> function_definition .

    VOID            reduce using rule 4 (global_declaration -> function_definition .)
    CHAR            reduce using rule 4 (global_declaration -> function_definition .)
    INT             reduce using rule 4 (global_declaration -> function_definition .)
    FLOAT           reduce using rule 4 (global_declaration -> function_definition .)
    TIMES           reduce using rule 4 (global_declaration -> function_definition .)
    LPAREN          reduce using rule 4 (global_declaration -> function_definition .)
    ID              reduce using rule 4 (global_declaration -> function_definition .)
    SEMI            reduce using rule 4 (global_declaration -> function_definition .)
    $end            reduce using rule 4 (global_declaration -> function_definition .)


state 5

    (6) global_declaration -> declaration .

    VOID            reduce using rule 6 (global_declaration -> declaration .)
    CHAR            reduce using rule 6 (global_declaration -> declaration .)
    INT             reduce using rule 6 (global_declaration -> declaration .)
    FLOAT           reduce using rule 6 (global_declaration -> declaration .)
    TIMES           reduce using rule 6 (global_declaration -> declaration .)
    LPAREN          reduce using rule 6 (global_declaration -> declaration .)
    ID              reduce using rule 6 (global_declaration -> declaration .)
    SEMI            reduce using rule 6 (global_declaration -> declaration .)
    $end            reduce using rule 6 (global_declaration -> declaration .)


state 6

    (5) function_definition -> type_specifier_opt . declarator compound_statement
    (86) decl_body -> type_specifier_opt . init_declarator_list_opt
    (15) declarator -> . pointer direct_declarator
    (16) declarator -> . direct_declarator
    (88) init_declarator_list_opt -> . init_declarator_list
    (89) init_declarator_list_opt -> . empty
    (17) pointer -> . TIMES
    (18) pointer -> . TIMES pointer
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (25) direct_declarator -> . identifier
    (90) init_declarator_list -> . init_declarator
    (91) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (128) empty -> .
    (30) identifier -> . ID
    (92) init_declarator -> . declarator
    (93) init_declarator -> . declarator EQUALS initializer

    TIMES           shift and go to state 21
    LPAREN          shift and go to state 22
    SEMI            reduce using rule 128 (empty -> .)
    ID              shift and go to state 25

    declarator                     shift and go to state 15
    init_declarator_list_opt       shift and go to state 16
    pointer                        shift and go to state 17
    direct_declarator              shift and go to state 18
    init_declarator_list           shift and go to state 19
    empty                          shift and go to state 20
    identifier                     shift and go to state 23
    init_declarator                shift and go to state 24

state 7

    (87) declaration -> decl_body . SEMI

    SEMI            shift and go to state 26


state 8

    (7) type_specifier_opt -> type_specifier .

    TIMES           reduce using rule 7 (type_specifier_opt -> type_specifier .)
    LPAREN          reduce using rule 7 (type_specifier_opt -> type_specifier .)
    ID              reduce using rule 7 (type_specifier_opt -> type_specifier .)
    SEMI            reduce using rule 7 (type_specifier_opt -> type_specifier .)


state 9

    (8) type_specifier_opt -> empty .

    TIMES           reduce using rule 8 (type_specifier_opt -> empty .)
    LPAREN          reduce using rule 8 (type_specifier_opt -> empty .)
    ID              reduce using rule 8 (type_specifier_opt -> empty .)
    SEMI            reduce using rule 8 (type_specifier_opt -> empty .)


state 10

    (11) type_specifier -> VOID .

    TIMES           reduce using rule 11 (type_specifier -> VOID .)
    LPAREN          reduce using rule 11 (type_specifier -> VOID .)
    ID              reduce using rule 11 (type_specifier -> VOID .)
    SEMI            reduce using rule 11 (type_specifier -> VOID .)
    RPAREN          reduce using rule 11 (type_specifier -> VOID .)


state 11

    (12) type_specifier -> CHAR .

    TIMES           reduce using rule 12 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 12 (type_specifier -> CHAR .)
    ID              reduce using rule 12 (type_specifier -> CHAR .)
    SEMI            reduce using rule 12 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 12 (type_specifier -> CHAR .)


state 12

    (13) type_specifier -> INT .

    TIMES           reduce using rule 13 (type_specifier -> INT .)
    LPAREN          reduce using rule 13 (type_specifier -> INT .)
    ID              reduce using rule 13 (type_specifier -> INT .)
    SEMI            reduce using rule 13 (type_specifier -> INT .)
    RPAREN          reduce using rule 13 (type_specifier -> INT .)


state 13

    (14) type_specifier -> FLOAT .

    TIMES           reduce using rule 14 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 14 (type_specifier -> FLOAT .)
    ID              reduce using rule 14 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 14 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 14 (type_specifier -> FLOAT .)


state 14

    (3) global_declaration_list -> global_declaration_list global_declaration .

    VOID            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    CHAR            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    INT             reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    FLOAT           reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    TIMES           reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    LPAREN          reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    ID              reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    SEMI            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    $end            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)


state 15

    (5) function_definition -> type_specifier_opt declarator . compound_statement
    (92) init_declarator -> declarator .
    (93) init_declarator -> declarator . EQUALS initializer
    (99) compound_statement -> . LBRACE block_item_list_opt RBRACE

    COMMA           reduce using rule 92 (init_declarator -> declarator .)
    SEMI            reduce using rule 92 (init_declarator -> declarator .)
    EQUALS          shift and go to state 28
    LBRACE          shift and go to state 29

    compound_statement             shift and go to state 27

state 16

    (86) decl_body -> type_specifier_opt init_declarator_list_opt .

    SEMI            reduce using rule 86 (decl_body -> type_specifier_opt init_declarator_list_opt .)


state 17

    (15) declarator -> pointer . direct_declarator
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (25) direct_declarator -> . identifier
    (30) identifier -> . ID

    LPAREN          shift and go to state 22
    ID              shift and go to state 25

    direct_declarator              shift and go to state 30
    identifier                     shift and go to state 23

state 18

    (16) declarator -> direct_declarator .
    (22) direct_declarator -> direct_declarator . LBRACKET constant_expression_opt RBRACKET
    (23) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (24) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN

    EQUALS          reduce using rule 16 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 16 (declarator -> direct_declarator .)
    COMMA           reduce using rule 16 (declarator -> direct_declarator .)
    SEMI            reduce using rule 16 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 16 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 31
    LPAREN          shift and go to state 32


state 19

    (88) init_declarator_list_opt -> init_declarator_list .
    (91) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            reduce using rule 88 (init_declarator_list_opt -> init_declarator_list .)
    COMMA           shift and go to state 33


state 20

    (89) init_declarator_list_opt -> empty .

    SEMI            reduce using rule 89 (init_declarator_list_opt -> empty .)


state 21

    (17) pointer -> TIMES .
    (18) pointer -> TIMES . pointer
    (17) pointer -> . TIMES
    (18) pointer -> . TIMES pointer

    LPAREN          reduce using rule 17 (pointer -> TIMES .)
    ID              reduce using rule 17 (pointer -> TIMES .)
    TIMES           shift and go to state 21

    pointer                        shift and go to state 34

state 22

    (21) direct_declarator -> LPAREN . declarator RPAREN
    (15) declarator -> . pointer direct_declarator
    (16) declarator -> . direct_declarator
    (17) pointer -> . TIMES
    (18) pointer -> . TIMES pointer
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (25) direct_declarator -> . identifier
    (30) identifier -> . ID

    TIMES           shift and go to state 21
    LPAREN          shift and go to state 22
    ID              shift and go to state 25

    declarator                     shift and go to state 35
    pointer                        shift and go to state 17
    direct_declarator              shift and go to state 18
    identifier                     shift and go to state 23

state 23

    (25) direct_declarator -> identifier .

    LBRACKET        reduce using rule 25 (direct_declarator -> identifier .)
    LPAREN          reduce using rule 25 (direct_declarator -> identifier .)
    EQUALS          reduce using rule 25 (direct_declarator -> identifier .)
    LBRACE          reduce using rule 25 (direct_declarator -> identifier .)
    COMMA           reduce using rule 25 (direct_declarator -> identifier .)
    SEMI            reduce using rule 25 (direct_declarator -> identifier .)
    RPAREN          reduce using rule 25 (direct_declarator -> identifier .)


state 24

    (90) init_declarator_list -> init_declarator .

    COMMA           reduce using rule 90 (init_declarator_list -> init_declarator .)
    SEMI            reduce using rule 90 (init_declarator_list -> init_declarator .)


state 25

    (30) identifier -> ID .

    LBRACKET        reduce using rule 30 (identifier -> ID .)
    LPAREN          reduce using rule 30 (identifier -> ID .)
    EQUALS          reduce using rule 30 (identifier -> ID .)
    LBRACE          reduce using rule 30 (identifier -> ID .)
    COMMA           reduce using rule 30 (identifier -> ID .)
    SEMI            reduce using rule 30 (identifier -> ID .)
    RPAREN          reduce using rule 30 (identifier -> ID .)
    PLUSPLUS        reduce using rule 30 (identifier -> ID .)
    MINUSMINUS      reduce using rule 30 (identifier -> ID .)
    TIMES_EQUALS    reduce using rule 30 (identifier -> ID .)
    DIV_EQUALS      reduce using rule 30 (identifier -> ID .)
    MOD_EQUALS      reduce using rule 30 (identifier -> ID .)
    PLUS_EQUALS     reduce using rule 30 (identifier -> ID .)
    MINUS_EQUALS    reduce using rule 30 (identifier -> ID .)
    TIMES           reduce using rule 30 (identifier -> ID .)
    DIV             reduce using rule 30 (identifier -> ID .)
    MOD             reduce using rule 30 (identifier -> ID .)
    PLUS            reduce using rule 30 (identifier -> ID .)
    MINUS           reduce using rule 30 (identifier -> ID .)
    LT              reduce using rule 30 (identifier -> ID .)
    LTE             reduce using rule 30 (identifier -> ID .)
    GT              reduce using rule 30 (identifier -> ID .)
    GTE             reduce using rule 30 (identifier -> ID .)
    EQ              reduce using rule 30 (identifier -> ID .)
    NOT_EQUAL       reduce using rule 30 (identifier -> ID .)
    AND             reduce using rule 30 (identifier -> ID .)
    OR              reduce using rule 30 (identifier -> ID .)
    RBRACKET        reduce using rule 30 (identifier -> ID .)
    ID              reduce using rule 30 (identifier -> ID .)
    RBRACE          reduce using rule 30 (identifier -> ID .)


state 26

    (87) declaration -> decl_body SEMI .

    VOID            reduce using rule 87 (declaration -> decl_body SEMI .)
    CHAR            reduce using rule 87 (declaration -> decl_body SEMI .)
    INT             reduce using rule 87 (declaration -> decl_body SEMI .)
    FLOAT           reduce using rule 87 (declaration -> decl_body SEMI .)
    TIMES           reduce using rule 87 (declaration -> decl_body SEMI .)
    LPAREN          reduce using rule 87 (declaration -> decl_body SEMI .)
    ID              reduce using rule 87 (declaration -> decl_body SEMI .)
    SEMI            reduce using rule 87 (declaration -> decl_body SEMI .)
    $end            reduce using rule 87 (declaration -> decl_body SEMI .)
    LBRACE          reduce using rule 87 (declaration -> decl_body SEMI .)
    IF              reduce using rule 87 (declaration -> decl_body SEMI .)
    WHILE           reduce using rule 87 (declaration -> decl_body SEMI .)
    FOR             reduce using rule 87 (declaration -> decl_body SEMI .)
    BREAK           reduce using rule 87 (declaration -> decl_body SEMI .)
    RETURN          reduce using rule 87 (declaration -> decl_body SEMI .)
    ASSERT          reduce using rule 87 (declaration -> decl_body SEMI .)
    PRINT           reduce using rule 87 (declaration -> decl_body SEMI .)
    READ            reduce using rule 87 (declaration -> decl_body SEMI .)
    PLUSPLUS        reduce using rule 87 (declaration -> decl_body SEMI .)
    MINUSMINUS      reduce using rule 87 (declaration -> decl_body SEMI .)
    ADDRESS         reduce using rule 87 (declaration -> decl_body SEMI .)
    PLUS            reduce using rule 87 (declaration -> decl_body SEMI .)
    MINUS           reduce using rule 87 (declaration -> decl_body SEMI .)
    NOT             reduce using rule 87 (declaration -> decl_body SEMI .)
    INT_CONST       reduce using rule 87 (declaration -> decl_body SEMI .)
    CHAR_CONST      reduce using rule 87 (declaration -> decl_body SEMI .)
    FLOAT_CONST     reduce using rule 87 (declaration -> decl_body SEMI .)
    STRING          reduce using rule 87 (declaration -> decl_body SEMI .)
    RBRACE          reduce using rule 87 (declaration -> decl_body SEMI .)


state 27

    (5) function_definition -> type_specifier_opt declarator compound_statement .

    VOID            reduce using rule 5 (function_definition -> type_specifier_opt declarator compound_statement .)
    CHAR            reduce using rule 5 (function_definition -> type_specifier_opt declarator compound_statement .)
    INT             reduce using rule 5 (function_definition -> type_specifier_opt declarator compound_statement .)
    FLOAT           reduce using rule 5 (function_definition -> type_specifier_opt declarator compound_statement .)
    TIMES           reduce using rule 5 (function_definition -> type_specifier_opt declarator compound_statement .)
    LPAREN          reduce using rule 5 (function_definition -> type_specifier_opt declarator compound_statement .)
    ID              reduce using rule 5 (function_definition -> type_specifier_opt declarator compound_statement .)
    SEMI            reduce using rule 5 (function_definition -> type_specifier_opt declarator compound_statement .)
    $end            reduce using rule 5 (function_definition -> type_specifier_opt declarator compound_statement .)


state 28

    (93) init_declarator -> declarator EQUALS . initializer
    (94) initializer -> . assignment_expression
    (95) initializer -> . LBRACE initializer_list RBRACE
    (96) initializer -> . LBRACE initializer_list COMMA RBRACE
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LBRACE          shift and go to state 38
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    initializer                    shift and go to state 36
    assignment_expression          shift and go to state 37
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 29

    (99) compound_statement -> LBRACE . block_item_list_opt RBRACE
    (100) block_item_list_opt -> . block_item_list
    (101) block_item_list_opt -> . empty
    (102) block_item_list -> . block_item
    (103) block_item_list -> . block_item_list block_item
    (128) empty -> .
    (104) block_item -> . statement
    (105) block_item -> . declaration
    (106) statement -> . expression_statement
    (107) statement -> . compound_statement
    (108) statement -> . selection_statement
    (109) statement -> . iteration_statement
    (110) statement -> . jump_statement
    (111) statement -> . assert_statement
    (112) statement -> . print_statement
    (113) statement -> . read_statement
    (87) declaration -> . decl_body SEMI
    (114) expression_statement -> . expression_opt SEMI
    (99) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (117) selection_statement -> . IF LPAREN expression RPAREN statement
    (118) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (119) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (121) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (122) jump_statement -> . BREAK SEMI
    (123) jump_statement -> . RETURN expression SEMI
    (124) jump_statement -> . RETURN SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (86) decl_body -> . type_specifier_opt init_declarator_list_opt
    (115) expression_opt -> . expression
    (116) expression_opt -> . empty
    (7) type_specifier_opt -> . type_specifier
    (8) type_specifier_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (11) type_specifier -> . VOID
    (12) type_specifier -> . CHAR
    (13) type_specifier -> . INT
    (14) type_specifier -> . FLOAT
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    RBRACE          reduce using rule 128 (empty -> .)
    SEMI            reduce using rule 128 (empty -> .)
    LBRACE          shift and go to state 29
    IF              shift and go to state 75
    WHILE           shift and go to state 77
    FOR             shift and go to state 78
    BREAK           shift and go to state 79
    RETURN          shift and go to state 80
    ASSERT          shift and go to state 81
    PRINT           shift and go to state 82
    READ            shift and go to state 83
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

  ! TIMES           [ reduce using rule 128 (empty -> .) ]
  ! LPAREN          [ reduce using rule 128 (empty -> .) ]
  ! ID              [ reduce using rule 128 (empty -> .) ]

    block_item_list_opt            shift and go to state 60
    block_item_list                shift and go to state 61
    empty                          shift and go to state 62
    block_item                     shift and go to state 63
    statement                      shift and go to state 64
    declaration                    shift and go to state 65
    expression_statement           shift and go to state 66
    compound_statement             shift and go to state 67
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    assert_statement               shift and go to state 71
    print_statement                shift and go to state 72
    read_statement                 shift and go to state 73
    decl_body                      shift and go to state 7
    expression_opt                 shift and go to state 74
    expression                     shift and go to state 76
    type_specifier_opt             shift and go to state 84
    type_specifier                 shift and go to state 8
    assignment_expression          shift and go to state 85
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 30

    (15) declarator -> pointer direct_declarator .
    (22) direct_declarator -> direct_declarator . LBRACKET constant_expression_opt RBRACKET
    (23) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (24) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN

    EQUALS          reduce using rule 15 (declarator -> pointer direct_declarator .)
    LBRACE          reduce using rule 15 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 15 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 15 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 15 (declarator -> pointer direct_declarator .)
    LBRACKET        shift and go to state 31
    LPAREN          shift and go to state 32


state 31

    (22) direct_declarator -> direct_declarator LBRACKET . constant_expression_opt RBRACKET
    (19) constant_expression_opt -> . constant_expression
    (20) constant_expression_opt -> . empty
    (31) constant_expression -> . binary_expression
    (128) empty -> .
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    RBRACKET        reduce using rule 128 (empty -> .)
    LPAREN          shift and go to state 49
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    constant_expression_opt        shift and go to state 86
    constant_expression            shift and go to state 87
    empty                          shift and go to state 88
    binary_expression              shift and go to state 89
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 32

    (23) direct_declarator -> direct_declarator LPAREN . parameter_list RPAREN
    (24) direct_declarator -> direct_declarator LPAREN . identifier_list_opt RPAREN
    (83) parameter_list -> . parameter_declaration
    (84) parameter_list -> . parameter_list COMMA parameter_declaration
    (26) identifier_list_opt -> . identifier_list
    (27) identifier_list_opt -> . empty
    (85) parameter_declaration -> . type_specifier declarator
    (28) identifier_list -> . identifier
    (29) identifier_list -> . identifier_list identifier
    (128) empty -> .
    (11) type_specifier -> . VOID
    (12) type_specifier -> . CHAR
    (13) type_specifier -> . INT
    (14) type_specifier -> . FLOAT
    (30) identifier -> . ID

    RPAREN          reduce using rule 128 (empty -> .)
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 25

    parameter_list                 shift and go to state 91
    identifier_list_opt            shift and go to state 92
    parameter_declaration          shift and go to state 93
    identifier_list                shift and go to state 94
    empty                          shift and go to state 95
    type_specifier                 shift and go to state 96
    identifier                     shift and go to state 97

state 33

    (91) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (92) init_declarator -> . declarator
    (93) init_declarator -> . declarator EQUALS initializer
    (15) declarator -> . pointer direct_declarator
    (16) declarator -> . direct_declarator
    (17) pointer -> . TIMES
    (18) pointer -> . TIMES pointer
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (25) direct_declarator -> . identifier
    (30) identifier -> . ID

    TIMES           shift and go to state 21
    LPAREN          shift and go to state 22
    ID              shift and go to state 25

    init_declarator                shift and go to state 98
    declarator                     shift and go to state 99
    pointer                        shift and go to state 17
    direct_declarator              shift and go to state 18
    identifier                     shift and go to state 23

state 34

    (18) pointer -> TIMES pointer .

    LPAREN          reduce using rule 18 (pointer -> TIMES pointer .)
    ID              reduce using rule 18 (pointer -> TIMES pointer .)


state 35

    (21) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 100


state 36

    (93) init_declarator -> declarator EQUALS initializer .

    COMMA           reduce using rule 93 (init_declarator -> declarator EQUALS initializer .)
    SEMI            reduce using rule 93 (init_declarator -> declarator EQUALS initializer .)


state 37

    (94) initializer -> assignment_expression .

    COMMA           reduce using rule 94 (initializer -> assignment_expression .)
    SEMI            reduce using rule 94 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 94 (initializer -> assignment_expression .)


state 38

    (95) initializer -> LBRACE . initializer_list RBRACE
    (96) initializer -> LBRACE . initializer_list COMMA RBRACE
    (97) initializer_list -> . initializer
    (98) initializer_list -> . initializer_list COMMA initializer
    (94) initializer -> . assignment_expression
    (95) initializer -> . LBRACE initializer_list RBRACE
    (96) initializer -> . LBRACE initializer_list COMMA RBRACE
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LBRACE          shift and go to state 38
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    initializer_list               shift and go to state 101
    initializer                    shift and go to state 102
    assignment_expression          shift and go to state 37
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 39

    (70) assignment_expression -> binary_expression .
    (33) binary_expression -> binary_expression . TIMES binary_expression
    (34) binary_expression -> binary_expression . DIV binary_expression
    (35) binary_expression -> binary_expression . MOD binary_expression
    (36) binary_expression -> binary_expression . PLUS binary_expression
    (37) binary_expression -> binary_expression . MINUS binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . LTE binary_expression
    (40) binary_expression -> binary_expression . GT binary_expression
    (41) binary_expression -> binary_expression . GTE binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NOT_EQUAL binary_expression
    (44) binary_expression -> binary_expression . AND binary_expression
    (45) binary_expression -> binary_expression . OR binary_expression

    COMMA           reduce using rule 70 (assignment_expression -> binary_expression .)
    SEMI            reduce using rule 70 (assignment_expression -> binary_expression .)
    RBRACE          reduce using rule 70 (assignment_expression -> binary_expression .)
    RPAREN          reduce using rule 70 (assignment_expression -> binary_expression .)
    RBRACKET        reduce using rule 70 (assignment_expression -> binary_expression .)
    TIMES           shift and go to state 103
    DIV             shift and go to state 104
    MOD             shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    LT              shift and go to state 108
    LTE             shift and go to state 109
    GT              shift and go to state 110
    GTE             shift and go to state 111
    EQ              shift and go to state 112
    NOT_EQUAL       shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 40

    (71) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (46) cast_expression -> unary_expression .
    (72) assignment_operator -> . EQUALS
    (73) assignment_operator -> . TIMES_EQUALS
    (74) assignment_operator -> . DIV_EQUALS
    (75) assignment_operator -> . MOD_EQUALS
    (76) assignment_operator -> . PLUS_EQUALS
    (77) assignment_operator -> . MINUS_EQUALS

    TIMES           reduce using rule 46 (cast_expression -> unary_expression .)
    DIV             reduce using rule 46 (cast_expression -> unary_expression .)
    MOD             reduce using rule 46 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 46 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 46 (cast_expression -> unary_expression .)
    LT              reduce using rule 46 (cast_expression -> unary_expression .)
    LTE             reduce using rule 46 (cast_expression -> unary_expression .)
    GT              reduce using rule 46 (cast_expression -> unary_expression .)
    GTE             reduce using rule 46 (cast_expression -> unary_expression .)
    EQ              reduce using rule 46 (cast_expression -> unary_expression .)
    NOT_EQUAL       reduce using rule 46 (cast_expression -> unary_expression .)
    AND             reduce using rule 46 (cast_expression -> unary_expression .)
    OR              reduce using rule 46 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 46 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 46 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 46 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 46 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 46 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 117
    TIMES_EQUALS    shift and go to state 118
    DIV_EQUALS      shift and go to state 119
    MOD_EQUALS      shift and go to state 120
    PLUS_EQUALS     shift and go to state 121
    MINUS_EQUALS    shift and go to state 122

    assignment_operator            shift and go to state 116

state 41

    (32) binary_expression -> cast_expression .

    TIMES           reduce using rule 32 (binary_expression -> cast_expression .)
    DIV             reduce using rule 32 (binary_expression -> cast_expression .)
    MOD             reduce using rule 32 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 32 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 32 (binary_expression -> cast_expression .)
    LT              reduce using rule 32 (binary_expression -> cast_expression .)
    LTE             reduce using rule 32 (binary_expression -> cast_expression .)
    GT              reduce using rule 32 (binary_expression -> cast_expression .)
    GTE             reduce using rule 32 (binary_expression -> cast_expression .)
    EQ              reduce using rule 32 (binary_expression -> cast_expression .)
    NOT_EQUAL       reduce using rule 32 (binary_expression -> cast_expression .)
    AND             reduce using rule 32 (binary_expression -> cast_expression .)
    OR              reduce using rule 32 (binary_expression -> cast_expression .)
    COMMA           reduce using rule 32 (binary_expression -> cast_expression .)
    SEMI            reduce using rule 32 (binary_expression -> cast_expression .)
    RBRACKET        reduce using rule 32 (binary_expression -> cast_expression .)
    RBRACE          reduce using rule 32 (binary_expression -> cast_expression .)
    RPAREN          reduce using rule 32 (binary_expression -> cast_expression .)


state 42

    (79) unary_operator -> TIMES .

    LPAREN          reduce using rule 79 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 79 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 79 (unary_operator -> TIMES .)
    ADDRESS         reduce using rule 79 (unary_operator -> TIMES .)
    TIMES           reduce using rule 79 (unary_operator -> TIMES .)
    PLUS            reduce using rule 79 (unary_operator -> TIMES .)
    MINUS           reduce using rule 79 (unary_operator -> TIMES .)
    NOT             reduce using rule 79 (unary_operator -> TIMES .)
    ID              reduce using rule 79 (unary_operator -> TIMES .)
    INT_CONST       reduce using rule 79 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 79 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 79 (unary_operator -> TIMES .)
    STRING          reduce using rule 79 (unary_operator -> TIMES .)


state 43

    (80) unary_operator -> PLUS .

    LPAREN          reduce using rule 80 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 80 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 80 (unary_operator -> PLUS .)
    ADDRESS         reduce using rule 80 (unary_operator -> PLUS .)
    TIMES           reduce using rule 80 (unary_operator -> PLUS .)
    PLUS            reduce using rule 80 (unary_operator -> PLUS .)
    MINUS           reduce using rule 80 (unary_operator -> PLUS .)
    NOT             reduce using rule 80 (unary_operator -> PLUS .)
    ID              reduce using rule 80 (unary_operator -> PLUS .)
    INT_CONST       reduce using rule 80 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 80 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 80 (unary_operator -> PLUS .)
    STRING          reduce using rule 80 (unary_operator -> PLUS .)


state 44

    (81) unary_operator -> MINUS .

    LPAREN          reduce using rule 81 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 81 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 81 (unary_operator -> MINUS .)
    ADDRESS         reduce using rule 81 (unary_operator -> MINUS .)
    TIMES           reduce using rule 81 (unary_operator -> MINUS .)
    PLUS            reduce using rule 81 (unary_operator -> MINUS .)
    MINUS           reduce using rule 81 (unary_operator -> MINUS .)
    NOT             reduce using rule 81 (unary_operator -> MINUS .)
    ID              reduce using rule 81 (unary_operator -> MINUS .)
    INT_CONST       reduce using rule 81 (unary_operator -> MINUS .)
    CHAR_CONST      reduce using rule 81 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 81 (unary_operator -> MINUS .)
    STRING          reduce using rule 81 (unary_operator -> MINUS .)


state 45

    (48) unary_expression -> postfix_expression .
    (53) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (54) postfix_expression -> postfix_expression . LPAREN argument_expression RPAREN
    (55) postfix_expression -> postfix_expression . LPAREN RPAREN
    (56) postfix_expression -> postfix_expression . PLUSPLUS
    (57) postfix_expression -> postfix_expression . MINUSMINUS

    EQUALS          reduce using rule 48 (unary_expression -> postfix_expression .)
    TIMES_EQUALS    reduce using rule 48 (unary_expression -> postfix_expression .)
    DIV_EQUALS      reduce using rule 48 (unary_expression -> postfix_expression .)
    MOD_EQUALS      reduce using rule 48 (unary_expression -> postfix_expression .)
    PLUS_EQUALS     reduce using rule 48 (unary_expression -> postfix_expression .)
    MINUS_EQUALS    reduce using rule 48 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 48 (unary_expression -> postfix_expression .)
    DIV             reduce using rule 48 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 48 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 48 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 48 (unary_expression -> postfix_expression .)
    LT              reduce using rule 48 (unary_expression -> postfix_expression .)
    LTE             reduce using rule 48 (unary_expression -> postfix_expression .)
    GT              reduce using rule 48 (unary_expression -> postfix_expression .)
    GTE             reduce using rule 48 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 48 (unary_expression -> postfix_expression .)
    NOT_EQUAL       reduce using rule 48 (unary_expression -> postfix_expression .)
    AND             reduce using rule 48 (unary_expression -> postfix_expression .)
    OR              reduce using rule 48 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 48 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 48 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 48 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 48 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 48 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 123
    LPAREN          shift and go to state 124
    PLUSPLUS        shift and go to state 125
    MINUSMINUS      shift and go to state 126


state 46

    (49) unary_expression -> PLUSPLUS . unary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    LPAREN          shift and go to state 128
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 47

    (50) unary_expression -> MINUSMINUS . unary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    LPAREN          shift and go to state 128
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    unary_expression               shift and go to state 129
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 48

    (51) unary_expression -> unary_operator . cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LPAREN          shift and go to state 49
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    unary_operator                 shift and go to state 48
    cast_expression                shift and go to state 130
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 45
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 49

    (47) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (62) primary_expression -> LPAREN . expression RPAREN
    (11) type_specifier -> . VOID
    (12) type_specifier -> . CHAR
    (13) type_specifier -> . INT
    (14) type_specifier -> . FLOAT
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    type_specifier                 shift and go to state 131
    cast_expression                shift and go to state 41
    expression                     shift and go to state 132
    assignment_expression          shift and go to state 85
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 50

    (52) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 52 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 52 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 52 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 52 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 52 (postfix_expression -> primary_expression .)
    TIMES_EQUALS    reduce using rule 52 (postfix_expression -> primary_expression .)
    DIV_EQUALS      reduce using rule 52 (postfix_expression -> primary_expression .)
    MOD_EQUALS      reduce using rule 52 (postfix_expression -> primary_expression .)
    PLUS_EQUALS     reduce using rule 52 (postfix_expression -> primary_expression .)
    MINUS_EQUALS    reduce using rule 52 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 52 (postfix_expression -> primary_expression .)
    DIV             reduce using rule 52 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 52 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 52 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 52 (postfix_expression -> primary_expression .)
    LT              reduce using rule 52 (postfix_expression -> primary_expression .)
    LTE             reduce using rule 52 (postfix_expression -> primary_expression .)
    GT              reduce using rule 52 (postfix_expression -> primary_expression .)
    GTE             reduce using rule 52 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 52 (postfix_expression -> primary_expression .)
    NOT_EQUAL       reduce using rule 52 (postfix_expression -> primary_expression .)
    AND             reduce using rule 52 (postfix_expression -> primary_expression .)
    OR              reduce using rule 52 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 52 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 52 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 52 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 52 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 52 (postfix_expression -> primary_expression .)


state 51

    (78) unary_operator -> ADDRESS .

    LPAREN          reduce using rule 78 (unary_operator -> ADDRESS .)
    PLUSPLUS        reduce using rule 78 (unary_operator -> ADDRESS .)
    MINUSMINUS      reduce using rule 78 (unary_operator -> ADDRESS .)
    ADDRESS         reduce using rule 78 (unary_operator -> ADDRESS .)
    TIMES           reduce using rule 78 (unary_operator -> ADDRESS .)
    PLUS            reduce using rule 78 (unary_operator -> ADDRESS .)
    MINUS           reduce using rule 78 (unary_operator -> ADDRESS .)
    NOT             reduce using rule 78 (unary_operator -> ADDRESS .)
    ID              reduce using rule 78 (unary_operator -> ADDRESS .)
    INT_CONST       reduce using rule 78 (unary_operator -> ADDRESS .)
    CHAR_CONST      reduce using rule 78 (unary_operator -> ADDRESS .)
    FLOAT_CONST     reduce using rule 78 (unary_operator -> ADDRESS .)
    STRING          reduce using rule 78 (unary_operator -> ADDRESS .)


state 52

    (82) unary_operator -> NOT .

    LPAREN          reduce using rule 82 (unary_operator -> NOT .)
    PLUSPLUS        reduce using rule 82 (unary_operator -> NOT .)
    MINUSMINUS      reduce using rule 82 (unary_operator -> NOT .)
    ADDRESS         reduce using rule 82 (unary_operator -> NOT .)
    TIMES           reduce using rule 82 (unary_operator -> NOT .)
    PLUS            reduce using rule 82 (unary_operator -> NOT .)
    MINUS           reduce using rule 82 (unary_operator -> NOT .)
    NOT             reduce using rule 82 (unary_operator -> NOT .)
    ID              reduce using rule 82 (unary_operator -> NOT .)
    INT_CONST       reduce using rule 82 (unary_operator -> NOT .)
    CHAR_CONST      reduce using rule 82 (unary_operator -> NOT .)
    FLOAT_CONST     reduce using rule 82 (unary_operator -> NOT .)
    STRING          reduce using rule 82 (unary_operator -> NOT .)


state 53

    (59) primary_expression -> identifier .

    LBRACKET        reduce using rule 59 (primary_expression -> identifier .)
    LPAREN          reduce using rule 59 (primary_expression -> identifier .)
    PLUSPLUS        reduce using rule 59 (primary_expression -> identifier .)
    MINUSMINUS      reduce using rule 59 (primary_expression -> identifier .)
    EQUALS          reduce using rule 59 (primary_expression -> identifier .)
    TIMES_EQUALS    reduce using rule 59 (primary_expression -> identifier .)
    DIV_EQUALS      reduce using rule 59 (primary_expression -> identifier .)
    MOD_EQUALS      reduce using rule 59 (primary_expression -> identifier .)
    PLUS_EQUALS     reduce using rule 59 (primary_expression -> identifier .)
    MINUS_EQUALS    reduce using rule 59 (primary_expression -> identifier .)
    TIMES           reduce using rule 59 (primary_expression -> identifier .)
    DIV             reduce using rule 59 (primary_expression -> identifier .)
    MOD             reduce using rule 59 (primary_expression -> identifier .)
    PLUS            reduce using rule 59 (primary_expression -> identifier .)
    MINUS           reduce using rule 59 (primary_expression -> identifier .)
    LT              reduce using rule 59 (primary_expression -> identifier .)
    LTE             reduce using rule 59 (primary_expression -> identifier .)
    GT              reduce using rule 59 (primary_expression -> identifier .)
    GTE             reduce using rule 59 (primary_expression -> identifier .)
    EQ              reduce using rule 59 (primary_expression -> identifier .)
    NOT_EQUAL       reduce using rule 59 (primary_expression -> identifier .)
    AND             reduce using rule 59 (primary_expression -> identifier .)
    OR              reduce using rule 59 (primary_expression -> identifier .)
    COMMA           reduce using rule 59 (primary_expression -> identifier .)
    SEMI            reduce using rule 59 (primary_expression -> identifier .)
    RBRACKET        reduce using rule 59 (primary_expression -> identifier .)
    RBRACE          reduce using rule 59 (primary_expression -> identifier .)
    RPAREN          reduce using rule 59 (primary_expression -> identifier .)


state 54

    (60) primary_expression -> constant .

    LBRACKET        reduce using rule 60 (primary_expression -> constant .)
    LPAREN          reduce using rule 60 (primary_expression -> constant .)
    PLUSPLUS        reduce using rule 60 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 60 (primary_expression -> constant .)
    EQUALS          reduce using rule 60 (primary_expression -> constant .)
    TIMES_EQUALS    reduce using rule 60 (primary_expression -> constant .)
    DIV_EQUALS      reduce using rule 60 (primary_expression -> constant .)
    MOD_EQUALS      reduce using rule 60 (primary_expression -> constant .)
    PLUS_EQUALS     reduce using rule 60 (primary_expression -> constant .)
    MINUS_EQUALS    reduce using rule 60 (primary_expression -> constant .)
    TIMES           reduce using rule 60 (primary_expression -> constant .)
    DIV             reduce using rule 60 (primary_expression -> constant .)
    MOD             reduce using rule 60 (primary_expression -> constant .)
    PLUS            reduce using rule 60 (primary_expression -> constant .)
    MINUS           reduce using rule 60 (primary_expression -> constant .)
    LT              reduce using rule 60 (primary_expression -> constant .)
    LTE             reduce using rule 60 (primary_expression -> constant .)
    GT              reduce using rule 60 (primary_expression -> constant .)
    GTE             reduce using rule 60 (primary_expression -> constant .)
    EQ              reduce using rule 60 (primary_expression -> constant .)
    NOT_EQUAL       reduce using rule 60 (primary_expression -> constant .)
    AND             reduce using rule 60 (primary_expression -> constant .)
    OR              reduce using rule 60 (primary_expression -> constant .)
    COMMA           reduce using rule 60 (primary_expression -> constant .)
    SEMI            reduce using rule 60 (primary_expression -> constant .)
    RBRACKET        reduce using rule 60 (primary_expression -> constant .)
    RBRACE          reduce using rule 60 (primary_expression -> constant .)
    RPAREN          reduce using rule 60 (primary_expression -> constant .)


state 55

    (61) primary_expression -> string_constant .

    LBRACKET        reduce using rule 61 (primary_expression -> string_constant .)
    LPAREN          reduce using rule 61 (primary_expression -> string_constant .)
    PLUSPLUS        reduce using rule 61 (primary_expression -> string_constant .)
    MINUSMINUS      reduce using rule 61 (primary_expression -> string_constant .)
    EQUALS          reduce using rule 61 (primary_expression -> string_constant .)
    TIMES_EQUALS    reduce using rule 61 (primary_expression -> string_constant .)
    DIV_EQUALS      reduce using rule 61 (primary_expression -> string_constant .)
    MOD_EQUALS      reduce using rule 61 (primary_expression -> string_constant .)
    PLUS_EQUALS     reduce using rule 61 (primary_expression -> string_constant .)
    MINUS_EQUALS    reduce using rule 61 (primary_expression -> string_constant .)
    TIMES           reduce using rule 61 (primary_expression -> string_constant .)
    DIV             reduce using rule 61 (primary_expression -> string_constant .)
    MOD             reduce using rule 61 (primary_expression -> string_constant .)
    PLUS            reduce using rule 61 (primary_expression -> string_constant .)
    MINUS           reduce using rule 61 (primary_expression -> string_constant .)
    LT              reduce using rule 61 (primary_expression -> string_constant .)
    LTE             reduce using rule 61 (primary_expression -> string_constant .)
    GT              reduce using rule 61 (primary_expression -> string_constant .)
    GTE             reduce using rule 61 (primary_expression -> string_constant .)
    EQ              reduce using rule 61 (primary_expression -> string_constant .)
    NOT_EQUAL       reduce using rule 61 (primary_expression -> string_constant .)
    AND             reduce using rule 61 (primary_expression -> string_constant .)
    OR              reduce using rule 61 (primary_expression -> string_constant .)
    COMMA           reduce using rule 61 (primary_expression -> string_constant .)
    SEMI            reduce using rule 61 (primary_expression -> string_constant .)
    RBRACKET        reduce using rule 61 (primary_expression -> string_constant .)
    RBRACE          reduce using rule 61 (primary_expression -> string_constant .)
    RPAREN          reduce using rule 61 (primary_expression -> string_constant .)


state 56

    (63) constant -> INT_CONST .

    LBRACKET        reduce using rule 63 (constant -> INT_CONST .)
    LPAREN          reduce using rule 63 (constant -> INT_CONST .)
    PLUSPLUS        reduce using rule 63 (constant -> INT_CONST .)
    MINUSMINUS      reduce using rule 63 (constant -> INT_CONST .)
    EQUALS          reduce using rule 63 (constant -> INT_CONST .)
    TIMES_EQUALS    reduce using rule 63 (constant -> INT_CONST .)
    DIV_EQUALS      reduce using rule 63 (constant -> INT_CONST .)
    MOD_EQUALS      reduce using rule 63 (constant -> INT_CONST .)
    PLUS_EQUALS     reduce using rule 63 (constant -> INT_CONST .)
    MINUS_EQUALS    reduce using rule 63 (constant -> INT_CONST .)
    TIMES           reduce using rule 63 (constant -> INT_CONST .)
    DIV             reduce using rule 63 (constant -> INT_CONST .)
    MOD             reduce using rule 63 (constant -> INT_CONST .)
    PLUS            reduce using rule 63 (constant -> INT_CONST .)
    MINUS           reduce using rule 63 (constant -> INT_CONST .)
    LT              reduce using rule 63 (constant -> INT_CONST .)
    LTE             reduce using rule 63 (constant -> INT_CONST .)
    GT              reduce using rule 63 (constant -> INT_CONST .)
    GTE             reduce using rule 63 (constant -> INT_CONST .)
    EQ              reduce using rule 63 (constant -> INT_CONST .)
    NOT_EQUAL       reduce using rule 63 (constant -> INT_CONST .)
    AND             reduce using rule 63 (constant -> INT_CONST .)
    OR              reduce using rule 63 (constant -> INT_CONST .)
    COMMA           reduce using rule 63 (constant -> INT_CONST .)
    SEMI            reduce using rule 63 (constant -> INT_CONST .)
    RBRACKET        reduce using rule 63 (constant -> INT_CONST .)
    RBRACE          reduce using rule 63 (constant -> INT_CONST .)
    RPAREN          reduce using rule 63 (constant -> INT_CONST .)


state 57

    (64) constant -> CHAR_CONST .

    LBRACKET        reduce using rule 64 (constant -> CHAR_CONST .)
    LPAREN          reduce using rule 64 (constant -> CHAR_CONST .)
    PLUSPLUS        reduce using rule 64 (constant -> CHAR_CONST .)
    MINUSMINUS      reduce using rule 64 (constant -> CHAR_CONST .)
    EQUALS          reduce using rule 64 (constant -> CHAR_CONST .)
    TIMES_EQUALS    reduce using rule 64 (constant -> CHAR_CONST .)
    DIV_EQUALS      reduce using rule 64 (constant -> CHAR_CONST .)
    MOD_EQUALS      reduce using rule 64 (constant -> CHAR_CONST .)
    PLUS_EQUALS     reduce using rule 64 (constant -> CHAR_CONST .)
    MINUS_EQUALS    reduce using rule 64 (constant -> CHAR_CONST .)
    TIMES           reduce using rule 64 (constant -> CHAR_CONST .)
    DIV             reduce using rule 64 (constant -> CHAR_CONST .)
    MOD             reduce using rule 64 (constant -> CHAR_CONST .)
    PLUS            reduce using rule 64 (constant -> CHAR_CONST .)
    MINUS           reduce using rule 64 (constant -> CHAR_CONST .)
    LT              reduce using rule 64 (constant -> CHAR_CONST .)
    LTE             reduce using rule 64 (constant -> CHAR_CONST .)
    GT              reduce using rule 64 (constant -> CHAR_CONST .)
    GTE             reduce using rule 64 (constant -> CHAR_CONST .)
    EQ              reduce using rule 64 (constant -> CHAR_CONST .)
    NOT_EQUAL       reduce using rule 64 (constant -> CHAR_CONST .)
    AND             reduce using rule 64 (constant -> CHAR_CONST .)
    OR              reduce using rule 64 (constant -> CHAR_CONST .)
    COMMA           reduce using rule 64 (constant -> CHAR_CONST .)
    SEMI            reduce using rule 64 (constant -> CHAR_CONST .)
    RBRACKET        reduce using rule 64 (constant -> CHAR_CONST .)
    RBRACE          reduce using rule 64 (constant -> CHAR_CONST .)
    RPAREN          reduce using rule 64 (constant -> CHAR_CONST .)


state 58

    (65) constant -> FLOAT_CONST .

    LBRACKET        reduce using rule 65 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 65 (constant -> FLOAT_CONST .)
    PLUSPLUS        reduce using rule 65 (constant -> FLOAT_CONST .)
    MINUSMINUS      reduce using rule 65 (constant -> FLOAT_CONST .)
    EQUALS          reduce using rule 65 (constant -> FLOAT_CONST .)
    TIMES_EQUALS    reduce using rule 65 (constant -> FLOAT_CONST .)
    DIV_EQUALS      reduce using rule 65 (constant -> FLOAT_CONST .)
    MOD_EQUALS      reduce using rule 65 (constant -> FLOAT_CONST .)
    PLUS_EQUALS     reduce using rule 65 (constant -> FLOAT_CONST .)
    MINUS_EQUALS    reduce using rule 65 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 65 (constant -> FLOAT_CONST .)
    DIV             reduce using rule 65 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 65 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 65 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 65 (constant -> FLOAT_CONST .)
    LT              reduce using rule 65 (constant -> FLOAT_CONST .)
    LTE             reduce using rule 65 (constant -> FLOAT_CONST .)
    GT              reduce using rule 65 (constant -> FLOAT_CONST .)
    GTE             reduce using rule 65 (constant -> FLOAT_CONST .)
    EQ              reduce using rule 65 (constant -> FLOAT_CONST .)
    NOT_EQUAL       reduce using rule 65 (constant -> FLOAT_CONST .)
    AND             reduce using rule 65 (constant -> FLOAT_CONST .)
    OR              reduce using rule 65 (constant -> FLOAT_CONST .)
    COMMA           reduce using rule 65 (constant -> FLOAT_CONST .)
    SEMI            reduce using rule 65 (constant -> FLOAT_CONST .)
    RBRACKET        reduce using rule 65 (constant -> FLOAT_CONST .)
    RBRACE          reduce using rule 65 (constant -> FLOAT_CONST .)
    RPAREN          reduce using rule 65 (constant -> FLOAT_CONST .)


state 59

    (58) string_constant -> STRING .

    LBRACKET        reduce using rule 58 (string_constant -> STRING .)
    LPAREN          reduce using rule 58 (string_constant -> STRING .)
    PLUSPLUS        reduce using rule 58 (string_constant -> STRING .)
    MINUSMINUS      reduce using rule 58 (string_constant -> STRING .)
    EQUALS          reduce using rule 58 (string_constant -> STRING .)
    TIMES_EQUALS    reduce using rule 58 (string_constant -> STRING .)
    DIV_EQUALS      reduce using rule 58 (string_constant -> STRING .)
    MOD_EQUALS      reduce using rule 58 (string_constant -> STRING .)
    PLUS_EQUALS     reduce using rule 58 (string_constant -> STRING .)
    MINUS_EQUALS    reduce using rule 58 (string_constant -> STRING .)
    TIMES           reduce using rule 58 (string_constant -> STRING .)
    DIV             reduce using rule 58 (string_constant -> STRING .)
    MOD             reduce using rule 58 (string_constant -> STRING .)
    PLUS            reduce using rule 58 (string_constant -> STRING .)
    MINUS           reduce using rule 58 (string_constant -> STRING .)
    LT              reduce using rule 58 (string_constant -> STRING .)
    LTE             reduce using rule 58 (string_constant -> STRING .)
    GT              reduce using rule 58 (string_constant -> STRING .)
    GTE             reduce using rule 58 (string_constant -> STRING .)
    EQ              reduce using rule 58 (string_constant -> STRING .)
    NOT_EQUAL       reduce using rule 58 (string_constant -> STRING .)
    AND             reduce using rule 58 (string_constant -> STRING .)
    OR              reduce using rule 58 (string_constant -> STRING .)
    COMMA           reduce using rule 58 (string_constant -> STRING .)
    SEMI            reduce using rule 58 (string_constant -> STRING .)
    RBRACKET        reduce using rule 58 (string_constant -> STRING .)
    RBRACE          reduce using rule 58 (string_constant -> STRING .)
    RPAREN          reduce using rule 58 (string_constant -> STRING .)


state 60

    (99) compound_statement -> LBRACE block_item_list_opt . RBRACE

    RBRACE          shift and go to state 133


state 61

    (100) block_item_list_opt -> block_item_list .
    (103) block_item_list -> block_item_list . block_item
    (104) block_item -> . statement
    (105) block_item -> . declaration
    (106) statement -> . expression_statement
    (107) statement -> . compound_statement
    (108) statement -> . selection_statement
    (109) statement -> . iteration_statement
    (110) statement -> . jump_statement
    (111) statement -> . assert_statement
    (112) statement -> . print_statement
    (113) statement -> . read_statement
    (87) declaration -> . decl_body SEMI
    (114) expression_statement -> . expression_opt SEMI
    (99) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (117) selection_statement -> . IF LPAREN expression RPAREN statement
    (118) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (119) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (121) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (122) jump_statement -> . BREAK SEMI
    (123) jump_statement -> . RETURN expression SEMI
    (124) jump_statement -> . RETURN SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (86) decl_body -> . type_specifier_opt init_declarator_list_opt
    (115) expression_opt -> . expression
    (116) expression_opt -> . empty
    (7) type_specifier_opt -> . type_specifier
    (8) type_specifier_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (11) type_specifier -> . VOID
    (12) type_specifier -> . CHAR
    (13) type_specifier -> . INT
    (14) type_specifier -> . FLOAT
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    RBRACE          reduce using rule 100 (block_item_list_opt -> block_item_list .)
    LBRACE          shift and go to state 29
    IF              shift and go to state 75
    WHILE           shift and go to state 77
    FOR             shift and go to state 78
    BREAK           shift and go to state 79
    RETURN          shift and go to state 80
    ASSERT          shift and go to state 81
    PRINT           shift and go to state 82
    READ            shift and go to state 83
    SEMI            reduce using rule 128 (empty -> .)
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

  ! TIMES           [ reduce using rule 128 (empty -> .) ]
  ! LPAREN          [ reduce using rule 128 (empty -> .) ]
  ! ID              [ reduce using rule 128 (empty -> .) ]

    block_item                     shift and go to state 134
    statement                      shift and go to state 64
    declaration                    shift and go to state 65
    expression_statement           shift and go to state 66
    compound_statement             shift and go to state 67
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    assert_statement               shift and go to state 71
    print_statement                shift and go to state 72
    read_statement                 shift and go to state 73
    decl_body                      shift and go to state 7
    expression_opt                 shift and go to state 74
    expression                     shift and go to state 76
    type_specifier_opt             shift and go to state 84
    empty                          shift and go to state 135
    type_specifier                 shift and go to state 8
    assignment_expression          shift and go to state 85
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 62

    (101) block_item_list_opt -> empty .
    (116) expression_opt -> empty .
    (8) type_specifier_opt -> empty .

  ! reduce/reduce conflict for SEMI resolved using rule 8 (type_specifier_opt -> empty .)
    RBRACE          reduce using rule 101 (block_item_list_opt -> empty .)
    TIMES           reduce using rule 8 (type_specifier_opt -> empty .)
    LPAREN          reduce using rule 8 (type_specifier_opt -> empty .)
    ID              reduce using rule 8 (type_specifier_opt -> empty .)
    SEMI            reduce using rule 8 (type_specifier_opt -> empty .)

  ! SEMI            [ reduce using rule 116 (expression_opt -> empty .) ]


state 63

    (102) block_item_list -> block_item .

    LBRACE          reduce using rule 102 (block_item_list -> block_item .)
    IF              reduce using rule 102 (block_item_list -> block_item .)
    WHILE           reduce using rule 102 (block_item_list -> block_item .)
    FOR             reduce using rule 102 (block_item_list -> block_item .)
    BREAK           reduce using rule 102 (block_item_list -> block_item .)
    RETURN          reduce using rule 102 (block_item_list -> block_item .)
    ASSERT          reduce using rule 102 (block_item_list -> block_item .)
    PRINT           reduce using rule 102 (block_item_list -> block_item .)
    READ            reduce using rule 102 (block_item_list -> block_item .)
    VOID            reduce using rule 102 (block_item_list -> block_item .)
    CHAR            reduce using rule 102 (block_item_list -> block_item .)
    INT             reduce using rule 102 (block_item_list -> block_item .)
    FLOAT           reduce using rule 102 (block_item_list -> block_item .)
    PLUSPLUS        reduce using rule 102 (block_item_list -> block_item .)
    MINUSMINUS      reduce using rule 102 (block_item_list -> block_item .)
    LPAREN          reduce using rule 102 (block_item_list -> block_item .)
    ADDRESS         reduce using rule 102 (block_item_list -> block_item .)
    TIMES           reduce using rule 102 (block_item_list -> block_item .)
    PLUS            reduce using rule 102 (block_item_list -> block_item .)
    MINUS           reduce using rule 102 (block_item_list -> block_item .)
    NOT             reduce using rule 102 (block_item_list -> block_item .)
    ID              reduce using rule 102 (block_item_list -> block_item .)
    INT_CONST       reduce using rule 102 (block_item_list -> block_item .)
    CHAR_CONST      reduce using rule 102 (block_item_list -> block_item .)
    FLOAT_CONST     reduce using rule 102 (block_item_list -> block_item .)
    STRING          reduce using rule 102 (block_item_list -> block_item .)
    SEMI            reduce using rule 102 (block_item_list -> block_item .)
    RBRACE          reduce using rule 102 (block_item_list -> block_item .)


state 64

    (104) block_item -> statement .

    LBRACE          reduce using rule 104 (block_item -> statement .)
    IF              reduce using rule 104 (block_item -> statement .)
    WHILE           reduce using rule 104 (block_item -> statement .)
    FOR             reduce using rule 104 (block_item -> statement .)
    BREAK           reduce using rule 104 (block_item -> statement .)
    RETURN          reduce using rule 104 (block_item -> statement .)
    ASSERT          reduce using rule 104 (block_item -> statement .)
    PRINT           reduce using rule 104 (block_item -> statement .)
    READ            reduce using rule 104 (block_item -> statement .)
    VOID            reduce using rule 104 (block_item -> statement .)
    CHAR            reduce using rule 104 (block_item -> statement .)
    INT             reduce using rule 104 (block_item -> statement .)
    FLOAT           reduce using rule 104 (block_item -> statement .)
    PLUSPLUS        reduce using rule 104 (block_item -> statement .)
    MINUSMINUS      reduce using rule 104 (block_item -> statement .)
    LPAREN          reduce using rule 104 (block_item -> statement .)
    ADDRESS         reduce using rule 104 (block_item -> statement .)
    TIMES           reduce using rule 104 (block_item -> statement .)
    PLUS            reduce using rule 104 (block_item -> statement .)
    MINUS           reduce using rule 104 (block_item -> statement .)
    NOT             reduce using rule 104 (block_item -> statement .)
    ID              reduce using rule 104 (block_item -> statement .)
    INT_CONST       reduce using rule 104 (block_item -> statement .)
    CHAR_CONST      reduce using rule 104 (block_item -> statement .)
    FLOAT_CONST     reduce using rule 104 (block_item -> statement .)
    STRING          reduce using rule 104 (block_item -> statement .)
    SEMI            reduce using rule 104 (block_item -> statement .)
    RBRACE          reduce using rule 104 (block_item -> statement .)


state 65

    (105) block_item -> declaration .

    LBRACE          reduce using rule 105 (block_item -> declaration .)
    IF              reduce using rule 105 (block_item -> declaration .)
    WHILE           reduce using rule 105 (block_item -> declaration .)
    FOR             reduce using rule 105 (block_item -> declaration .)
    BREAK           reduce using rule 105 (block_item -> declaration .)
    RETURN          reduce using rule 105 (block_item -> declaration .)
    ASSERT          reduce using rule 105 (block_item -> declaration .)
    PRINT           reduce using rule 105 (block_item -> declaration .)
    READ            reduce using rule 105 (block_item -> declaration .)
    VOID            reduce using rule 105 (block_item -> declaration .)
    CHAR            reduce using rule 105 (block_item -> declaration .)
    INT             reduce using rule 105 (block_item -> declaration .)
    FLOAT           reduce using rule 105 (block_item -> declaration .)
    PLUSPLUS        reduce using rule 105 (block_item -> declaration .)
    MINUSMINUS      reduce using rule 105 (block_item -> declaration .)
    LPAREN          reduce using rule 105 (block_item -> declaration .)
    ADDRESS         reduce using rule 105 (block_item -> declaration .)
    TIMES           reduce using rule 105 (block_item -> declaration .)
    PLUS            reduce using rule 105 (block_item -> declaration .)
    MINUS           reduce using rule 105 (block_item -> declaration .)
    NOT             reduce using rule 105 (block_item -> declaration .)
    ID              reduce using rule 105 (block_item -> declaration .)
    INT_CONST       reduce using rule 105 (block_item -> declaration .)
    CHAR_CONST      reduce using rule 105 (block_item -> declaration .)
    FLOAT_CONST     reduce using rule 105 (block_item -> declaration .)
    STRING          reduce using rule 105 (block_item -> declaration .)
    SEMI            reduce using rule 105 (block_item -> declaration .)
    RBRACE          reduce using rule 105 (block_item -> declaration .)


state 66

    (106) statement -> expression_statement .

    LBRACE          reduce using rule 106 (statement -> expression_statement .)
    IF              reduce using rule 106 (statement -> expression_statement .)
    WHILE           reduce using rule 106 (statement -> expression_statement .)
    FOR             reduce using rule 106 (statement -> expression_statement .)
    BREAK           reduce using rule 106 (statement -> expression_statement .)
    RETURN          reduce using rule 106 (statement -> expression_statement .)
    ASSERT          reduce using rule 106 (statement -> expression_statement .)
    PRINT           reduce using rule 106 (statement -> expression_statement .)
    READ            reduce using rule 106 (statement -> expression_statement .)
    VOID            reduce using rule 106 (statement -> expression_statement .)
    CHAR            reduce using rule 106 (statement -> expression_statement .)
    INT             reduce using rule 106 (statement -> expression_statement .)
    FLOAT           reduce using rule 106 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 106 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 106 (statement -> expression_statement .)
    LPAREN          reduce using rule 106 (statement -> expression_statement .)
    ADDRESS         reduce using rule 106 (statement -> expression_statement .)
    TIMES           reduce using rule 106 (statement -> expression_statement .)
    PLUS            reduce using rule 106 (statement -> expression_statement .)
    MINUS           reduce using rule 106 (statement -> expression_statement .)
    NOT             reduce using rule 106 (statement -> expression_statement .)
    ID              reduce using rule 106 (statement -> expression_statement .)
    INT_CONST       reduce using rule 106 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 106 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 106 (statement -> expression_statement .)
    STRING          reduce using rule 106 (statement -> expression_statement .)
    SEMI            reduce using rule 106 (statement -> expression_statement .)
    RBRACE          reduce using rule 106 (statement -> expression_statement .)
    ELSE            reduce using rule 106 (statement -> expression_statement .)


state 67

    (107) statement -> compound_statement .

    LBRACE          reduce using rule 107 (statement -> compound_statement .)
    IF              reduce using rule 107 (statement -> compound_statement .)
    WHILE           reduce using rule 107 (statement -> compound_statement .)
    FOR             reduce using rule 107 (statement -> compound_statement .)
    BREAK           reduce using rule 107 (statement -> compound_statement .)
    RETURN          reduce using rule 107 (statement -> compound_statement .)
    ASSERT          reduce using rule 107 (statement -> compound_statement .)
    PRINT           reduce using rule 107 (statement -> compound_statement .)
    READ            reduce using rule 107 (statement -> compound_statement .)
    VOID            reduce using rule 107 (statement -> compound_statement .)
    CHAR            reduce using rule 107 (statement -> compound_statement .)
    INT             reduce using rule 107 (statement -> compound_statement .)
    FLOAT           reduce using rule 107 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 107 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 107 (statement -> compound_statement .)
    LPAREN          reduce using rule 107 (statement -> compound_statement .)
    ADDRESS         reduce using rule 107 (statement -> compound_statement .)
    TIMES           reduce using rule 107 (statement -> compound_statement .)
    PLUS            reduce using rule 107 (statement -> compound_statement .)
    MINUS           reduce using rule 107 (statement -> compound_statement .)
    NOT             reduce using rule 107 (statement -> compound_statement .)
    ID              reduce using rule 107 (statement -> compound_statement .)
    INT_CONST       reduce using rule 107 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 107 (statement -> compound_statement .)
    FLOAT_CONST     reduce using rule 107 (statement -> compound_statement .)
    STRING          reduce using rule 107 (statement -> compound_statement .)
    SEMI            reduce using rule 107 (statement -> compound_statement .)
    RBRACE          reduce using rule 107 (statement -> compound_statement .)
    ELSE            reduce using rule 107 (statement -> compound_statement .)


state 68

    (108) statement -> selection_statement .

    LBRACE          reduce using rule 108 (statement -> selection_statement .)
    IF              reduce using rule 108 (statement -> selection_statement .)
    WHILE           reduce using rule 108 (statement -> selection_statement .)
    FOR             reduce using rule 108 (statement -> selection_statement .)
    BREAK           reduce using rule 108 (statement -> selection_statement .)
    RETURN          reduce using rule 108 (statement -> selection_statement .)
    ASSERT          reduce using rule 108 (statement -> selection_statement .)
    PRINT           reduce using rule 108 (statement -> selection_statement .)
    READ            reduce using rule 108 (statement -> selection_statement .)
    VOID            reduce using rule 108 (statement -> selection_statement .)
    CHAR            reduce using rule 108 (statement -> selection_statement .)
    INT             reduce using rule 108 (statement -> selection_statement .)
    FLOAT           reduce using rule 108 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 108 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 108 (statement -> selection_statement .)
    LPAREN          reduce using rule 108 (statement -> selection_statement .)
    ADDRESS         reduce using rule 108 (statement -> selection_statement .)
    TIMES           reduce using rule 108 (statement -> selection_statement .)
    PLUS            reduce using rule 108 (statement -> selection_statement .)
    MINUS           reduce using rule 108 (statement -> selection_statement .)
    NOT             reduce using rule 108 (statement -> selection_statement .)
    ID              reduce using rule 108 (statement -> selection_statement .)
    INT_CONST       reduce using rule 108 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 108 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 108 (statement -> selection_statement .)
    STRING          reduce using rule 108 (statement -> selection_statement .)
    SEMI            reduce using rule 108 (statement -> selection_statement .)
    RBRACE          reduce using rule 108 (statement -> selection_statement .)
    ELSE            reduce using rule 108 (statement -> selection_statement .)


state 69

    (109) statement -> iteration_statement .

    LBRACE          reduce using rule 109 (statement -> iteration_statement .)
    IF              reduce using rule 109 (statement -> iteration_statement .)
    WHILE           reduce using rule 109 (statement -> iteration_statement .)
    FOR             reduce using rule 109 (statement -> iteration_statement .)
    BREAK           reduce using rule 109 (statement -> iteration_statement .)
    RETURN          reduce using rule 109 (statement -> iteration_statement .)
    ASSERT          reduce using rule 109 (statement -> iteration_statement .)
    PRINT           reduce using rule 109 (statement -> iteration_statement .)
    READ            reduce using rule 109 (statement -> iteration_statement .)
    VOID            reduce using rule 109 (statement -> iteration_statement .)
    CHAR            reduce using rule 109 (statement -> iteration_statement .)
    INT             reduce using rule 109 (statement -> iteration_statement .)
    FLOAT           reduce using rule 109 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 109 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 109 (statement -> iteration_statement .)
    LPAREN          reduce using rule 109 (statement -> iteration_statement .)
    ADDRESS         reduce using rule 109 (statement -> iteration_statement .)
    TIMES           reduce using rule 109 (statement -> iteration_statement .)
    PLUS            reduce using rule 109 (statement -> iteration_statement .)
    MINUS           reduce using rule 109 (statement -> iteration_statement .)
    NOT             reduce using rule 109 (statement -> iteration_statement .)
    ID              reduce using rule 109 (statement -> iteration_statement .)
    INT_CONST       reduce using rule 109 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 109 (statement -> iteration_statement .)
    FLOAT_CONST     reduce using rule 109 (statement -> iteration_statement .)
    STRING          reduce using rule 109 (statement -> iteration_statement .)
    SEMI            reduce using rule 109 (statement -> iteration_statement .)
    RBRACE          reduce using rule 109 (statement -> iteration_statement .)
    ELSE            reduce using rule 109 (statement -> iteration_statement .)


state 70

    (110) statement -> jump_statement .

    LBRACE          reduce using rule 110 (statement -> jump_statement .)
    IF              reduce using rule 110 (statement -> jump_statement .)
    WHILE           reduce using rule 110 (statement -> jump_statement .)
    FOR             reduce using rule 110 (statement -> jump_statement .)
    BREAK           reduce using rule 110 (statement -> jump_statement .)
    RETURN          reduce using rule 110 (statement -> jump_statement .)
    ASSERT          reduce using rule 110 (statement -> jump_statement .)
    PRINT           reduce using rule 110 (statement -> jump_statement .)
    READ            reduce using rule 110 (statement -> jump_statement .)
    VOID            reduce using rule 110 (statement -> jump_statement .)
    CHAR            reduce using rule 110 (statement -> jump_statement .)
    INT             reduce using rule 110 (statement -> jump_statement .)
    FLOAT           reduce using rule 110 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 110 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 110 (statement -> jump_statement .)
    LPAREN          reduce using rule 110 (statement -> jump_statement .)
    ADDRESS         reduce using rule 110 (statement -> jump_statement .)
    TIMES           reduce using rule 110 (statement -> jump_statement .)
    PLUS            reduce using rule 110 (statement -> jump_statement .)
    MINUS           reduce using rule 110 (statement -> jump_statement .)
    NOT             reduce using rule 110 (statement -> jump_statement .)
    ID              reduce using rule 110 (statement -> jump_statement .)
    INT_CONST       reduce using rule 110 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 110 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 110 (statement -> jump_statement .)
    STRING          reduce using rule 110 (statement -> jump_statement .)
    SEMI            reduce using rule 110 (statement -> jump_statement .)
    RBRACE          reduce using rule 110 (statement -> jump_statement .)
    ELSE            reduce using rule 110 (statement -> jump_statement .)


state 71

    (111) statement -> assert_statement .

    LBRACE          reduce using rule 111 (statement -> assert_statement .)
    IF              reduce using rule 111 (statement -> assert_statement .)
    WHILE           reduce using rule 111 (statement -> assert_statement .)
    FOR             reduce using rule 111 (statement -> assert_statement .)
    BREAK           reduce using rule 111 (statement -> assert_statement .)
    RETURN          reduce using rule 111 (statement -> assert_statement .)
    ASSERT          reduce using rule 111 (statement -> assert_statement .)
    PRINT           reduce using rule 111 (statement -> assert_statement .)
    READ            reduce using rule 111 (statement -> assert_statement .)
    VOID            reduce using rule 111 (statement -> assert_statement .)
    CHAR            reduce using rule 111 (statement -> assert_statement .)
    INT             reduce using rule 111 (statement -> assert_statement .)
    FLOAT           reduce using rule 111 (statement -> assert_statement .)
    PLUSPLUS        reduce using rule 111 (statement -> assert_statement .)
    MINUSMINUS      reduce using rule 111 (statement -> assert_statement .)
    LPAREN          reduce using rule 111 (statement -> assert_statement .)
    ADDRESS         reduce using rule 111 (statement -> assert_statement .)
    TIMES           reduce using rule 111 (statement -> assert_statement .)
    PLUS            reduce using rule 111 (statement -> assert_statement .)
    MINUS           reduce using rule 111 (statement -> assert_statement .)
    NOT             reduce using rule 111 (statement -> assert_statement .)
    ID              reduce using rule 111 (statement -> assert_statement .)
    INT_CONST       reduce using rule 111 (statement -> assert_statement .)
    CHAR_CONST      reduce using rule 111 (statement -> assert_statement .)
    FLOAT_CONST     reduce using rule 111 (statement -> assert_statement .)
    STRING          reduce using rule 111 (statement -> assert_statement .)
    SEMI            reduce using rule 111 (statement -> assert_statement .)
    RBRACE          reduce using rule 111 (statement -> assert_statement .)
    ELSE            reduce using rule 111 (statement -> assert_statement .)


state 72

    (112) statement -> print_statement .

    LBRACE          reduce using rule 112 (statement -> print_statement .)
    IF              reduce using rule 112 (statement -> print_statement .)
    WHILE           reduce using rule 112 (statement -> print_statement .)
    FOR             reduce using rule 112 (statement -> print_statement .)
    BREAK           reduce using rule 112 (statement -> print_statement .)
    RETURN          reduce using rule 112 (statement -> print_statement .)
    ASSERT          reduce using rule 112 (statement -> print_statement .)
    PRINT           reduce using rule 112 (statement -> print_statement .)
    READ            reduce using rule 112 (statement -> print_statement .)
    VOID            reduce using rule 112 (statement -> print_statement .)
    CHAR            reduce using rule 112 (statement -> print_statement .)
    INT             reduce using rule 112 (statement -> print_statement .)
    FLOAT           reduce using rule 112 (statement -> print_statement .)
    PLUSPLUS        reduce using rule 112 (statement -> print_statement .)
    MINUSMINUS      reduce using rule 112 (statement -> print_statement .)
    LPAREN          reduce using rule 112 (statement -> print_statement .)
    ADDRESS         reduce using rule 112 (statement -> print_statement .)
    TIMES           reduce using rule 112 (statement -> print_statement .)
    PLUS            reduce using rule 112 (statement -> print_statement .)
    MINUS           reduce using rule 112 (statement -> print_statement .)
    NOT             reduce using rule 112 (statement -> print_statement .)
    ID              reduce using rule 112 (statement -> print_statement .)
    INT_CONST       reduce using rule 112 (statement -> print_statement .)
    CHAR_CONST      reduce using rule 112 (statement -> print_statement .)
    FLOAT_CONST     reduce using rule 112 (statement -> print_statement .)
    STRING          reduce using rule 112 (statement -> print_statement .)
    SEMI            reduce using rule 112 (statement -> print_statement .)
    RBRACE          reduce using rule 112 (statement -> print_statement .)
    ELSE            reduce using rule 112 (statement -> print_statement .)


state 73

    (113) statement -> read_statement .

    LBRACE          reduce using rule 113 (statement -> read_statement .)
    IF              reduce using rule 113 (statement -> read_statement .)
    WHILE           reduce using rule 113 (statement -> read_statement .)
    FOR             reduce using rule 113 (statement -> read_statement .)
    BREAK           reduce using rule 113 (statement -> read_statement .)
    RETURN          reduce using rule 113 (statement -> read_statement .)
    ASSERT          reduce using rule 113 (statement -> read_statement .)
    PRINT           reduce using rule 113 (statement -> read_statement .)
    READ            reduce using rule 113 (statement -> read_statement .)
    VOID            reduce using rule 113 (statement -> read_statement .)
    CHAR            reduce using rule 113 (statement -> read_statement .)
    INT             reduce using rule 113 (statement -> read_statement .)
    FLOAT           reduce using rule 113 (statement -> read_statement .)
    PLUSPLUS        reduce using rule 113 (statement -> read_statement .)
    MINUSMINUS      reduce using rule 113 (statement -> read_statement .)
    LPAREN          reduce using rule 113 (statement -> read_statement .)
    ADDRESS         reduce using rule 113 (statement -> read_statement .)
    TIMES           reduce using rule 113 (statement -> read_statement .)
    PLUS            reduce using rule 113 (statement -> read_statement .)
    MINUS           reduce using rule 113 (statement -> read_statement .)
    NOT             reduce using rule 113 (statement -> read_statement .)
    ID              reduce using rule 113 (statement -> read_statement .)
    INT_CONST       reduce using rule 113 (statement -> read_statement .)
    CHAR_CONST      reduce using rule 113 (statement -> read_statement .)
    FLOAT_CONST     reduce using rule 113 (statement -> read_statement .)
    STRING          reduce using rule 113 (statement -> read_statement .)
    SEMI            reduce using rule 113 (statement -> read_statement .)
    RBRACE          reduce using rule 113 (statement -> read_statement .)
    ELSE            reduce using rule 113 (statement -> read_statement .)


state 74

    (114) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 136


state 75

    (117) selection_statement -> IF . LPAREN expression RPAREN statement
    (118) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 137


state 76

    (115) expression_opt -> expression .
    (67) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 115 (expression_opt -> expression .)
    RPAREN          reduce using rule 115 (expression_opt -> expression .)
    COMMA           shift and go to state 138


state 77

    (119) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 139


state 78

    (120) iteration_statement -> FOR . LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (121) iteration_statement -> FOR . LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement

    LPAREN          shift and go to state 140


state 79

    (122) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 141


state 80

    (123) jump_statement -> RETURN . expression SEMI
    (124) jump_statement -> RETURN . SEMI
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    SEMI            shift and go to state 143
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    expression                     shift and go to state 142
    assignment_expression          shift and go to state 85
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 81

    (125) assert_statement -> ASSERT . expression SEMI
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    expression                     shift and go to state 144
    assignment_expression          shift and go to state 85
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 82

    (126) print_statement -> PRINT . LPAREN expression_opt RPAREN SEMI

    LPAREN          shift and go to state 145


state 83

    (127) read_statement -> READ . LPAREN argument_expression RPAREN SEMI

    LPAREN          shift and go to state 146


state 84

    (86) decl_body -> type_specifier_opt . init_declarator_list_opt
    (88) init_declarator_list_opt -> . init_declarator_list
    (89) init_declarator_list_opt -> . empty
    (90) init_declarator_list -> . init_declarator
    (91) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (128) empty -> .
    (92) init_declarator -> . declarator
    (93) init_declarator -> . declarator EQUALS initializer
    (15) declarator -> . pointer direct_declarator
    (16) declarator -> . direct_declarator
    (17) pointer -> . TIMES
    (18) pointer -> . TIMES pointer
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (25) direct_declarator -> . identifier
    (30) identifier -> . ID

    SEMI            reduce using rule 128 (empty -> .)
    TIMES           shift and go to state 21
    LPAREN          shift and go to state 22
    ID              shift and go to state 25

    init_declarator_list_opt       shift and go to state 16
    init_declarator_list           shift and go to state 19
    empty                          shift and go to state 20
    init_declarator                shift and go to state 24
    declarator                     shift and go to state 99
    pointer                        shift and go to state 17
    direct_declarator              shift and go to state 18
    identifier                     shift and go to state 23

state 85

    (66) expression -> assignment_expression .

    COMMA           reduce using rule 66 (expression -> assignment_expression .)
    SEMI            reduce using rule 66 (expression -> assignment_expression .)
    RPAREN          reduce using rule 66 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 66 (expression -> assignment_expression .)


state 86

    (22) direct_declarator -> direct_declarator LBRACKET constant_expression_opt . RBRACKET

    RBRACKET        shift and go to state 147


state 87

    (19) constant_expression_opt -> constant_expression .

    RBRACKET        reduce using rule 19 (constant_expression_opt -> constant_expression .)


state 88

    (20) constant_expression_opt -> empty .

    RBRACKET        reduce using rule 20 (constant_expression_opt -> empty .)


state 89

    (31) constant_expression -> binary_expression .
    (33) binary_expression -> binary_expression . TIMES binary_expression
    (34) binary_expression -> binary_expression . DIV binary_expression
    (35) binary_expression -> binary_expression . MOD binary_expression
    (36) binary_expression -> binary_expression . PLUS binary_expression
    (37) binary_expression -> binary_expression . MINUS binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . LTE binary_expression
    (40) binary_expression -> binary_expression . GT binary_expression
    (41) binary_expression -> binary_expression . GTE binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NOT_EQUAL binary_expression
    (44) binary_expression -> binary_expression . AND binary_expression
    (45) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 31 (constant_expression -> binary_expression .)
    TIMES           shift and go to state 103
    DIV             shift and go to state 104
    MOD             shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    LT              shift and go to state 108
    LTE             shift and go to state 109
    GT              shift and go to state 110
    GTE             shift and go to state 111
    EQ              shift and go to state 112
    NOT_EQUAL       shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 90

    (46) cast_expression -> unary_expression .

    TIMES           reduce using rule 46 (cast_expression -> unary_expression .)
    DIV             reduce using rule 46 (cast_expression -> unary_expression .)
    MOD             reduce using rule 46 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 46 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 46 (cast_expression -> unary_expression .)
    LT              reduce using rule 46 (cast_expression -> unary_expression .)
    LTE             reduce using rule 46 (cast_expression -> unary_expression .)
    GT              reduce using rule 46 (cast_expression -> unary_expression .)
    GTE             reduce using rule 46 (cast_expression -> unary_expression .)
    EQ              reduce using rule 46 (cast_expression -> unary_expression .)
    NOT_EQUAL       reduce using rule 46 (cast_expression -> unary_expression .)
    AND             reduce using rule 46 (cast_expression -> unary_expression .)
    OR              reduce using rule 46 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 46 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 46 (cast_expression -> unary_expression .)
    TIMES_EQUALS    reduce using rule 46 (cast_expression -> unary_expression .)
    DIV_EQUALS      reduce using rule 46 (cast_expression -> unary_expression .)
    MOD_EQUALS      reduce using rule 46 (cast_expression -> unary_expression .)
    PLUS_EQUALS     reduce using rule 46 (cast_expression -> unary_expression .)
    MINUS_EQUALS    reduce using rule 46 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 46 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 46 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 46 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 46 (cast_expression -> unary_expression .)


state 91

    (23) direct_declarator -> direct_declarator LPAREN parameter_list . RPAREN
    (84) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          shift and go to state 148
    COMMA           shift and go to state 149


state 92

    (24) direct_declarator -> direct_declarator LPAREN identifier_list_opt . RPAREN

    RPAREN          shift and go to state 150


state 93

    (83) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 83 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 83 (parameter_list -> parameter_declaration .)


state 94

    (26) identifier_list_opt -> identifier_list .
    (29) identifier_list -> identifier_list . identifier
    (30) identifier -> . ID

    RPAREN          reduce using rule 26 (identifier_list_opt -> identifier_list .)
    ID              shift and go to state 25

    identifier                     shift and go to state 151

state 95

    (27) identifier_list_opt -> empty .

    RPAREN          reduce using rule 27 (identifier_list_opt -> empty .)


state 96

    (85) parameter_declaration -> type_specifier . declarator
    (15) declarator -> . pointer direct_declarator
    (16) declarator -> . direct_declarator
    (17) pointer -> . TIMES
    (18) pointer -> . TIMES pointer
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (25) direct_declarator -> . identifier
    (30) identifier -> . ID

    TIMES           shift and go to state 21
    LPAREN          shift and go to state 22
    ID              shift and go to state 25

    declarator                     shift and go to state 152
    pointer                        shift and go to state 17
    direct_declarator              shift and go to state 18
    identifier                     shift and go to state 23

state 97

    (28) identifier_list -> identifier .

    ID              reduce using rule 28 (identifier_list -> identifier .)
    RPAREN          reduce using rule 28 (identifier_list -> identifier .)


state 98

    (91) init_declarator_list -> init_declarator_list COMMA init_declarator .

    COMMA           reduce using rule 91 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 91 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 99

    (92) init_declarator -> declarator .
    (93) init_declarator -> declarator . EQUALS initializer

    COMMA           reduce using rule 92 (init_declarator -> declarator .)
    SEMI            reduce using rule 92 (init_declarator -> declarator .)
    EQUALS          shift and go to state 28


state 100

    (21) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)


state 101

    (95) initializer -> LBRACE initializer_list . RBRACE
    (96) initializer -> LBRACE initializer_list . COMMA RBRACE
    (98) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 153
    COMMA           shift and go to state 154


state 102

    (97) initializer_list -> initializer .

    RBRACE          reduce using rule 97 (initializer_list -> initializer .)
    COMMA           reduce using rule 97 (initializer_list -> initializer .)


state 103

    (33) binary_expression -> binary_expression TIMES . binary_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LPAREN          shift and go to state 49
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    binary_expression              shift and go to state 155
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 104

    (34) binary_expression -> binary_expression DIV . binary_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LPAREN          shift and go to state 49
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    binary_expression              shift and go to state 156
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 105

    (35) binary_expression -> binary_expression MOD . binary_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LPAREN          shift and go to state 49
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    binary_expression              shift and go to state 157
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 106

    (36) binary_expression -> binary_expression PLUS . binary_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LPAREN          shift and go to state 49
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    binary_expression              shift and go to state 158
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 107

    (37) binary_expression -> binary_expression MINUS . binary_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LPAREN          shift and go to state 49
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    binary_expression              shift and go to state 159
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 108

    (38) binary_expression -> binary_expression LT . binary_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LPAREN          shift and go to state 49
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    binary_expression              shift and go to state 160
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 109

    (39) binary_expression -> binary_expression LTE . binary_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LPAREN          shift and go to state 49
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    binary_expression              shift and go to state 161
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 110

    (40) binary_expression -> binary_expression GT . binary_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LPAREN          shift and go to state 49
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    binary_expression              shift and go to state 162
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 111

    (41) binary_expression -> binary_expression GTE . binary_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LPAREN          shift and go to state 49
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    binary_expression              shift and go to state 163
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 112

    (42) binary_expression -> binary_expression EQ . binary_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LPAREN          shift and go to state 49
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    binary_expression              shift and go to state 164
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 113

    (43) binary_expression -> binary_expression NOT_EQUAL . binary_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LPAREN          shift and go to state 49
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    binary_expression              shift and go to state 165
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 114

    (44) binary_expression -> binary_expression AND . binary_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LPAREN          shift and go to state 49
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    binary_expression              shift and go to state 166
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 115

    (45) binary_expression -> binary_expression OR . binary_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LPAREN          shift and go to state 49
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    binary_expression              shift and go to state 167
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 116

    (71) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    unary_expression               shift and go to state 40
    assignment_expression          shift and go to state 168
    binary_expression              shift and go to state 39
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 117

    (72) assignment_operator -> EQUALS .

    PLUSPLUS        reduce using rule 72 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 72 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 72 (assignment_operator -> EQUALS .)
    ADDRESS         reduce using rule 72 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 72 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 72 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 72 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 72 (assignment_operator -> EQUALS .)
    ID              reduce using rule 72 (assignment_operator -> EQUALS .)
    INT_CONST       reduce using rule 72 (assignment_operator -> EQUALS .)
    CHAR_CONST      reduce using rule 72 (assignment_operator -> EQUALS .)
    FLOAT_CONST     reduce using rule 72 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 72 (assignment_operator -> EQUALS .)


state 118

    (73) assignment_operator -> TIMES_EQUALS .

    PLUSPLUS        reduce using rule 73 (assignment_operator -> TIMES_EQUALS .)
    MINUSMINUS      reduce using rule 73 (assignment_operator -> TIMES_EQUALS .)
    LPAREN          reduce using rule 73 (assignment_operator -> TIMES_EQUALS .)
    ADDRESS         reduce using rule 73 (assignment_operator -> TIMES_EQUALS .)
    TIMES           reduce using rule 73 (assignment_operator -> TIMES_EQUALS .)
    PLUS            reduce using rule 73 (assignment_operator -> TIMES_EQUALS .)
    MINUS           reduce using rule 73 (assignment_operator -> TIMES_EQUALS .)
    NOT             reduce using rule 73 (assignment_operator -> TIMES_EQUALS .)
    ID              reduce using rule 73 (assignment_operator -> TIMES_EQUALS .)
    INT_CONST       reduce using rule 73 (assignment_operator -> TIMES_EQUALS .)
    CHAR_CONST      reduce using rule 73 (assignment_operator -> TIMES_EQUALS .)
    FLOAT_CONST     reduce using rule 73 (assignment_operator -> TIMES_EQUALS .)
    STRING          reduce using rule 73 (assignment_operator -> TIMES_EQUALS .)


state 119

    (74) assignment_operator -> DIV_EQUALS .

    PLUSPLUS        reduce using rule 74 (assignment_operator -> DIV_EQUALS .)
    MINUSMINUS      reduce using rule 74 (assignment_operator -> DIV_EQUALS .)
    LPAREN          reduce using rule 74 (assignment_operator -> DIV_EQUALS .)
    ADDRESS         reduce using rule 74 (assignment_operator -> DIV_EQUALS .)
    TIMES           reduce using rule 74 (assignment_operator -> DIV_EQUALS .)
    PLUS            reduce using rule 74 (assignment_operator -> DIV_EQUALS .)
    MINUS           reduce using rule 74 (assignment_operator -> DIV_EQUALS .)
    NOT             reduce using rule 74 (assignment_operator -> DIV_EQUALS .)
    ID              reduce using rule 74 (assignment_operator -> DIV_EQUALS .)
    INT_CONST       reduce using rule 74 (assignment_operator -> DIV_EQUALS .)
    CHAR_CONST      reduce using rule 74 (assignment_operator -> DIV_EQUALS .)
    FLOAT_CONST     reduce using rule 74 (assignment_operator -> DIV_EQUALS .)
    STRING          reduce using rule 74 (assignment_operator -> DIV_EQUALS .)


state 120

    (75) assignment_operator -> MOD_EQUALS .

    PLUSPLUS        reduce using rule 75 (assignment_operator -> MOD_EQUALS .)
    MINUSMINUS      reduce using rule 75 (assignment_operator -> MOD_EQUALS .)
    LPAREN          reduce using rule 75 (assignment_operator -> MOD_EQUALS .)
    ADDRESS         reduce using rule 75 (assignment_operator -> MOD_EQUALS .)
    TIMES           reduce using rule 75 (assignment_operator -> MOD_EQUALS .)
    PLUS            reduce using rule 75 (assignment_operator -> MOD_EQUALS .)
    MINUS           reduce using rule 75 (assignment_operator -> MOD_EQUALS .)
    NOT             reduce using rule 75 (assignment_operator -> MOD_EQUALS .)
    ID              reduce using rule 75 (assignment_operator -> MOD_EQUALS .)
    INT_CONST       reduce using rule 75 (assignment_operator -> MOD_EQUALS .)
    CHAR_CONST      reduce using rule 75 (assignment_operator -> MOD_EQUALS .)
    FLOAT_CONST     reduce using rule 75 (assignment_operator -> MOD_EQUALS .)
    STRING          reduce using rule 75 (assignment_operator -> MOD_EQUALS .)


state 121

    (76) assignment_operator -> PLUS_EQUALS .

    PLUSPLUS        reduce using rule 76 (assignment_operator -> PLUS_EQUALS .)
    MINUSMINUS      reduce using rule 76 (assignment_operator -> PLUS_EQUALS .)
    LPAREN          reduce using rule 76 (assignment_operator -> PLUS_EQUALS .)
    ADDRESS         reduce using rule 76 (assignment_operator -> PLUS_EQUALS .)
    TIMES           reduce using rule 76 (assignment_operator -> PLUS_EQUALS .)
    PLUS            reduce using rule 76 (assignment_operator -> PLUS_EQUALS .)
    MINUS           reduce using rule 76 (assignment_operator -> PLUS_EQUALS .)
    NOT             reduce using rule 76 (assignment_operator -> PLUS_EQUALS .)
    ID              reduce using rule 76 (assignment_operator -> PLUS_EQUALS .)
    INT_CONST       reduce using rule 76 (assignment_operator -> PLUS_EQUALS .)
    CHAR_CONST      reduce using rule 76 (assignment_operator -> PLUS_EQUALS .)
    FLOAT_CONST     reduce using rule 76 (assignment_operator -> PLUS_EQUALS .)
    STRING          reduce using rule 76 (assignment_operator -> PLUS_EQUALS .)


state 122

    (77) assignment_operator -> MINUS_EQUALS .

    PLUSPLUS        reduce using rule 77 (assignment_operator -> MINUS_EQUALS .)
    MINUSMINUS      reduce using rule 77 (assignment_operator -> MINUS_EQUALS .)
    LPAREN          reduce using rule 77 (assignment_operator -> MINUS_EQUALS .)
    ADDRESS         reduce using rule 77 (assignment_operator -> MINUS_EQUALS .)
    TIMES           reduce using rule 77 (assignment_operator -> MINUS_EQUALS .)
    PLUS            reduce using rule 77 (assignment_operator -> MINUS_EQUALS .)
    MINUS           reduce using rule 77 (assignment_operator -> MINUS_EQUALS .)
    NOT             reduce using rule 77 (assignment_operator -> MINUS_EQUALS .)
    ID              reduce using rule 77 (assignment_operator -> MINUS_EQUALS .)
    INT_CONST       reduce using rule 77 (assignment_operator -> MINUS_EQUALS .)
    CHAR_CONST      reduce using rule 77 (assignment_operator -> MINUS_EQUALS .)
    FLOAT_CONST     reduce using rule 77 (assignment_operator -> MINUS_EQUALS .)
    STRING          reduce using rule 77 (assignment_operator -> MINUS_EQUALS .)


state 123

    (53) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    postfix_expression             shift and go to state 45
    expression                     shift and go to state 169
    assignment_expression          shift and go to state 85
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 124

    (54) postfix_expression -> postfix_expression LPAREN . argument_expression RPAREN
    (55) postfix_expression -> postfix_expression LPAREN . RPAREN
    (68) argument_expression -> . assignment_expression
    (69) argument_expression -> . argument_expression COMMA assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    RPAREN          shift and go to state 171
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    postfix_expression             shift and go to state 45
    argument_expression            shift and go to state 170
    assignment_expression          shift and go to state 172
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 125

    (56) postfix_expression -> postfix_expression PLUSPLUS .

    LBRACKET        reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES_EQUALS    reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIV_EQUALS      reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD_EQUALS      reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS_EQUALS     reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS_EQUALS    reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIV             reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    LTE             reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    GT              reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    GTE             reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    NOT_EQUAL       reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 56 (postfix_expression -> postfix_expression PLUSPLUS .)


state 126

    (57) postfix_expression -> postfix_expression MINUSMINUS .

    LBRACKET        reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES_EQUALS    reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIV_EQUALS      reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD_EQUALS      reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS_EQUALS     reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS_EQUALS    reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIV             reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    LTE             reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    GT              reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    GTE             reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    NOT_EQUAL       reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 57 (postfix_expression -> postfix_expression MINUSMINUS .)


state 127

    (49) unary_expression -> PLUSPLUS unary_expression .

    EQUALS          reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    TIMES_EQUALS    reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    DIV_EQUALS      reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    MOD_EQUALS      reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS_EQUALS     reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS_EQUALS    reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    TIMES           reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    DIV             reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    LTE             reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    GT              reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    GTE             reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    NOT_EQUAL       reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 49 (unary_expression -> PLUSPLUS unary_expression .)


state 128

    (62) primary_expression -> LPAREN . expression RPAREN
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    expression                     shift and go to state 132
    assignment_expression          shift and go to state 85
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 129

    (50) unary_expression -> MINUSMINUS unary_expression .

    EQUALS          reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    TIMES_EQUALS    reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    DIV_EQUALS      reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    MOD_EQUALS      reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS_EQUALS     reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS_EQUALS    reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    TIMES           reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    DIV             reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    LTE             reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    GT              reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    GTE             reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    NOT_EQUAL       reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 50 (unary_expression -> MINUSMINUS unary_expression .)


state 130

    (51) unary_expression -> unary_operator cast_expression .

    EQUALS          reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    TIMES_EQUALS    reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    DIV_EQUALS      reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    MOD_EQUALS      reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    PLUS_EQUALS     reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    MINUS_EQUALS    reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    DIV             reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    LTE             reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    GTE             reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    NOT_EQUAL       reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 51 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 51 (unary_expression -> unary_operator cast_expression .)


state 131

    (47) cast_expression -> LPAREN type_specifier . RPAREN cast_expression

    RPAREN          shift and go to state 173


state 132

    (62) primary_expression -> LPAREN expression . RPAREN
    (67) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 174
    COMMA           shift and go to state 138


state 133

    (99) compound_statement -> LBRACE block_item_list_opt RBRACE .

    VOID            reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    CHAR            reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    INT             reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    FLOAT           reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    TIMES           reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    LPAREN          reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    ID              reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    SEMI            reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    $end            reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    LBRACE          reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    IF              reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    WHILE           reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    FOR             reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    BREAK           reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    RETURN          reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    ASSERT          reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    PRINT           reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    READ            reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    PLUSPLUS        reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    MINUSMINUS      reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    ADDRESS         reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    PLUS            reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    MINUS           reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    NOT             reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    INT_CONST       reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    CHAR_CONST      reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    FLOAT_CONST     reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    STRING          reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    RBRACE          reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    ELSE            reduce using rule 99 (compound_statement -> LBRACE block_item_list_opt RBRACE .)


state 134

    (103) block_item_list -> block_item_list block_item .

    LBRACE          reduce using rule 103 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 103 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 103 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 103 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 103 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 103 (block_item_list -> block_item_list block_item .)
    ASSERT          reduce using rule 103 (block_item_list -> block_item_list block_item .)
    PRINT           reduce using rule 103 (block_item_list -> block_item_list block_item .)
    READ            reduce using rule 103 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 103 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 103 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 103 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 103 (block_item_list -> block_item_list block_item .)
    PLUSPLUS        reduce using rule 103 (block_item_list -> block_item_list block_item .)
    MINUSMINUS      reduce using rule 103 (block_item_list -> block_item_list block_item .)
    LPAREN          reduce using rule 103 (block_item_list -> block_item_list block_item .)
    ADDRESS         reduce using rule 103 (block_item_list -> block_item_list block_item .)
    TIMES           reduce using rule 103 (block_item_list -> block_item_list block_item .)
    PLUS            reduce using rule 103 (block_item_list -> block_item_list block_item .)
    MINUS           reduce using rule 103 (block_item_list -> block_item_list block_item .)
    NOT             reduce using rule 103 (block_item_list -> block_item_list block_item .)
    ID              reduce using rule 103 (block_item_list -> block_item_list block_item .)
    INT_CONST       reduce using rule 103 (block_item_list -> block_item_list block_item .)
    CHAR_CONST      reduce using rule 103 (block_item_list -> block_item_list block_item .)
    FLOAT_CONST     reduce using rule 103 (block_item_list -> block_item_list block_item .)
    STRING          reduce using rule 103 (block_item_list -> block_item_list block_item .)
    SEMI            reduce using rule 103 (block_item_list -> block_item_list block_item .)
    RBRACE          reduce using rule 103 (block_item_list -> block_item_list block_item .)


state 135

    (116) expression_opt -> empty .
    (8) type_specifier_opt -> empty .

  ! reduce/reduce conflict for SEMI resolved using rule 8 (type_specifier_opt -> empty .)
    TIMES           reduce using rule 8 (type_specifier_opt -> empty .)
    LPAREN          reduce using rule 8 (type_specifier_opt -> empty .)
    ID              reduce using rule 8 (type_specifier_opt -> empty .)
    SEMI            reduce using rule 8 (type_specifier_opt -> empty .)

  ! SEMI            [ reduce using rule 116 (expression_opt -> empty .) ]


state 136

    (114) expression_statement -> expression_opt SEMI .

    LBRACE          reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    IF              reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    ASSERT          reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    PRINT           reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    READ            reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    VOID            reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    CHAR            reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    INT             reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    FLOAT           reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    PLUSPLUS        reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    MINUSMINUS      reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    ADDRESS         reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    TIMES           reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    PLUS            reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    MINUS           reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    NOT             reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    ID              reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    INT_CONST       reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    CHAR_CONST      reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    FLOAT_CONST     reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    STRING          reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    RBRACE          reduce using rule 114 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 114 (expression_statement -> expression_opt SEMI .)


state 137

    (117) selection_statement -> IF LPAREN . expression RPAREN statement
    (118) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    expression                     shift and go to state 175
    assignment_expression          shift and go to state 85
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 138

    (67) expression -> expression COMMA . assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    assignment_expression          shift and go to state 176
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 139

    (119) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    expression                     shift and go to state 177
    assignment_expression          shift and go to state 85
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 140

    (120) iteration_statement -> FOR LPAREN . declaration expression_opt SEMI expression_opt RPAREN statement
    (121) iteration_statement -> FOR LPAREN . expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (87) declaration -> . decl_body SEMI
    (115) expression_opt -> . expression
    (116) expression_opt -> . empty
    (86) decl_body -> . type_specifier_opt init_declarator_list_opt
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (7) type_specifier_opt -> . type_specifier
    (8) type_specifier_opt -> . empty
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (11) type_specifier -> . VOID
    (12) type_specifier -> . CHAR
    (13) type_specifier -> . INT
    (14) type_specifier -> . FLOAT
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    SEMI            reduce using rule 128 (empty -> .)
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

  ! TIMES           [ reduce using rule 128 (empty -> .) ]
  ! LPAREN          [ reduce using rule 128 (empty -> .) ]
  ! ID              [ reduce using rule 128 (empty -> .) ]

    declaration                    shift and go to state 178
    expression_opt                 shift and go to state 179
    decl_body                      shift and go to state 7
    expression                     shift and go to state 76
    empty                          shift and go to state 135
    type_specifier_opt             shift and go to state 84
    assignment_expression          shift and go to state 85
    type_specifier                 shift and go to state 8
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 141

    (122) jump_statement -> BREAK SEMI .

    LBRACE          reduce using rule 122 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 122 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 122 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 122 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 122 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 122 (jump_statement -> BREAK SEMI .)
    ASSERT          reduce using rule 122 (jump_statement -> BREAK SEMI .)
    PRINT           reduce using rule 122 (jump_statement -> BREAK SEMI .)
    READ            reduce using rule 122 (jump_statement -> BREAK SEMI .)
    VOID            reduce using rule 122 (jump_statement -> BREAK SEMI .)
    CHAR            reduce using rule 122 (jump_statement -> BREAK SEMI .)
    INT             reduce using rule 122 (jump_statement -> BREAK SEMI .)
    FLOAT           reduce using rule 122 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 122 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 122 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 122 (jump_statement -> BREAK SEMI .)
    ADDRESS         reduce using rule 122 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 122 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 122 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 122 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 122 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 122 (jump_statement -> BREAK SEMI .)
    INT_CONST       reduce using rule 122 (jump_statement -> BREAK SEMI .)
    CHAR_CONST      reduce using rule 122 (jump_statement -> BREAK SEMI .)
    FLOAT_CONST     reduce using rule 122 (jump_statement -> BREAK SEMI .)
    STRING          reduce using rule 122 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 122 (jump_statement -> BREAK SEMI .)
    RBRACE          reduce using rule 122 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 122 (jump_statement -> BREAK SEMI .)


state 142

    (123) jump_statement -> RETURN expression . SEMI
    (67) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 180
    COMMA           shift and go to state 138


state 143

    (124) jump_statement -> RETURN SEMI .

    LBRACE          reduce using rule 124 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 124 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 124 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 124 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 124 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 124 (jump_statement -> RETURN SEMI .)
    ASSERT          reduce using rule 124 (jump_statement -> RETURN SEMI .)
    PRINT           reduce using rule 124 (jump_statement -> RETURN SEMI .)
    READ            reduce using rule 124 (jump_statement -> RETURN SEMI .)
    VOID            reduce using rule 124 (jump_statement -> RETURN SEMI .)
    CHAR            reduce using rule 124 (jump_statement -> RETURN SEMI .)
    INT             reduce using rule 124 (jump_statement -> RETURN SEMI .)
    FLOAT           reduce using rule 124 (jump_statement -> RETURN SEMI .)
    PLUSPLUS        reduce using rule 124 (jump_statement -> RETURN SEMI .)
    MINUSMINUS      reduce using rule 124 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 124 (jump_statement -> RETURN SEMI .)
    ADDRESS         reduce using rule 124 (jump_statement -> RETURN SEMI .)
    TIMES           reduce using rule 124 (jump_statement -> RETURN SEMI .)
    PLUS            reduce using rule 124 (jump_statement -> RETURN SEMI .)
    MINUS           reduce using rule 124 (jump_statement -> RETURN SEMI .)
    NOT             reduce using rule 124 (jump_statement -> RETURN SEMI .)
    ID              reduce using rule 124 (jump_statement -> RETURN SEMI .)
    INT_CONST       reduce using rule 124 (jump_statement -> RETURN SEMI .)
    CHAR_CONST      reduce using rule 124 (jump_statement -> RETURN SEMI .)
    FLOAT_CONST     reduce using rule 124 (jump_statement -> RETURN SEMI .)
    STRING          reduce using rule 124 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 124 (jump_statement -> RETURN SEMI .)
    RBRACE          reduce using rule 124 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 124 (jump_statement -> RETURN SEMI .)


state 144

    (125) assert_statement -> ASSERT expression . SEMI
    (67) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 181
    COMMA           shift and go to state 138


state 145

    (126) print_statement -> PRINT LPAREN . expression_opt RPAREN SEMI
    (115) expression_opt -> . expression
    (116) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    RPAREN          reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    expression_opt                 shift and go to state 182
    expression                     shift and go to state 76
    empty                          shift and go to state 183
    assignment_expression          shift and go to state 85
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 146

    (127) read_statement -> READ LPAREN . argument_expression RPAREN SEMI
    (68) argument_expression -> . assignment_expression
    (69) argument_expression -> . argument_expression COMMA assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    argument_expression            shift and go to state 184
    assignment_expression          shift and go to state 172
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 147

    (22) direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .

    LBRACKET        reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LPAREN          reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    EQUALS          reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LBRACE          reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    COMMA           reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    SEMI            reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    RPAREN          reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)


state 148

    (23) direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .

    LBRACKET        reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LPAREN          reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    EQUALS          reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LBRACE          reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)


state 149

    (84) parameter_list -> parameter_list COMMA . parameter_declaration
    (85) parameter_declaration -> . type_specifier declarator
    (11) type_specifier -> . VOID
    (12) type_specifier -> . CHAR
    (13) type_specifier -> . INT
    (14) type_specifier -> . FLOAT

    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    parameter_declaration          shift and go to state 185
    type_specifier                 shift and go to state 96

state 150

    (24) direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .

    LBRACKET        reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LPAREN          reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    EQUALS          reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LBRACE          reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    COMMA           reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    SEMI            reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)


state 151

    (29) identifier_list -> identifier_list identifier .

    ID              reduce using rule 29 (identifier_list -> identifier_list identifier .)
    RPAREN          reduce using rule 29 (identifier_list -> identifier_list identifier .)


state 152

    (85) parameter_declaration -> type_specifier declarator .

    RPAREN          reduce using rule 85 (parameter_declaration -> type_specifier declarator .)
    COMMA           reduce using rule 85 (parameter_declaration -> type_specifier declarator .)


state 153

    (95) initializer -> LBRACE initializer_list RBRACE .

    COMMA           reduce using rule 95 (initializer -> LBRACE initializer_list RBRACE .)
    SEMI            reduce using rule 95 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 95 (initializer -> LBRACE initializer_list RBRACE .)


state 154

    (96) initializer -> LBRACE initializer_list COMMA . RBRACE
    (98) initializer_list -> initializer_list COMMA . initializer
    (94) initializer -> . assignment_expression
    (95) initializer -> . LBRACE initializer_list RBRACE
    (96) initializer -> . LBRACE initializer_list COMMA RBRACE
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    RBRACE          shift and go to state 186
    LBRACE          shift and go to state 38
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    initializer                    shift and go to state 187
    assignment_expression          shift and go to state 37
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 155

    (33) binary_expression -> binary_expression TIMES binary_expression .
    (33) binary_expression -> binary_expression . TIMES binary_expression
    (34) binary_expression -> binary_expression . DIV binary_expression
    (35) binary_expression -> binary_expression . MOD binary_expression
    (36) binary_expression -> binary_expression . PLUS binary_expression
    (37) binary_expression -> binary_expression . MINUS binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . LTE binary_expression
    (40) binary_expression -> binary_expression . GT binary_expression
    (41) binary_expression -> binary_expression . GTE binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NOT_EQUAL binary_expression
    (44) binary_expression -> binary_expression . AND binary_expression
    (45) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    DIV             reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    LTE             reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    GT              reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    GTE             reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    EQ              reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    NOT_EQUAL       reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)

  ! TIMES           [ shift and go to state 103 ]
  ! DIV             [ shift and go to state 104 ]
  ! MOD             [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! LT              [ shift and go to state 108 ]
  ! LTE             [ shift and go to state 109 ]
  ! GT              [ shift and go to state 110 ]
  ! GTE             [ shift and go to state 111 ]
  ! EQ              [ shift and go to state 112 ]
  ! NOT_EQUAL       [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 156

    (34) binary_expression -> binary_expression DIV binary_expression .
    (33) binary_expression -> binary_expression . TIMES binary_expression
    (34) binary_expression -> binary_expression . DIV binary_expression
    (35) binary_expression -> binary_expression . MOD binary_expression
    (36) binary_expression -> binary_expression . PLUS binary_expression
    (37) binary_expression -> binary_expression . MINUS binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . LTE binary_expression
    (40) binary_expression -> binary_expression . GT binary_expression
    (41) binary_expression -> binary_expression . GTE binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NOT_EQUAL binary_expression
    (44) binary_expression -> binary_expression . AND binary_expression
    (45) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 34 (binary_expression -> binary_expression DIV binary_expression .)
    DIV             reduce using rule 34 (binary_expression -> binary_expression DIV binary_expression .)
    MOD             reduce using rule 34 (binary_expression -> binary_expression DIV binary_expression .)
    PLUS            reduce using rule 34 (binary_expression -> binary_expression DIV binary_expression .)
    MINUS           reduce using rule 34 (binary_expression -> binary_expression DIV binary_expression .)
    LT              reduce using rule 34 (binary_expression -> binary_expression DIV binary_expression .)
    LTE             reduce using rule 34 (binary_expression -> binary_expression DIV binary_expression .)
    GT              reduce using rule 34 (binary_expression -> binary_expression DIV binary_expression .)
    GTE             reduce using rule 34 (binary_expression -> binary_expression DIV binary_expression .)
    EQ              reduce using rule 34 (binary_expression -> binary_expression DIV binary_expression .)
    NOT_EQUAL       reduce using rule 34 (binary_expression -> binary_expression DIV binary_expression .)
    AND             reduce using rule 34 (binary_expression -> binary_expression DIV binary_expression .)
    OR              reduce using rule 34 (binary_expression -> binary_expression DIV binary_expression .)
    COMMA           reduce using rule 34 (binary_expression -> binary_expression DIV binary_expression .)
    SEMI            reduce using rule 34 (binary_expression -> binary_expression DIV binary_expression .)
    RBRACKET        reduce using rule 34 (binary_expression -> binary_expression DIV binary_expression .)
    RBRACE          reduce using rule 34 (binary_expression -> binary_expression DIV binary_expression .)
    RPAREN          reduce using rule 34 (binary_expression -> binary_expression DIV binary_expression .)

  ! TIMES           [ shift and go to state 103 ]
  ! DIV             [ shift and go to state 104 ]
  ! MOD             [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! LT              [ shift and go to state 108 ]
  ! LTE             [ shift and go to state 109 ]
  ! GT              [ shift and go to state 110 ]
  ! GTE             [ shift and go to state 111 ]
  ! EQ              [ shift and go to state 112 ]
  ! NOT_EQUAL       [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 157

    (35) binary_expression -> binary_expression MOD binary_expression .
    (33) binary_expression -> binary_expression . TIMES binary_expression
    (34) binary_expression -> binary_expression . DIV binary_expression
    (35) binary_expression -> binary_expression . MOD binary_expression
    (36) binary_expression -> binary_expression . PLUS binary_expression
    (37) binary_expression -> binary_expression . MINUS binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . LTE binary_expression
    (40) binary_expression -> binary_expression . GT binary_expression
    (41) binary_expression -> binary_expression . GTE binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NOT_EQUAL binary_expression
    (44) binary_expression -> binary_expression . AND binary_expression
    (45) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 35 (binary_expression -> binary_expression MOD binary_expression .)
    DIV             reduce using rule 35 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 35 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 35 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 35 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 35 (binary_expression -> binary_expression MOD binary_expression .)
    LTE             reduce using rule 35 (binary_expression -> binary_expression MOD binary_expression .)
    GT              reduce using rule 35 (binary_expression -> binary_expression MOD binary_expression .)
    GTE             reduce using rule 35 (binary_expression -> binary_expression MOD binary_expression .)
    EQ              reduce using rule 35 (binary_expression -> binary_expression MOD binary_expression .)
    NOT_EQUAL       reduce using rule 35 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 35 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 35 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 35 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 35 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 35 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 35 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 35 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 103 ]
  ! DIV             [ shift and go to state 104 ]
  ! MOD             [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! LT              [ shift and go to state 108 ]
  ! LTE             [ shift and go to state 109 ]
  ! GT              [ shift and go to state 110 ]
  ! GTE             [ shift and go to state 111 ]
  ! EQ              [ shift and go to state 112 ]
  ! NOT_EQUAL       [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 158

    (36) binary_expression -> binary_expression PLUS binary_expression .
    (33) binary_expression -> binary_expression . TIMES binary_expression
    (34) binary_expression -> binary_expression . DIV binary_expression
    (35) binary_expression -> binary_expression . MOD binary_expression
    (36) binary_expression -> binary_expression . PLUS binary_expression
    (37) binary_expression -> binary_expression . MINUS binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . LTE binary_expression
    (40) binary_expression -> binary_expression . GT binary_expression
    (41) binary_expression -> binary_expression . GTE binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NOT_EQUAL binary_expression
    (44) binary_expression -> binary_expression . AND binary_expression
    (45) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 36 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 36 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 36 (binary_expression -> binary_expression PLUS binary_expression .)
    LTE             reduce using rule 36 (binary_expression -> binary_expression PLUS binary_expression .)
    GT              reduce using rule 36 (binary_expression -> binary_expression PLUS binary_expression .)
    GTE             reduce using rule 36 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 36 (binary_expression -> binary_expression PLUS binary_expression .)
    NOT_EQUAL       reduce using rule 36 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 36 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 36 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 36 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 36 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 36 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 36 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 36 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 103
    DIV             shift and go to state 104
    MOD             shift and go to state 105

  ! TIMES           [ reduce using rule 36 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIV             [ reduce using rule 36 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 36 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! LT              [ shift and go to state 108 ]
  ! LTE             [ shift and go to state 109 ]
  ! GT              [ shift and go to state 110 ]
  ! GTE             [ shift and go to state 111 ]
  ! EQ              [ shift and go to state 112 ]
  ! NOT_EQUAL       [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 159

    (37) binary_expression -> binary_expression MINUS binary_expression .
    (33) binary_expression -> binary_expression . TIMES binary_expression
    (34) binary_expression -> binary_expression . DIV binary_expression
    (35) binary_expression -> binary_expression . MOD binary_expression
    (36) binary_expression -> binary_expression . PLUS binary_expression
    (37) binary_expression -> binary_expression . MINUS binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . LTE binary_expression
    (40) binary_expression -> binary_expression . GT binary_expression
    (41) binary_expression -> binary_expression . GTE binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NOT_EQUAL binary_expression
    (44) binary_expression -> binary_expression . AND binary_expression
    (45) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 37 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 37 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 37 (binary_expression -> binary_expression MINUS binary_expression .)
    LTE             reduce using rule 37 (binary_expression -> binary_expression MINUS binary_expression .)
    GT              reduce using rule 37 (binary_expression -> binary_expression MINUS binary_expression .)
    GTE             reduce using rule 37 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 37 (binary_expression -> binary_expression MINUS binary_expression .)
    NOT_EQUAL       reduce using rule 37 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 37 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 37 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 37 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 37 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 37 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 37 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 37 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 103
    DIV             shift and go to state 104
    MOD             shift and go to state 105

  ! TIMES           [ reduce using rule 37 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIV             [ reduce using rule 37 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 37 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! LT              [ shift and go to state 108 ]
  ! LTE             [ shift and go to state 109 ]
  ! GT              [ shift and go to state 110 ]
  ! GTE             [ shift and go to state 111 ]
  ! EQ              [ shift and go to state 112 ]
  ! NOT_EQUAL       [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 160

    (38) binary_expression -> binary_expression LT binary_expression .
    (33) binary_expression -> binary_expression . TIMES binary_expression
    (34) binary_expression -> binary_expression . DIV binary_expression
    (35) binary_expression -> binary_expression . MOD binary_expression
    (36) binary_expression -> binary_expression . PLUS binary_expression
    (37) binary_expression -> binary_expression . MINUS binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . LTE binary_expression
    (40) binary_expression -> binary_expression . GT binary_expression
    (41) binary_expression -> binary_expression . GTE binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NOT_EQUAL binary_expression
    (44) binary_expression -> binary_expression . AND binary_expression
    (45) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    LTE             reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    GT              reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    GTE             reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    NOT_EQUAL       reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    OR              reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    SEMI            reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    TIMES           shift and go to state 103
    DIV             shift and go to state 104
    MOD             shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107

  ! TIMES           [ reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .) ]
  ! DIV             [ reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MOD             [ reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .) ]
  ! PLUS            [ reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LT              [ shift and go to state 108 ]
  ! LTE             [ shift and go to state 109 ]
  ! GT              [ shift and go to state 110 ]
  ! GTE             [ shift and go to state 111 ]
  ! EQ              [ shift and go to state 112 ]
  ! NOT_EQUAL       [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 161

    (39) binary_expression -> binary_expression LTE binary_expression .
    (33) binary_expression -> binary_expression . TIMES binary_expression
    (34) binary_expression -> binary_expression . DIV binary_expression
    (35) binary_expression -> binary_expression . MOD binary_expression
    (36) binary_expression -> binary_expression . PLUS binary_expression
    (37) binary_expression -> binary_expression . MINUS binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . LTE binary_expression
    (40) binary_expression -> binary_expression . GT binary_expression
    (41) binary_expression -> binary_expression . GTE binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NOT_EQUAL binary_expression
    (44) binary_expression -> binary_expression . AND binary_expression
    (45) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 39 (binary_expression -> binary_expression LTE binary_expression .)
    LTE             reduce using rule 39 (binary_expression -> binary_expression LTE binary_expression .)
    GT              reduce using rule 39 (binary_expression -> binary_expression LTE binary_expression .)
    GTE             reduce using rule 39 (binary_expression -> binary_expression LTE binary_expression .)
    EQ              reduce using rule 39 (binary_expression -> binary_expression LTE binary_expression .)
    NOT_EQUAL       reduce using rule 39 (binary_expression -> binary_expression LTE binary_expression .)
    AND             reduce using rule 39 (binary_expression -> binary_expression LTE binary_expression .)
    OR              reduce using rule 39 (binary_expression -> binary_expression LTE binary_expression .)
    COMMA           reduce using rule 39 (binary_expression -> binary_expression LTE binary_expression .)
    SEMI            reduce using rule 39 (binary_expression -> binary_expression LTE binary_expression .)
    RBRACKET        reduce using rule 39 (binary_expression -> binary_expression LTE binary_expression .)
    RBRACE          reduce using rule 39 (binary_expression -> binary_expression LTE binary_expression .)
    RPAREN          reduce using rule 39 (binary_expression -> binary_expression LTE binary_expression .)
    TIMES           shift and go to state 103
    DIV             shift and go to state 104
    MOD             shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107

  ! TIMES           [ reduce using rule 39 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! DIV             [ reduce using rule 39 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! MOD             [ reduce using rule 39 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! PLUS            [ reduce using rule 39 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! MINUS           [ reduce using rule 39 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! LT              [ shift and go to state 108 ]
  ! LTE             [ shift and go to state 109 ]
  ! GT              [ shift and go to state 110 ]
  ! GTE             [ shift and go to state 111 ]
  ! EQ              [ shift and go to state 112 ]
  ! NOT_EQUAL       [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 162

    (40) binary_expression -> binary_expression GT binary_expression .
    (33) binary_expression -> binary_expression . TIMES binary_expression
    (34) binary_expression -> binary_expression . DIV binary_expression
    (35) binary_expression -> binary_expression . MOD binary_expression
    (36) binary_expression -> binary_expression . PLUS binary_expression
    (37) binary_expression -> binary_expression . MINUS binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . LTE binary_expression
    (40) binary_expression -> binary_expression . GT binary_expression
    (41) binary_expression -> binary_expression . GTE binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NOT_EQUAL binary_expression
    (44) binary_expression -> binary_expression . AND binary_expression
    (45) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 40 (binary_expression -> binary_expression GT binary_expression .)
    LTE             reduce using rule 40 (binary_expression -> binary_expression GT binary_expression .)
    GT              reduce using rule 40 (binary_expression -> binary_expression GT binary_expression .)
    GTE             reduce using rule 40 (binary_expression -> binary_expression GT binary_expression .)
    EQ              reduce using rule 40 (binary_expression -> binary_expression GT binary_expression .)
    NOT_EQUAL       reduce using rule 40 (binary_expression -> binary_expression GT binary_expression .)
    AND             reduce using rule 40 (binary_expression -> binary_expression GT binary_expression .)
    OR              reduce using rule 40 (binary_expression -> binary_expression GT binary_expression .)
    COMMA           reduce using rule 40 (binary_expression -> binary_expression GT binary_expression .)
    SEMI            reduce using rule 40 (binary_expression -> binary_expression GT binary_expression .)
    RBRACKET        reduce using rule 40 (binary_expression -> binary_expression GT binary_expression .)
    RBRACE          reduce using rule 40 (binary_expression -> binary_expression GT binary_expression .)
    RPAREN          reduce using rule 40 (binary_expression -> binary_expression GT binary_expression .)
    TIMES           shift and go to state 103
    DIV             shift and go to state 104
    MOD             shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107

  ! TIMES           [ reduce using rule 40 (binary_expression -> binary_expression GT binary_expression .) ]
  ! DIV             [ reduce using rule 40 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MOD             [ reduce using rule 40 (binary_expression -> binary_expression GT binary_expression .) ]
  ! PLUS            [ reduce using rule 40 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MINUS           [ reduce using rule 40 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LT              [ shift and go to state 108 ]
  ! LTE             [ shift and go to state 109 ]
  ! GT              [ shift and go to state 110 ]
  ! GTE             [ shift and go to state 111 ]
  ! EQ              [ shift and go to state 112 ]
  ! NOT_EQUAL       [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 163

    (41) binary_expression -> binary_expression GTE binary_expression .
    (33) binary_expression -> binary_expression . TIMES binary_expression
    (34) binary_expression -> binary_expression . DIV binary_expression
    (35) binary_expression -> binary_expression . MOD binary_expression
    (36) binary_expression -> binary_expression . PLUS binary_expression
    (37) binary_expression -> binary_expression . MINUS binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . LTE binary_expression
    (40) binary_expression -> binary_expression . GT binary_expression
    (41) binary_expression -> binary_expression . GTE binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NOT_EQUAL binary_expression
    (44) binary_expression -> binary_expression . AND binary_expression
    (45) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 41 (binary_expression -> binary_expression GTE binary_expression .)
    LTE             reduce using rule 41 (binary_expression -> binary_expression GTE binary_expression .)
    GT              reduce using rule 41 (binary_expression -> binary_expression GTE binary_expression .)
    GTE             reduce using rule 41 (binary_expression -> binary_expression GTE binary_expression .)
    EQ              reduce using rule 41 (binary_expression -> binary_expression GTE binary_expression .)
    NOT_EQUAL       reduce using rule 41 (binary_expression -> binary_expression GTE binary_expression .)
    AND             reduce using rule 41 (binary_expression -> binary_expression GTE binary_expression .)
    OR              reduce using rule 41 (binary_expression -> binary_expression GTE binary_expression .)
    COMMA           reduce using rule 41 (binary_expression -> binary_expression GTE binary_expression .)
    SEMI            reduce using rule 41 (binary_expression -> binary_expression GTE binary_expression .)
    RBRACKET        reduce using rule 41 (binary_expression -> binary_expression GTE binary_expression .)
    RBRACE          reduce using rule 41 (binary_expression -> binary_expression GTE binary_expression .)
    RPAREN          reduce using rule 41 (binary_expression -> binary_expression GTE binary_expression .)
    TIMES           shift and go to state 103
    DIV             shift and go to state 104
    MOD             shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107

  ! TIMES           [ reduce using rule 41 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! DIV             [ reduce using rule 41 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! MOD             [ reduce using rule 41 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! PLUS            [ reduce using rule 41 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! MINUS           [ reduce using rule 41 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! LT              [ shift and go to state 108 ]
  ! LTE             [ shift and go to state 109 ]
  ! GT              [ shift and go to state 110 ]
  ! GTE             [ shift and go to state 111 ]
  ! EQ              [ shift and go to state 112 ]
  ! NOT_EQUAL       [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 164

    (42) binary_expression -> binary_expression EQ binary_expression .
    (33) binary_expression -> binary_expression . TIMES binary_expression
    (34) binary_expression -> binary_expression . DIV binary_expression
    (35) binary_expression -> binary_expression . MOD binary_expression
    (36) binary_expression -> binary_expression . PLUS binary_expression
    (37) binary_expression -> binary_expression . MINUS binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . LTE binary_expression
    (40) binary_expression -> binary_expression . GT binary_expression
    (41) binary_expression -> binary_expression . GTE binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NOT_EQUAL binary_expression
    (44) binary_expression -> binary_expression . AND binary_expression
    (45) binary_expression -> binary_expression . OR binary_expression

    EQ              reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    NOT_EQUAL       reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    AND             reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    OR              reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    SEMI            reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACKET        reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    TIMES           shift and go to state 103
    DIV             shift and go to state 104
    MOD             shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    LT              shift and go to state 108
    LTE             shift and go to state 109
    GT              shift and go to state 110
    GTE             shift and go to state 111

  ! TIMES           [ reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! DIV             [ reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MOD             [ reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! PLUS            [ reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MINUS           [ reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LT              [ reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LTE             [ reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GT              [ reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GTE             [ reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! EQ              [ shift and go to state 112 ]
  ! NOT_EQUAL       [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 165

    (43) binary_expression -> binary_expression NOT_EQUAL binary_expression .
    (33) binary_expression -> binary_expression . TIMES binary_expression
    (34) binary_expression -> binary_expression . DIV binary_expression
    (35) binary_expression -> binary_expression . MOD binary_expression
    (36) binary_expression -> binary_expression . PLUS binary_expression
    (37) binary_expression -> binary_expression . MINUS binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . LTE binary_expression
    (40) binary_expression -> binary_expression . GT binary_expression
    (41) binary_expression -> binary_expression . GTE binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NOT_EQUAL binary_expression
    (44) binary_expression -> binary_expression . AND binary_expression
    (45) binary_expression -> binary_expression . OR binary_expression

    EQ              reduce using rule 43 (binary_expression -> binary_expression NOT_EQUAL binary_expression .)
    NOT_EQUAL       reduce using rule 43 (binary_expression -> binary_expression NOT_EQUAL binary_expression .)
    AND             reduce using rule 43 (binary_expression -> binary_expression NOT_EQUAL binary_expression .)
    OR              reduce using rule 43 (binary_expression -> binary_expression NOT_EQUAL binary_expression .)
    COMMA           reduce using rule 43 (binary_expression -> binary_expression NOT_EQUAL binary_expression .)
    SEMI            reduce using rule 43 (binary_expression -> binary_expression NOT_EQUAL binary_expression .)
    RBRACKET        reduce using rule 43 (binary_expression -> binary_expression NOT_EQUAL binary_expression .)
    RBRACE          reduce using rule 43 (binary_expression -> binary_expression NOT_EQUAL binary_expression .)
    RPAREN          reduce using rule 43 (binary_expression -> binary_expression NOT_EQUAL binary_expression .)
    TIMES           shift and go to state 103
    DIV             shift and go to state 104
    MOD             shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    LT              shift and go to state 108
    LTE             shift and go to state 109
    GT              shift and go to state 110
    GTE             shift and go to state 111

  ! TIMES           [ reduce using rule 43 (binary_expression -> binary_expression NOT_EQUAL binary_expression .) ]
  ! DIV             [ reduce using rule 43 (binary_expression -> binary_expression NOT_EQUAL binary_expression .) ]
  ! MOD             [ reduce using rule 43 (binary_expression -> binary_expression NOT_EQUAL binary_expression .) ]
  ! PLUS            [ reduce using rule 43 (binary_expression -> binary_expression NOT_EQUAL binary_expression .) ]
  ! MINUS           [ reduce using rule 43 (binary_expression -> binary_expression NOT_EQUAL binary_expression .) ]
  ! LT              [ reduce using rule 43 (binary_expression -> binary_expression NOT_EQUAL binary_expression .) ]
  ! LTE             [ reduce using rule 43 (binary_expression -> binary_expression NOT_EQUAL binary_expression .) ]
  ! GT              [ reduce using rule 43 (binary_expression -> binary_expression NOT_EQUAL binary_expression .) ]
  ! GTE             [ reduce using rule 43 (binary_expression -> binary_expression NOT_EQUAL binary_expression .) ]
  ! EQ              [ shift and go to state 112 ]
  ! NOT_EQUAL       [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 166

    (44) binary_expression -> binary_expression AND binary_expression .
    (33) binary_expression -> binary_expression . TIMES binary_expression
    (34) binary_expression -> binary_expression . DIV binary_expression
    (35) binary_expression -> binary_expression . MOD binary_expression
    (36) binary_expression -> binary_expression . PLUS binary_expression
    (37) binary_expression -> binary_expression . MINUS binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . LTE binary_expression
    (40) binary_expression -> binary_expression . GT binary_expression
    (41) binary_expression -> binary_expression . GTE binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NOT_EQUAL binary_expression
    (44) binary_expression -> binary_expression . AND binary_expression
    (45) binary_expression -> binary_expression . OR binary_expression

    AND             reduce using rule 44 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 44 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 44 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 44 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 44 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 44 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 44 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 103
    DIV             shift and go to state 104
    MOD             shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    LT              shift and go to state 108
    LTE             shift and go to state 109
    GT              shift and go to state 110
    GTE             shift and go to state 111
    EQ              shift and go to state 112
    NOT_EQUAL       shift and go to state 113

  ! TIMES           [ reduce using rule 44 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIV             [ reduce using rule 44 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 44 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 44 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 44 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LT              [ reduce using rule 44 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LTE             [ reduce using rule 44 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GT              [ reduce using rule 44 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GTE             [ reduce using rule 44 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQ              [ reduce using rule 44 (binary_expression -> binary_expression AND binary_expression .) ]
  ! NOT_EQUAL       [ reduce using rule 44 (binary_expression -> binary_expression AND binary_expression .) ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 167

    (45) binary_expression -> binary_expression OR binary_expression .
    (33) binary_expression -> binary_expression . TIMES binary_expression
    (34) binary_expression -> binary_expression . DIV binary_expression
    (35) binary_expression -> binary_expression . MOD binary_expression
    (36) binary_expression -> binary_expression . PLUS binary_expression
    (37) binary_expression -> binary_expression . MINUS binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . LTE binary_expression
    (40) binary_expression -> binary_expression . GT binary_expression
    (41) binary_expression -> binary_expression . GTE binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NOT_EQUAL binary_expression
    (44) binary_expression -> binary_expression . AND binary_expression
    (45) binary_expression -> binary_expression . OR binary_expression

    OR              reduce using rule 45 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 45 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 45 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 45 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 45 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 45 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 103
    DIV             shift and go to state 104
    MOD             shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    LT              shift and go to state 108
    LTE             shift and go to state 109
    GT              shift and go to state 110
    GTE             shift and go to state 111
    EQ              shift and go to state 112
    NOT_EQUAL       shift and go to state 113
    AND             shift and go to state 114

  ! TIMES           [ reduce using rule 45 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIV             [ reduce using rule 45 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 45 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 45 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 45 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LT              [ reduce using rule 45 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LTE             [ reduce using rule 45 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GT              [ reduce using rule 45 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GTE             [ reduce using rule 45 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQ              [ reduce using rule 45 (binary_expression -> binary_expression OR binary_expression .) ]
  ! NOT_EQUAL       [ reduce using rule 45 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 45 (binary_expression -> binary_expression OR binary_expression .) ]
  ! OR              [ shift and go to state 115 ]


state 168

    (71) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COMMA           reduce using rule 71 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 71 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 71 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 71 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 71 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 169

    (53) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (67) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 188
    COMMA           shift and go to state 138


state 170

    (54) postfix_expression -> postfix_expression LPAREN argument_expression . RPAREN
    (69) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 189
    COMMA           shift and go to state 190


state 171

    (55) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES_EQUALS    reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIV_EQUALS      reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD_EQUALS      reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS_EQUALS     reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS_EQUALS    reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIV             reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTE             reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GTE             reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 172

    (68) argument_expression -> assignment_expression .

    RPAREN          reduce using rule 68 (argument_expression -> assignment_expression .)
    COMMA           reduce using rule 68 (argument_expression -> assignment_expression .)


state 173

    (47) cast_expression -> LPAREN type_specifier RPAREN . cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LPAREN          shift and go to state 49
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    cast_expression                shift and go to state 191
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 174

    (62) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    TIMES_EQUALS    reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    DIV_EQUALS      reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    MOD_EQUALS      reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    PLUS_EQUALS     reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    MINUS_EQUALS    reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    LTE             reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    GTE             reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    NOT_EQUAL       reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 62 (primary_expression -> LPAREN expression RPAREN .)


state 175

    (117) selection_statement -> IF LPAREN expression . RPAREN statement
    (118) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (67) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 192
    COMMA           shift and go to state 138


state 176

    (67) expression -> expression COMMA assignment_expression .

    COMMA           reduce using rule 67 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 67 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 67 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 67 (expression -> expression COMMA assignment_expression .)


state 177

    (119) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (67) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 193
    COMMA           shift and go to state 138


state 178

    (120) iteration_statement -> FOR LPAREN declaration . expression_opt SEMI expression_opt RPAREN statement
    (115) expression_opt -> . expression
    (116) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    SEMI            reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    expression_opt                 shift and go to state 194
    expression                     shift and go to state 76
    empty                          shift and go to state 183
    assignment_expression          shift and go to state 85
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 179

    (121) iteration_statement -> FOR LPAREN expression_opt . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 195


state 180

    (123) jump_statement -> RETURN expression SEMI .

    LBRACE          reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    ASSERT          reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    PRINT           reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    READ            reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    VOID            reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    CHAR            reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    INT             reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    FLOAT           reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    PLUSPLUS        reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    MINUSMINUS      reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    ADDRESS         reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    TIMES           reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    NOT             reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    ID              reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    INT_CONST       reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    CHAR_CONST      reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    FLOAT_CONST     reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    STRING          reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    RBRACE          reduce using rule 123 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 123 (jump_statement -> RETURN expression SEMI .)


state 181

    (125) assert_statement -> ASSERT expression SEMI .

    LBRACE          reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    IF              reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    WHILE           reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    FOR             reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    BREAK           reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    RETURN          reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    ASSERT          reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    PRINT           reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    READ            reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    VOID            reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    CHAR            reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    INT             reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    FLOAT           reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    PLUSPLUS        reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    MINUSMINUS      reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    LPAREN          reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    ADDRESS         reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    TIMES           reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    PLUS            reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    MINUS           reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    NOT             reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    ID              reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    INT_CONST       reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    CHAR_CONST      reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    FLOAT_CONST     reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    STRING          reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    SEMI            reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    RBRACE          reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    ELSE            reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)


state 182

    (126) print_statement -> PRINT LPAREN expression_opt . RPAREN SEMI

    RPAREN          shift and go to state 196


state 183

    (116) expression_opt -> empty .

    RPAREN          reduce using rule 116 (expression_opt -> empty .)
    SEMI            reduce using rule 116 (expression_opt -> empty .)


state 184

    (127) read_statement -> READ LPAREN argument_expression . RPAREN SEMI
    (69) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 197
    COMMA           shift and go to state 190


state 185

    (84) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 84 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 84 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 186

    (96) initializer -> LBRACE initializer_list COMMA RBRACE .

    COMMA           reduce using rule 96 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    SEMI            reduce using rule 96 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 96 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 187

    (98) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 98 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 98 (initializer_list -> initializer_list COMMA initializer .)


state 188

    (53) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES_EQUALS    reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIV_EQUALS      reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD_EQUALS      reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS_EQUALS     reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS_EQUALS    reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIV             reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LTE             reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GTE             reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NOT_EQUAL       reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 53 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 189

    (54) postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .

    LBRACKET        reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LPAREN          reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PLUSPLUS        reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUSMINUS      reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQUALS          reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    TIMES_EQUALS    reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DIV_EQUALS      reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MOD_EQUALS      reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PLUS_EQUALS     reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUS_EQUALS    reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    TIMES           reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DIV             reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MOD             reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PLUS            reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUS           reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LT              reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LTE             reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    GT              reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    GTE             reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQ              reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    NOT_EQUAL       reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    AND             reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    OR              reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    COMMA           reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    SEMI            reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RBRACKET        reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RBRACE          reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RPAREN          reduce using rule 54 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)


state 190

    (69) argument_expression -> argument_expression COMMA . assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    assignment_expression          shift and go to state 198
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 191

    (47) cast_expression -> LPAREN type_specifier RPAREN cast_expression .

    TIMES           reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIV             reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MOD             reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUS            reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS           reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LT              reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LTE             reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GT              reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GTE             reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQ              reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    NOT_EQUAL       reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    AND             reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    OR              reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    COMMA           reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SEMI            reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACKET        reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACE          reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQUALS          reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    TIMES_EQUALS    reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIV_EQUALS      reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MOD_EQUALS      reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUS_EQUALS     reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS_EQUALS    reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RPAREN          reduce using rule 47 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)


state 192

    (117) selection_statement -> IF LPAREN expression RPAREN . statement
    (118) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (106) statement -> . expression_statement
    (107) statement -> . compound_statement
    (108) statement -> . selection_statement
    (109) statement -> . iteration_statement
    (110) statement -> . jump_statement
    (111) statement -> . assert_statement
    (112) statement -> . print_statement
    (113) statement -> . read_statement
    (114) expression_statement -> . expression_opt SEMI
    (99) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (117) selection_statement -> . IF LPAREN expression RPAREN statement
    (118) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (119) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (121) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (122) jump_statement -> . BREAK SEMI
    (123) jump_statement -> . RETURN expression SEMI
    (124) jump_statement -> . RETURN SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (115) expression_opt -> . expression
    (116) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LBRACE          shift and go to state 29
    IF              shift and go to state 75
    WHILE           shift and go to state 77
    FOR             shift and go to state 78
    BREAK           shift and go to state 79
    RETURN          shift and go to state 80
    ASSERT          shift and go to state 81
    PRINT           shift and go to state 82
    READ            shift and go to state 83
    SEMI            reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    expression                     shift and go to state 76
    statement                      shift and go to state 199
    expression_statement           shift and go to state 66
    compound_statement             shift and go to state 67
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    assert_statement               shift and go to state 71
    print_statement                shift and go to state 72
    read_statement                 shift and go to state 73
    expression_opt                 shift and go to state 74
    empty                          shift and go to state 183
    assignment_expression          shift and go to state 85
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 193

    (119) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (106) statement -> . expression_statement
    (107) statement -> . compound_statement
    (108) statement -> . selection_statement
    (109) statement -> . iteration_statement
    (110) statement -> . jump_statement
    (111) statement -> . assert_statement
    (112) statement -> . print_statement
    (113) statement -> . read_statement
    (114) expression_statement -> . expression_opt SEMI
    (99) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (117) selection_statement -> . IF LPAREN expression RPAREN statement
    (118) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (119) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (121) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (122) jump_statement -> . BREAK SEMI
    (123) jump_statement -> . RETURN expression SEMI
    (124) jump_statement -> . RETURN SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (115) expression_opt -> . expression
    (116) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LBRACE          shift and go to state 29
    IF              shift and go to state 75
    WHILE           shift and go to state 77
    FOR             shift and go to state 78
    BREAK           shift and go to state 79
    RETURN          shift and go to state 80
    ASSERT          shift and go to state 81
    PRINT           shift and go to state 82
    READ            shift and go to state 83
    SEMI            reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    expression                     shift and go to state 76
    statement                      shift and go to state 200
    expression_statement           shift and go to state 66
    compound_statement             shift and go to state 67
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    assert_statement               shift and go to state 71
    print_statement                shift and go to state 72
    read_statement                 shift and go to state 73
    expression_opt                 shift and go to state 74
    empty                          shift and go to state 183
    assignment_expression          shift and go to state 85
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 194

    (120) iteration_statement -> FOR LPAREN declaration expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 201


state 195

    (121) iteration_statement -> FOR LPAREN expression_opt SEMI . expression_opt SEMI expression_opt RPAREN statement
    (115) expression_opt -> . expression
    (116) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    SEMI            reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    expression_opt                 shift and go to state 202
    expression                     shift and go to state 76
    empty                          shift and go to state 183
    assignment_expression          shift and go to state 85
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 196

    (126) print_statement -> PRINT LPAREN expression_opt RPAREN . SEMI

    SEMI            shift and go to state 203


state 197

    (127) read_statement -> READ LPAREN argument_expression RPAREN . SEMI

    SEMI            shift and go to state 204


state 198

    (69) argument_expression -> argument_expression COMMA assignment_expression .

    RPAREN          reduce using rule 69 (argument_expression -> argument_expression COMMA assignment_expression .)
    COMMA           reduce using rule 69 (argument_expression -> argument_expression COMMA assignment_expression .)


state 199

    (117) selection_statement -> IF LPAREN expression RPAREN statement .
    (118) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    LBRACE          reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    READ            reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 205

  ! ELSE            [ reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 200

    (119) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    LBRACE          reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    READ            reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 119 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 201

    (120) iteration_statement -> FOR LPAREN declaration expression_opt SEMI . expression_opt RPAREN statement
    (115) expression_opt -> . expression
    (116) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    RPAREN          reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    expression_opt                 shift and go to state 206
    expression                     shift and go to state 76
    empty                          shift and go to state 183
    assignment_expression          shift and go to state 85
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 202

    (121) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 207


state 203

    (126) print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .

    LBRACE          reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    IF              reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    WHILE           reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FOR             reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    BREAK           reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    RETURN          reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ASSERT          reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PRINT           reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    READ            reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    VOID            reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    CHAR            reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    INT             reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FLOAT           reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PLUSPLUS        reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    MINUSMINUS      reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    LPAREN          reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ADDRESS         reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    TIMES           reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PLUS            reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    MINUS           reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    NOT             reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ID              reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    INT_CONST       reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    CHAR_CONST      reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    STRING          reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    SEMI            reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    RBRACE          reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ELSE            reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)


state 204

    (127) read_statement -> READ LPAREN argument_expression RPAREN SEMI .

    LBRACE          reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    IF              reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    WHILE           reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FOR             reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    BREAK           reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RETURN          reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ASSERT          reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PRINT           reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    READ            reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    VOID            reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    CHAR            reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    INT             reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FLOAT           reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUSPLUS        reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MINUSMINUS      reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LPAREN          reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ADDRESS         reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    TIMES           reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUS            reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MINUS           reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    NOT             reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ID              reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    INT_CONST       reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    STRING          reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    SEMI            reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RBRACE          reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ELSE            reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)


state 205

    (118) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (106) statement -> . expression_statement
    (107) statement -> . compound_statement
    (108) statement -> . selection_statement
    (109) statement -> . iteration_statement
    (110) statement -> . jump_statement
    (111) statement -> . assert_statement
    (112) statement -> . print_statement
    (113) statement -> . read_statement
    (114) expression_statement -> . expression_opt SEMI
    (99) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (117) selection_statement -> . IF LPAREN expression RPAREN statement
    (118) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (119) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (121) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (122) jump_statement -> . BREAK SEMI
    (123) jump_statement -> . RETURN expression SEMI
    (124) jump_statement -> . RETURN SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (115) expression_opt -> . expression
    (116) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LBRACE          shift and go to state 29
    IF              shift and go to state 75
    WHILE           shift and go to state 77
    FOR             shift and go to state 78
    BREAK           shift and go to state 79
    RETURN          shift and go to state 80
    ASSERT          shift and go to state 81
    PRINT           shift and go to state 82
    READ            shift and go to state 83
    SEMI            reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    expression                     shift and go to state 76
    statement                      shift and go to state 208
    expression_statement           shift and go to state 66
    compound_statement             shift and go to state 67
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    assert_statement               shift and go to state 71
    print_statement                shift and go to state 72
    read_statement                 shift and go to state 73
    expression_opt                 shift and go to state 74
    empty                          shift and go to state 183
    assignment_expression          shift and go to state 85
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 206

    (120) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 209


state 207

    (121) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI . expression_opt RPAREN statement
    (115) expression_opt -> . expression
    (116) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    RPAREN          reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    expression_opt                 shift and go to state 210
    expression                     shift and go to state 76
    empty                          shift and go to state 183
    assignment_expression          shift and go to state 85
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 208

    (118) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    LBRACE          reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASSERT          reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINT           reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    READ            reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ADDRESS         reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST       reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_CONST      reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_CONST     reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 209

    (120) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN . statement
    (106) statement -> . expression_statement
    (107) statement -> . compound_statement
    (108) statement -> . selection_statement
    (109) statement -> . iteration_statement
    (110) statement -> . jump_statement
    (111) statement -> . assert_statement
    (112) statement -> . print_statement
    (113) statement -> . read_statement
    (114) expression_statement -> . expression_opt SEMI
    (99) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (117) selection_statement -> . IF LPAREN expression RPAREN statement
    (118) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (119) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (121) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (122) jump_statement -> . BREAK SEMI
    (123) jump_statement -> . RETURN expression SEMI
    (124) jump_statement -> . RETURN SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (115) expression_opt -> . expression
    (116) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LBRACE          shift and go to state 29
    IF              shift and go to state 75
    WHILE           shift and go to state 77
    FOR             shift and go to state 78
    BREAK           shift and go to state 79
    RETURN          shift and go to state 80
    ASSERT          shift and go to state 81
    PRINT           shift and go to state 82
    READ            shift and go to state 83
    SEMI            reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    expression_opt                 shift and go to state 74
    statement                      shift and go to state 211
    expression_statement           shift and go to state 66
    compound_statement             shift and go to state 67
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    assert_statement               shift and go to state 71
    print_statement                shift and go to state 72
    read_statement                 shift and go to state 73
    expression                     shift and go to state 76
    empty                          shift and go to state 183
    assignment_expression          shift and go to state 85
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 210

    (121) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 212


state 211

    (120) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .

    LBRACE          reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    VOID            reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CHAR            reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT             reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT           reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ADDRESS         reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST       reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STRING          reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RBRACE          reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)


state 212

    (121) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN . statement
    (106) statement -> . expression_statement
    (107) statement -> . compound_statement
    (108) statement -> . selection_statement
    (109) statement -> . iteration_statement
    (110) statement -> . jump_statement
    (111) statement -> . assert_statement
    (112) statement -> . print_statement
    (113) statement -> . read_statement
    (114) expression_statement -> . expression_opt SEMI
    (99) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (117) selection_statement -> . IF LPAREN expression RPAREN statement
    (118) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (119) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (121) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (122) jump_statement -> . BREAK SEMI
    (123) jump_statement -> . RETURN expression SEMI
    (124) jump_statement -> . RETURN SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (115) expression_opt -> . expression
    (116) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (32) binary_expression -> . cast_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . binary_expression DIV binary_expression
    (35) binary_expression -> . binary_expression MOD binary_expression
    (36) binary_expression -> . binary_expression PLUS binary_expression
    (37) binary_expression -> . binary_expression MINUS binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression LTE binary_expression
    (40) binary_expression -> . binary_expression GT binary_expression
    (41) binary_expression -> . binary_expression GTE binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NOT_EQUAL binary_expression
    (44) binary_expression -> . binary_expression AND binary_expression
    (45) binary_expression -> . binary_expression OR binary_expression
    (48) unary_expression -> . postfix_expression
    (49) unary_expression -> . PLUSPLUS unary_expression
    (50) unary_expression -> . MINUSMINUS unary_expression
    (51) unary_expression -> . unary_operator cast_expression
    (46) cast_expression -> . unary_expression
    (47) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (52) postfix_expression -> . primary_expression
    (53) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (54) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression PLUSPLUS
    (57) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . ADDRESS
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . string_constant
    (62) primary_expression -> . LPAREN expression RPAREN
    (30) identifier -> . ID
    (63) constant -> . INT_CONST
    (64) constant -> . CHAR_CONST
    (65) constant -> . FLOAT_CONST
    (58) string_constant -> . STRING

    LBRACE          shift and go to state 29
    IF              shift and go to state 75
    WHILE           shift and go to state 77
    FOR             shift and go to state 78
    BREAK           shift and go to state 79
    RETURN          shift and go to state 80
    ASSERT          shift and go to state 81
    PRINT           shift and go to state 82
    READ            shift and go to state 83
    SEMI            reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 47
    LPAREN          shift and go to state 49
    ADDRESS         shift and go to state 51
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 52
    ID              shift and go to state 25
    INT_CONST       shift and go to state 56
    CHAR_CONST      shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    STRING          shift and go to state 59

    expression_opt                 shift and go to state 74
    statement                      shift and go to state 213
    expression_statement           shift and go to state 66
    compound_statement             shift and go to state 67
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    assert_statement               shift and go to state 71
    print_statement                shift and go to state 72
    read_statement                 shift and go to state 73
    expression                     shift and go to state 76
    empty                          shift and go to state 183
    assignment_expression          shift and go to state 85
    binary_expression              shift and go to state 39
    unary_expression               shift and go to state 40
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 45
    unary_operator                 shift and go to state 48
    primary_expression             shift and go to state 50
    identifier                     shift and go to state 53
    constant                       shift and go to state 54
    string_constant                shift and go to state 55

state 213

    (121) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .

    LBRACE          reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    VOID            reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR            reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT             reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT           reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ADDRESS         reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST       reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STRING          reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RBRACE          reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 121 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 29 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 29 resolved as shift
WARNING: shift/reduce conflict for ID in state 29 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 61 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 61 resolved as shift
WARNING: shift/reduce conflict for ID in state 61 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 140 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 140 resolved as shift
WARNING: shift/reduce conflict for ID in state 140 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 199 resolved as shift
WARNING: reduce/reduce conflict in state 62 resolved using rule (type_specifier_opt -> empty)
WARNING: rejected rule (expression_opt -> empty) in state 62
WARNING: reduce/reduce conflict in state 135 resolved using rule (type_specifier_opt -> empty)
WARNING: rejected rule (expression_opt -> empty) in state 135
