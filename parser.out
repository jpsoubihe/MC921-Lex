Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> global_declaration_list
Rule 2     global_declaration_list -> global_declaration
Rule 3     global_declaration_list -> global_declaration_list global_declaration
Rule 4     global_declaration -> declaration
Rule 5     global_declaration -> function_definition
Rule 6     declaration -> decl_body SEMI
Rule 7     declaration_list -> declaration
Rule 8     declaration_list -> declaration_list declaration
Rule 9     declaration_list_opt -> declaration_list
Rule 10    declaration_list_opt -> empty
Rule 11    decl_body -> type_specifier init_declarator_list_opt
Rule 12    declarator -> direct_declarator
Rule 13    init_declarator -> declarator
Rule 14    init_declarator -> declarator EQUALS initializer
Rule 15    init_declarator_list -> init_declarator
Rule 16    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 17    init_declarator_list_opt -> init_declarator_list
Rule 18    init_declarator_list_opt -> empty
Rule 19    parameter_declaration -> type_specifier declarator
Rule 20    parameter_list -> parameter_declaration
Rule 21    parameter_list -> parameter_list COMMA parameter_declaration
Rule 22    direct_declarator -> identifier
Rule 23    direct_declarator -> LPAREN declarator RPAREN
Rule 24    direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET
Rule 25    direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN
Rule 26    direct_declarator -> direct_declarator LPAREN parameter_list RPAREN
Rule 27    initializer -> assignment_expression
Rule 28    initializer -> LBRACE initializer_list RBRACE
Rule 29    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 30    initializer_list -> initializer
Rule 31    initializer_list -> initializer_list COMMA initializer
Rule 32    postfix_expression -> primary_expression
Rule 33    postfix_expression -> postfix_expression PLUSPLUS
Rule 34    postfix_expression -> postfix_expression MINUSMINUS
Rule 35    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 36    postfix_expression -> postfix_expression LPAREN argument_expression RPAREN
Rule 37    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 38    argument_expression -> assignment_expression
Rule 39    argument_expression -> argument_expression COMMA assignment_expression
Rule 40    expression -> assignment_expression
Rule 41    expression -> expression COMMA assignment_expression
Rule 42    primary_expression -> identifier
Rule 43    primary_expression -> constant
Rule 44    primary_expression -> LPAREN expression RPAREN
Rule 45    cast_expression -> unary_expression
Rule 46    cast_expression -> LPAREN type_specifier RPAREN cast_expression
Rule 47    assignment_expression -> binary_expression
Rule 48    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 49    assignment_operator -> EQUALS
Rule 50    assignment_operator -> TIMESASSIGN
Rule 51    assignment_operator -> DIVIDEASSIGN
Rule 52    assignment_operator -> MODASSIGN
Rule 53    assignment_operator -> PLUSASSIGN
Rule 54    assignment_operator -> MINUSASSIGN
Rule 55    unary_expression -> postfix_expression
Rule 56    unary_expression -> PLUSPLUS unary_expression
Rule 57    unary_expression -> MINUSMINUS unary_expression
Rule 58    unary_expression -> unary_operator cast_expression
Rule 59    binary_expression -> cast_expression
Rule 60    binary_expression -> binary_expression TIMES binary_expression
Rule 61    binary_expression -> binary_expression DIVIDE binary_expression
Rule 62    binary_expression -> binary_expression MOD binary_expression
Rule 63    binary_expression -> binary_expression PLUS binary_expression
Rule 64    binary_expression -> binary_expression MINUS binary_expression
Rule 65    binary_expression -> binary_expression LT binary_expression
Rule 66    binary_expression -> binary_expression LE binary_expression
Rule 67    binary_expression -> binary_expression HT binary_expression
Rule 68    binary_expression -> binary_expression HE binary_expression
Rule 69    binary_expression -> binary_expression EQ binary_expression
Rule 70    binary_expression -> binary_expression DIFF binary_expression
Rule 71    binary_expression -> binary_expression AND binary_expression
Rule 72    binary_expression -> binary_expression OR binary_expression
Rule 73    constant_expression -> binary_expression
Rule 74    constant_expression_opt -> constant_expression
Rule 75    constant_expression_opt -> empty
Rule 76    identifier -> ID
Rule 77    identifier_list_opt -> identifier_list
Rule 78    identifier_list_opt -> empty
Rule 79    identifier_list -> identifier
Rule 80    identifier_list -> identifier_list COMMA identifier
Rule 81    unary_operator -> ADDRESS
Rule 82    unary_operator -> TIMES
Rule 83    unary_operator -> PLUS
Rule 84    unary_operator -> MINUS
Rule 85    unary_operator -> UNARYDIFF
Rule 86    type_specifier -> VOID
Rule 87    type_specifier -> CHAR
Rule 88    type_specifier -> INT
Rule 89    type_specifier -> FLOAT
Rule 90    constant -> INT_CONST
Rule 91    constant -> FLOAT_CONST
Rule 92    constant -> CHAR_CONST
Rule 93    constant -> STRING
Rule 94    jump_statement -> BREAK SEMI
Rule 95    jump_statement -> RETURN expression_opt SEMI
Rule 96    block_item -> declaration
Rule 97    block_item -> statement
Rule 98    block_item_list -> block_item
Rule 99    block_item_list -> block_item_list block_item
Rule 100   compound_statement -> LBRACE block_item_list RBRACE
Rule 101   selection_statement -> IF LPAREN expression RPAREN statement
Rule 102   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 103   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 104   iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 105   iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
Rule 106   expression_statement -> expression_opt SEMI
Rule 107   assert_statement -> ASSERT expression SEMI
Rule 108   print_statement -> PRINT LPAREN expression_opt RPAREN SEMI
Rule 109   read_statement -> READ LPAREN argument_expression RPAREN SEMI
Rule 110   statement -> expression_statement
Rule 111   statement -> selection_statement
Rule 112   statement -> compound_statement
Rule 113   statement -> iteration_statement
Rule 114   statement -> jump_statement
Rule 115   statement -> assert_statement
Rule 116   statement -> print_statement
Rule 117   statement -> read_statement
Rule 118   expression_opt -> expression
Rule 119   expression_opt -> empty
Rule 120   function_definition -> type_specifier declarator declaration_list_opt compound_statement
Rule 121   function_definition -> declarator declaration_list_opt compound_statement
Rule 122   empty -> <empty>

Terminals, with rules where they appear

ADDRESS              : 81
AND                  : 71
ASSERT               : 107
BREAK                : 94
CHAR                 : 87
CHAR_CONST           : 92
COMMA                : 16 21 29 31 39 41 80
DIFF                 : 70
DIVIDE               : 61
DIVIDEASSIGN         : 51
ELSE                 : 102
EQ                   : 69
EQUALS               : 14 49
FLOAT                : 89
FLOAT_CONST          : 91
FOR                  : 104 105
HE                   : 68
HT                   : 67
ID                   : 76
IF                   : 101 102
INT                  : 88
INT_CONST            : 90
LBRACE               : 28 29 100
LBRACKET             : 24 37
LE                   : 66
LPAREN               : 23 25 26 35 36 44 46 101 102 103 104 105 108 109
LT                   : 65
MINUS                : 64 84
MINUSASSIGN          : 54
MINUSMINUS           : 34 57
MOD                  : 62
MODASSIGN            : 52
OR                   : 72
PLUS                 : 63 83
PLUSASSIGN           : 53
PLUSPLUS             : 33 56
PRINT                : 108
RBRACE               : 28 29 100
RBRACKET             : 24 37
READ                 : 109
RETURN               : 95
RPAREN               : 23 25 26 35 36 44 46 101 102 103 104 105 108 109
SEMI                 : 6 94 95 104 104 105 106 107 108 109
STRING               : 93
TIMES                : 60 82
TIMESASSIGN          : 50
UNARYDIFF            : 85
VOID                 : 86
WHILE                : 103
error                : 

Nonterminals, with rules where they appear

argument_expression  : 36 39 109
assert_statement     : 115
assignment_expression : 27 38 39 40 41 48
assignment_operator  : 48
binary_expression    : 47 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73
block_item           : 98 99
block_item_list      : 99 100
cast_expression      : 46 58 59
compound_statement   : 112 120 121
constant             : 43
constant_expression  : 74
constant_expression_opt : 24
decl_body            : 6
declaration          : 4 7 8 96 105
declaration_list     : 8 9
declaration_list_opt : 120 121
declarator           : 13 14 19 23 120 121
direct_declarator    : 12 24 25 26
empty                : 10 18 75 78 119
expression           : 37 41 44 101 102 103 107 118
expression_opt       : 95 104 104 104 105 105 106 108
expression_statement : 110
function_definition  : 5
global_declaration   : 2 3
global_declaration_list : 1 3
identifier           : 22 42 79 80
identifier_list      : 77 80
identifier_list_opt  : 25
init_declarator      : 15 16
init_declarator_list : 16 17
init_declarator_list_opt : 11
initializer          : 14 30 31
initializer_list     : 28 29 31
iteration_statement  : 113
jump_statement       : 114
parameter_declaration : 20 21
parameter_list       : 21 26
postfix_expression   : 33 34 35 36 37 55
primary_expression   : 32
print_statement      : 116
program              : 0
read_statement       : 117
selection_statement  : 111
statement            : 97 101 102 102 103 104 105
type_specifier       : 11 19 46 120
unary_expression     : 45 48 56 57
unary_operator       : 58

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global_declaration_list
    (2) global_declaration_list -> . global_declaration
    (3) global_declaration_list -> . global_declaration_list global_declaration
    (4) global_declaration -> . declaration
    (5) global_declaration -> . function_definition
    (6) declaration -> . decl_body SEMI
    (120) function_definition -> . type_specifier declarator declaration_list_opt compound_statement
    (121) function_definition -> . declarator declaration_list_opt compound_statement
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (86) type_specifier -> . VOID
    (87) type_specifier -> . CHAR
    (88) type_specifier -> . INT
    (89) type_specifier -> . FLOAT
    (12) declarator -> . direct_declarator
    (22) direct_declarator -> . identifier
    (23) direct_declarator -> . LPAREN declarator RPAREN
    (24) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (25) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (26) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (76) identifier -> . ID

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    LPAREN          shift and go to state 15
    ID              shift and go to state 16

    program                        shift and go to state 1
    global_declaration_list        shift and go to state 2
    global_declaration             shift and go to state 3
    declaration                    shift and go to state 4
    function_definition            shift and go to state 5
    decl_body                      shift and go to state 6
    type_specifier                 shift and go to state 7
    declarator                     shift and go to state 8
    direct_declarator              shift and go to state 13
    identifier                     shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> global_declaration_list .
    (3) global_declaration_list -> global_declaration_list . global_declaration
    (4) global_declaration -> . declaration
    (5) global_declaration -> . function_definition
    (6) declaration -> . decl_body SEMI
    (120) function_definition -> . type_specifier declarator declaration_list_opt compound_statement
    (121) function_definition -> . declarator declaration_list_opt compound_statement
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (86) type_specifier -> . VOID
    (87) type_specifier -> . CHAR
    (88) type_specifier -> . INT
    (89) type_specifier -> . FLOAT
    (12) declarator -> . direct_declarator
    (22) direct_declarator -> . identifier
    (23) direct_declarator -> . LPAREN declarator RPAREN
    (24) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (25) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (26) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (76) identifier -> . ID

    $end            reduce using rule 1 (program -> global_declaration_list .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    LPAREN          shift and go to state 15
    ID              shift and go to state 16

    global_declaration             shift and go to state 17
    declaration                    shift and go to state 4
    function_definition            shift and go to state 5
    decl_body                      shift and go to state 6
    type_specifier                 shift and go to state 7
    declarator                     shift and go to state 8
    direct_declarator              shift and go to state 13
    identifier                     shift and go to state 14

state 3

    (2) global_declaration_list -> global_declaration .

    VOID            reduce using rule 2 (global_declaration_list -> global_declaration .)
    CHAR            reduce using rule 2 (global_declaration_list -> global_declaration .)
    INT             reduce using rule 2 (global_declaration_list -> global_declaration .)
    FLOAT           reduce using rule 2 (global_declaration_list -> global_declaration .)
    LPAREN          reduce using rule 2 (global_declaration_list -> global_declaration .)
    ID              reduce using rule 2 (global_declaration_list -> global_declaration .)
    $end            reduce using rule 2 (global_declaration_list -> global_declaration .)


state 4

    (4) global_declaration -> declaration .

    VOID            reduce using rule 4 (global_declaration -> declaration .)
    CHAR            reduce using rule 4 (global_declaration -> declaration .)
    INT             reduce using rule 4 (global_declaration -> declaration .)
    FLOAT           reduce using rule 4 (global_declaration -> declaration .)
    LPAREN          reduce using rule 4 (global_declaration -> declaration .)
    ID              reduce using rule 4 (global_declaration -> declaration .)
    $end            reduce using rule 4 (global_declaration -> declaration .)


state 5

    (5) global_declaration -> function_definition .

    VOID            reduce using rule 5 (global_declaration -> function_definition .)
    CHAR            reduce using rule 5 (global_declaration -> function_definition .)
    INT             reduce using rule 5 (global_declaration -> function_definition .)
    FLOAT           reduce using rule 5 (global_declaration -> function_definition .)
    LPAREN          reduce using rule 5 (global_declaration -> function_definition .)
    ID              reduce using rule 5 (global_declaration -> function_definition .)
    $end            reduce using rule 5 (global_declaration -> function_definition .)


state 6

    (6) declaration -> decl_body . SEMI

    SEMI            shift and go to state 18


state 7

    (120) function_definition -> type_specifier . declarator declaration_list_opt compound_statement
    (11) decl_body -> type_specifier . init_declarator_list_opt
    (12) declarator -> . direct_declarator
    (17) init_declarator_list_opt -> . init_declarator_list
    (18) init_declarator_list_opt -> . empty
    (22) direct_declarator -> . identifier
    (23) direct_declarator -> . LPAREN declarator RPAREN
    (24) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (25) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (26) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (15) init_declarator_list -> . init_declarator
    (16) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (122) empty -> .
    (76) identifier -> . ID
    (13) init_declarator -> . declarator
    (14) init_declarator -> . declarator EQUALS initializer

    LPAREN          shift and go to state 15
    SEMI            reduce using rule 122 (empty -> .)
    ID              shift and go to state 16

    declarator                     shift and go to state 19
    init_declarator_list_opt       shift and go to state 20
    direct_declarator              shift and go to state 13
    init_declarator_list           shift and go to state 21
    empty                          shift and go to state 22
    identifier                     shift and go to state 14
    init_declarator                shift and go to state 23

state 8

    (121) function_definition -> declarator . declaration_list_opt compound_statement
    (9) declaration_list_opt -> . declaration_list
    (10) declaration_list_opt -> . empty
    (7) declaration_list -> . declaration
    (8) declaration_list -> . declaration_list declaration
    (122) empty -> .
    (6) declaration -> . decl_body SEMI
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (86) type_specifier -> . VOID
    (87) type_specifier -> . CHAR
    (88) type_specifier -> . INT
    (89) type_specifier -> . FLOAT

    LBRACE          reduce using rule 122 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    declaration_list_opt           shift and go to state 24
    declaration_list               shift and go to state 25
    empty                          shift and go to state 26
    declaration                    shift and go to state 27
    decl_body                      shift and go to state 6
    type_specifier                 shift and go to state 28

state 9

    (86) type_specifier -> VOID .

    LPAREN          reduce using rule 86 (type_specifier -> VOID .)
    ID              reduce using rule 86 (type_specifier -> VOID .)
    SEMI            reduce using rule 86 (type_specifier -> VOID .)
    RPAREN          reduce using rule 86 (type_specifier -> VOID .)


state 10

    (87) type_specifier -> CHAR .

    LPAREN          reduce using rule 87 (type_specifier -> CHAR .)
    ID              reduce using rule 87 (type_specifier -> CHAR .)
    SEMI            reduce using rule 87 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 87 (type_specifier -> CHAR .)


state 11

    (88) type_specifier -> INT .

    LPAREN          reduce using rule 88 (type_specifier -> INT .)
    ID              reduce using rule 88 (type_specifier -> INT .)
    SEMI            reduce using rule 88 (type_specifier -> INT .)
    RPAREN          reduce using rule 88 (type_specifier -> INT .)


state 12

    (89) type_specifier -> FLOAT .

    LPAREN          reduce using rule 89 (type_specifier -> FLOAT .)
    ID              reduce using rule 89 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 89 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 89 (type_specifier -> FLOAT .)


state 13

    (12) declarator -> direct_declarator .
    (24) direct_declarator -> direct_declarator . LBRACKET constant_expression_opt RBRACKET
    (25) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN
    (26) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN

    VOID            reduce using rule 12 (declarator -> direct_declarator .)
    CHAR            reduce using rule 12 (declarator -> direct_declarator .)
    INT             reduce using rule 12 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 12 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 12 (declarator -> direct_declarator .)
    EQUALS          reduce using rule 12 (declarator -> direct_declarator .)
    COMMA           reduce using rule 12 (declarator -> direct_declarator .)
    SEMI            reduce using rule 12 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 12 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 29
    LPAREN          shift and go to state 30


state 14

    (22) direct_declarator -> identifier .

    LBRACKET        reduce using rule 22 (direct_declarator -> identifier .)
    LPAREN          reduce using rule 22 (direct_declarator -> identifier .)
    VOID            reduce using rule 22 (direct_declarator -> identifier .)
    CHAR            reduce using rule 22 (direct_declarator -> identifier .)
    INT             reduce using rule 22 (direct_declarator -> identifier .)
    FLOAT           reduce using rule 22 (direct_declarator -> identifier .)
    LBRACE          reduce using rule 22 (direct_declarator -> identifier .)
    EQUALS          reduce using rule 22 (direct_declarator -> identifier .)
    COMMA           reduce using rule 22 (direct_declarator -> identifier .)
    SEMI            reduce using rule 22 (direct_declarator -> identifier .)
    RPAREN          reduce using rule 22 (direct_declarator -> identifier .)


state 15

    (23) direct_declarator -> LPAREN . declarator RPAREN
    (12) declarator -> . direct_declarator
    (22) direct_declarator -> . identifier
    (23) direct_declarator -> . LPAREN declarator RPAREN
    (24) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (25) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (26) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (76) identifier -> . ID

    LPAREN          shift and go to state 15
    ID              shift and go to state 16

    declarator                     shift and go to state 31
    direct_declarator              shift and go to state 13
    identifier                     shift and go to state 14

state 16

    (76) identifier -> ID .

    LBRACKET        reduce using rule 76 (identifier -> ID .)
    LPAREN          reduce using rule 76 (identifier -> ID .)
    VOID            reduce using rule 76 (identifier -> ID .)
    CHAR            reduce using rule 76 (identifier -> ID .)
    INT             reduce using rule 76 (identifier -> ID .)
    FLOAT           reduce using rule 76 (identifier -> ID .)
    LBRACE          reduce using rule 76 (identifier -> ID .)
    EQUALS          reduce using rule 76 (identifier -> ID .)
    COMMA           reduce using rule 76 (identifier -> ID .)
    SEMI            reduce using rule 76 (identifier -> ID .)
    RPAREN          reduce using rule 76 (identifier -> ID .)
    PLUSPLUS        reduce using rule 76 (identifier -> ID .)
    MINUSMINUS      reduce using rule 76 (identifier -> ID .)
    TIMES           reduce using rule 76 (identifier -> ID .)
    DIVIDE          reduce using rule 76 (identifier -> ID .)
    MOD             reduce using rule 76 (identifier -> ID .)
    PLUS            reduce using rule 76 (identifier -> ID .)
    MINUS           reduce using rule 76 (identifier -> ID .)
    LT              reduce using rule 76 (identifier -> ID .)
    LE              reduce using rule 76 (identifier -> ID .)
    HT              reduce using rule 76 (identifier -> ID .)
    HE              reduce using rule 76 (identifier -> ID .)
    EQ              reduce using rule 76 (identifier -> ID .)
    DIFF            reduce using rule 76 (identifier -> ID .)
    AND             reduce using rule 76 (identifier -> ID .)
    OR              reduce using rule 76 (identifier -> ID .)
    RBRACKET        reduce using rule 76 (identifier -> ID .)
    TIMESASSIGN     reduce using rule 76 (identifier -> ID .)
    DIVIDEASSIGN    reduce using rule 76 (identifier -> ID .)
    MODASSIGN       reduce using rule 76 (identifier -> ID .)
    PLUSASSIGN      reduce using rule 76 (identifier -> ID .)
    MINUSASSIGN     reduce using rule 76 (identifier -> ID .)
    RBRACE          reduce using rule 76 (identifier -> ID .)


state 17

    (3) global_declaration_list -> global_declaration_list global_declaration .

    VOID            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    CHAR            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    INT             reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    FLOAT           reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    LPAREN          reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    ID              reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    $end            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)


state 18

    (6) declaration -> decl_body SEMI .

    VOID            reduce using rule 6 (declaration -> decl_body SEMI .)
    CHAR            reduce using rule 6 (declaration -> decl_body SEMI .)
    INT             reduce using rule 6 (declaration -> decl_body SEMI .)
    FLOAT           reduce using rule 6 (declaration -> decl_body SEMI .)
    LPAREN          reduce using rule 6 (declaration -> decl_body SEMI .)
    ID              reduce using rule 6 (declaration -> decl_body SEMI .)
    $end            reduce using rule 6 (declaration -> decl_body SEMI .)
    LBRACE          reduce using rule 6 (declaration -> decl_body SEMI .)
    RBRACE          reduce using rule 6 (declaration -> decl_body SEMI .)
    IF              reduce using rule 6 (declaration -> decl_body SEMI .)
    WHILE           reduce using rule 6 (declaration -> decl_body SEMI .)
    FOR             reduce using rule 6 (declaration -> decl_body SEMI .)
    BREAK           reduce using rule 6 (declaration -> decl_body SEMI .)
    RETURN          reduce using rule 6 (declaration -> decl_body SEMI .)
    ASSERT          reduce using rule 6 (declaration -> decl_body SEMI .)
    PRINT           reduce using rule 6 (declaration -> decl_body SEMI .)
    READ            reduce using rule 6 (declaration -> decl_body SEMI .)
    PLUSPLUS        reduce using rule 6 (declaration -> decl_body SEMI .)
    MINUSMINUS      reduce using rule 6 (declaration -> decl_body SEMI .)
    ADDRESS         reduce using rule 6 (declaration -> decl_body SEMI .)
    TIMES           reduce using rule 6 (declaration -> decl_body SEMI .)
    PLUS            reduce using rule 6 (declaration -> decl_body SEMI .)
    MINUS           reduce using rule 6 (declaration -> decl_body SEMI .)
    UNARYDIFF       reduce using rule 6 (declaration -> decl_body SEMI .)
    INT_CONST       reduce using rule 6 (declaration -> decl_body SEMI .)
    FLOAT_CONST     reduce using rule 6 (declaration -> decl_body SEMI .)
    CHAR_CONST      reduce using rule 6 (declaration -> decl_body SEMI .)
    STRING          reduce using rule 6 (declaration -> decl_body SEMI .)
    SEMI            reduce using rule 6 (declaration -> decl_body SEMI .)


state 19

    (120) function_definition -> type_specifier declarator . declaration_list_opt compound_statement
    (13) init_declarator -> declarator .
    (14) init_declarator -> declarator . EQUALS initializer
    (9) declaration_list_opt -> . declaration_list
    (10) declaration_list_opt -> . empty
    (7) declaration_list -> . declaration
    (8) declaration_list -> . declaration_list declaration
    (122) empty -> .
    (6) declaration -> . decl_body SEMI
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (86) type_specifier -> . VOID
    (87) type_specifier -> . CHAR
    (88) type_specifier -> . INT
    (89) type_specifier -> . FLOAT

    COMMA           reduce using rule 13 (init_declarator -> declarator .)
    SEMI            reduce using rule 13 (init_declarator -> declarator .)
    EQUALS          shift and go to state 33
    LBRACE          reduce using rule 122 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    type_specifier                 shift and go to state 28
    declaration_list_opt           shift and go to state 32
    declaration_list               shift and go to state 25
    empty                          shift and go to state 26
    declaration                    shift and go to state 27
    decl_body                      shift and go to state 6

state 20

    (11) decl_body -> type_specifier init_declarator_list_opt .

    SEMI            reduce using rule 11 (decl_body -> type_specifier init_declarator_list_opt .)


state 21

    (17) init_declarator_list_opt -> init_declarator_list .
    (16) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            reduce using rule 17 (init_declarator_list_opt -> init_declarator_list .)
    COMMA           shift and go to state 34


state 22

    (18) init_declarator_list_opt -> empty .

    SEMI            reduce using rule 18 (init_declarator_list_opt -> empty .)


state 23

    (15) init_declarator_list -> init_declarator .

    COMMA           reduce using rule 15 (init_declarator_list -> init_declarator .)
    SEMI            reduce using rule 15 (init_declarator_list -> init_declarator .)


state 24

    (121) function_definition -> declarator declaration_list_opt . compound_statement
    (100) compound_statement -> . LBRACE block_item_list RBRACE

    LBRACE          shift and go to state 36

    compound_statement             shift and go to state 35

state 25

    (9) declaration_list_opt -> declaration_list .
    (8) declaration_list -> declaration_list . declaration
    (6) declaration -> . decl_body SEMI
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (86) type_specifier -> . VOID
    (87) type_specifier -> . CHAR
    (88) type_specifier -> . INT
    (89) type_specifier -> . FLOAT

    LBRACE          reduce using rule 9 (declaration_list_opt -> declaration_list .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    declaration                    shift and go to state 37
    decl_body                      shift and go to state 6
    type_specifier                 shift and go to state 28

state 26

    (10) declaration_list_opt -> empty .

    LBRACE          reduce using rule 10 (declaration_list_opt -> empty .)


state 27

    (7) declaration_list -> declaration .

    VOID            reduce using rule 7 (declaration_list -> declaration .)
    CHAR            reduce using rule 7 (declaration_list -> declaration .)
    INT             reduce using rule 7 (declaration_list -> declaration .)
    FLOAT           reduce using rule 7 (declaration_list -> declaration .)
    LBRACE          reduce using rule 7 (declaration_list -> declaration .)


state 28

    (11) decl_body -> type_specifier . init_declarator_list_opt
    (17) init_declarator_list_opt -> . init_declarator_list
    (18) init_declarator_list_opt -> . empty
    (15) init_declarator_list -> . init_declarator
    (16) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (122) empty -> .
    (13) init_declarator -> . declarator
    (14) init_declarator -> . declarator EQUALS initializer
    (12) declarator -> . direct_declarator
    (22) direct_declarator -> . identifier
    (23) direct_declarator -> . LPAREN declarator RPAREN
    (24) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (25) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (26) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (76) identifier -> . ID

    SEMI            reduce using rule 122 (empty -> .)
    LPAREN          shift and go to state 15
    ID              shift and go to state 16

    init_declarator_list_opt       shift and go to state 20
    init_declarator_list           shift and go to state 21
    empty                          shift and go to state 22
    init_declarator                shift and go to state 23
    declarator                     shift and go to state 38
    direct_declarator              shift and go to state 13
    identifier                     shift and go to state 14

state 29

    (24) direct_declarator -> direct_declarator LBRACKET . constant_expression_opt RBRACKET
    (74) constant_expression_opt -> . constant_expression
    (75) constant_expression_opt -> . empty
    (73) constant_expression -> . binary_expression
    (122) empty -> .
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    RBRACKET        reduce using rule 122 (empty -> .)
    LPAREN          shift and go to state 48
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    constant_expression_opt        shift and go to state 39
    constant_expression            shift and go to state 40
    empty                          shift and go to state 41
    binary_expression              shift and go to state 42
    cast_expression                shift and go to state 43
    unary_expression               shift and go to state 47
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 30

    (25) direct_declarator -> direct_declarator LPAREN . identifier_list_opt RPAREN
    (26) direct_declarator -> direct_declarator LPAREN . parameter_list RPAREN
    (77) identifier_list_opt -> . identifier_list
    (78) identifier_list_opt -> . empty
    (20) parameter_list -> . parameter_declaration
    (21) parameter_list -> . parameter_list COMMA parameter_declaration
    (79) identifier_list -> . identifier
    (80) identifier_list -> . identifier_list COMMA identifier
    (122) empty -> .
    (19) parameter_declaration -> . type_specifier declarator
    (76) identifier -> . ID
    (86) type_specifier -> . VOID
    (87) type_specifier -> . CHAR
    (88) type_specifier -> . INT
    (89) type_specifier -> . FLOAT

    RPAREN          reduce using rule 122 (empty -> .)
    ID              shift and go to state 16
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    identifier_list_opt            shift and go to state 62
    parameter_list                 shift and go to state 63
    identifier_list                shift and go to state 64
    empty                          shift and go to state 65
    parameter_declaration          shift and go to state 66
    identifier                     shift and go to state 67
    type_specifier                 shift and go to state 68

state 31

    (23) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 69


state 32

    (120) function_definition -> type_specifier declarator declaration_list_opt . compound_statement
    (100) compound_statement -> . LBRACE block_item_list RBRACE

    LBRACE          shift and go to state 36

    compound_statement             shift and go to state 70

state 33

    (14) init_declarator -> declarator EQUALS . initializer
    (27) initializer -> . assignment_expression
    (28) initializer -> . LBRACE initializer_list RBRACE
    (29) initializer -> . LBRACE initializer_list COMMA RBRACE
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    LBRACE          shift and go to state 73
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    initializer                    shift and go to state 71
    assignment_expression          shift and go to state 72
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 34

    (16) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (13) init_declarator -> . declarator
    (14) init_declarator -> . declarator EQUALS initializer
    (12) declarator -> . direct_declarator
    (22) direct_declarator -> . identifier
    (23) direct_declarator -> . LPAREN declarator RPAREN
    (24) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (25) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (26) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (76) identifier -> . ID

    LPAREN          shift and go to state 15
    ID              shift and go to state 16

    init_declarator                shift and go to state 76
    declarator                     shift and go to state 38
    direct_declarator              shift and go to state 13
    identifier                     shift and go to state 14

state 35

    (121) function_definition -> declarator declaration_list_opt compound_statement .

    VOID            reduce using rule 121 (function_definition -> declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 121 (function_definition -> declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 121 (function_definition -> declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 121 (function_definition -> declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 121 (function_definition -> declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 121 (function_definition -> declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 121 (function_definition -> declarator declaration_list_opt compound_statement .)


state 36

    (100) compound_statement -> LBRACE . block_item_list RBRACE
    (98) block_item_list -> . block_item
    (99) block_item_list -> . block_item_list block_item
    (96) block_item -> . declaration
    (97) block_item -> . statement
    (6) declaration -> . decl_body SEMI
    (110) statement -> . expression_statement
    (111) statement -> . selection_statement
    (112) statement -> . compound_statement
    (113) statement -> . iteration_statement
    (114) statement -> . jump_statement
    (115) statement -> . assert_statement
    (116) statement -> . print_statement
    (117) statement -> . read_statement
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (106) expression_statement -> . expression_opt SEMI
    (101) selection_statement -> . IF LPAREN expression RPAREN statement
    (102) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) compound_statement -> . LBRACE block_item_list RBRACE
    (103) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (104) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (105) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (94) jump_statement -> . BREAK SEMI
    (95) jump_statement -> . RETURN expression_opt SEMI
    (107) assert_statement -> . ASSERT expression SEMI
    (108) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (109) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (86) type_specifier -> . VOID
    (87) type_specifier -> . CHAR
    (88) type_specifier -> . INT
    (89) type_specifier -> . FLOAT
    (118) expression_opt -> . expression
    (119) expression_opt -> . empty
    (40) expression -> . assignment_expression
    (41) expression -> . expression COMMA assignment_expression
    (122) empty -> .
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    IF              shift and go to state 90
    LBRACE          shift and go to state 36
    WHILE           shift and go to state 92
    FOR             shift and go to state 93
    BREAK           shift and go to state 94
    RETURN          shift and go to state 95
    ASSERT          shift and go to state 96
    PRINT           shift and go to state 97
    READ            shift and go to state 98
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    SEMI            reduce using rule 122 (empty -> .)
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    block_item_list                shift and go to state 77
    block_item                     shift and go to state 78
    declaration                    shift and go to state 79
    statement                      shift and go to state 80
    decl_body                      shift and go to state 6
    expression_statement           shift and go to state 81
    selection_statement            shift and go to state 82
    compound_statement             shift and go to state 83
    iteration_statement            shift and go to state 84
    jump_statement                 shift and go to state 85
    assert_statement               shift and go to state 86
    print_statement                shift and go to state 87
    read_statement                 shift and go to state 88
    type_specifier                 shift and go to state 28
    expression_opt                 shift and go to state 89
    expression                     shift and go to state 91
    empty                          shift and go to state 99
    assignment_expression          shift and go to state 100
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 37

    (8) declaration_list -> declaration_list declaration .

    VOID            reduce using rule 8 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 8 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 8 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 8 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 8 (declaration_list -> declaration_list declaration .)


state 38

    (13) init_declarator -> declarator .
    (14) init_declarator -> declarator . EQUALS initializer

    COMMA           reduce using rule 13 (init_declarator -> declarator .)
    SEMI            reduce using rule 13 (init_declarator -> declarator .)
    EQUALS          shift and go to state 33


state 39

    (24) direct_declarator -> direct_declarator LBRACKET constant_expression_opt . RBRACKET

    RBRACKET        shift and go to state 101


state 40

    (74) constant_expression_opt -> constant_expression .

    RBRACKET        reduce using rule 74 (constant_expression_opt -> constant_expression .)


state 41

    (75) constant_expression_opt -> empty .

    RBRACKET        reduce using rule 75 (constant_expression_opt -> empty .)


state 42

    (73) constant_expression -> binary_expression .
    (60) binary_expression -> binary_expression . TIMES binary_expression
    (61) binary_expression -> binary_expression . DIVIDE binary_expression
    (62) binary_expression -> binary_expression . MOD binary_expression
    (63) binary_expression -> binary_expression . PLUS binary_expression
    (64) binary_expression -> binary_expression . MINUS binary_expression
    (65) binary_expression -> binary_expression . LT binary_expression
    (66) binary_expression -> binary_expression . LE binary_expression
    (67) binary_expression -> binary_expression . HT binary_expression
    (68) binary_expression -> binary_expression . HE binary_expression
    (69) binary_expression -> binary_expression . EQ binary_expression
    (70) binary_expression -> binary_expression . DIFF binary_expression
    (71) binary_expression -> binary_expression . AND binary_expression
    (72) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 73 (constant_expression -> binary_expression .)
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    LT              shift and go to state 107
    LE              shift and go to state 108
    HT              shift and go to state 109
    HE              shift and go to state 110
    EQ              shift and go to state 111
    DIFF            shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 43

    (59) binary_expression -> cast_expression .

    TIMES           reduce using rule 59 (binary_expression -> cast_expression .)
    DIVIDE          reduce using rule 59 (binary_expression -> cast_expression .)
    MOD             reduce using rule 59 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 59 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 59 (binary_expression -> cast_expression .)
    LT              reduce using rule 59 (binary_expression -> cast_expression .)
    LE              reduce using rule 59 (binary_expression -> cast_expression .)
    HT              reduce using rule 59 (binary_expression -> cast_expression .)
    HE              reduce using rule 59 (binary_expression -> cast_expression .)
    EQ              reduce using rule 59 (binary_expression -> cast_expression .)
    DIFF            reduce using rule 59 (binary_expression -> cast_expression .)
    AND             reduce using rule 59 (binary_expression -> cast_expression .)
    OR              reduce using rule 59 (binary_expression -> cast_expression .)
    RBRACKET        reduce using rule 59 (binary_expression -> cast_expression .)
    COMMA           reduce using rule 59 (binary_expression -> cast_expression .)
    SEMI            reduce using rule 59 (binary_expression -> cast_expression .)
    RPAREN          reduce using rule 59 (binary_expression -> cast_expression .)
    RBRACE          reduce using rule 59 (binary_expression -> cast_expression .)


state 44

    (82) unary_operator -> TIMES .

    LPAREN          reduce using rule 82 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 82 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 82 (unary_operator -> TIMES .)
    ADDRESS         reduce using rule 82 (unary_operator -> TIMES .)
    TIMES           reduce using rule 82 (unary_operator -> TIMES .)
    PLUS            reduce using rule 82 (unary_operator -> TIMES .)
    MINUS           reduce using rule 82 (unary_operator -> TIMES .)
    UNARYDIFF       reduce using rule 82 (unary_operator -> TIMES .)
    ID              reduce using rule 82 (unary_operator -> TIMES .)
    INT_CONST       reduce using rule 82 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 82 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 82 (unary_operator -> TIMES .)
    STRING          reduce using rule 82 (unary_operator -> TIMES .)


state 45

    (83) unary_operator -> PLUS .

    LPAREN          reduce using rule 83 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 83 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 83 (unary_operator -> PLUS .)
    ADDRESS         reduce using rule 83 (unary_operator -> PLUS .)
    TIMES           reduce using rule 83 (unary_operator -> PLUS .)
    PLUS            reduce using rule 83 (unary_operator -> PLUS .)
    MINUS           reduce using rule 83 (unary_operator -> PLUS .)
    UNARYDIFF       reduce using rule 83 (unary_operator -> PLUS .)
    ID              reduce using rule 83 (unary_operator -> PLUS .)
    INT_CONST       reduce using rule 83 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 83 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 83 (unary_operator -> PLUS .)
    STRING          reduce using rule 83 (unary_operator -> PLUS .)


state 46

    (84) unary_operator -> MINUS .

    LPAREN          reduce using rule 84 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 84 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 84 (unary_operator -> MINUS .)
    ADDRESS         reduce using rule 84 (unary_operator -> MINUS .)
    TIMES           reduce using rule 84 (unary_operator -> MINUS .)
    PLUS            reduce using rule 84 (unary_operator -> MINUS .)
    MINUS           reduce using rule 84 (unary_operator -> MINUS .)
    UNARYDIFF       reduce using rule 84 (unary_operator -> MINUS .)
    ID              reduce using rule 84 (unary_operator -> MINUS .)
    INT_CONST       reduce using rule 84 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 84 (unary_operator -> MINUS .)
    CHAR_CONST      reduce using rule 84 (unary_operator -> MINUS .)
    STRING          reduce using rule 84 (unary_operator -> MINUS .)


state 47

    (45) cast_expression -> unary_expression .

    TIMES           reduce using rule 45 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 45 (cast_expression -> unary_expression .)
    MOD             reduce using rule 45 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 45 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 45 (cast_expression -> unary_expression .)
    LT              reduce using rule 45 (cast_expression -> unary_expression .)
    LE              reduce using rule 45 (cast_expression -> unary_expression .)
    HT              reduce using rule 45 (cast_expression -> unary_expression .)
    HE              reduce using rule 45 (cast_expression -> unary_expression .)
    EQ              reduce using rule 45 (cast_expression -> unary_expression .)
    DIFF            reduce using rule 45 (cast_expression -> unary_expression .)
    AND             reduce using rule 45 (cast_expression -> unary_expression .)
    OR              reduce using rule 45 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 45 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 45 (cast_expression -> unary_expression .)
    TIMESASSIGN     reduce using rule 45 (cast_expression -> unary_expression .)
    DIVIDEASSIGN    reduce using rule 45 (cast_expression -> unary_expression .)
    MODASSIGN       reduce using rule 45 (cast_expression -> unary_expression .)
    PLUSASSIGN      reduce using rule 45 (cast_expression -> unary_expression .)
    MINUSASSIGN     reduce using rule 45 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 45 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 45 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 45 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 45 (cast_expression -> unary_expression .)


state 48

    (46) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (44) primary_expression -> LPAREN . expression RPAREN
    (86) type_specifier -> . VOID
    (87) type_specifier -> . CHAR
    (88) type_specifier -> . INT
    (89) type_specifier -> . FLOAT
    (40) expression -> . assignment_expression
    (41) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    type_specifier                 shift and go to state 115
    cast_expression                shift and go to state 43
    expression                     shift and go to state 116
    assignment_expression          shift and go to state 100
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 49

    (55) unary_expression -> postfix_expression .
    (33) postfix_expression -> postfix_expression . PLUSPLUS
    (34) postfix_expression -> postfix_expression . MINUSMINUS
    (35) postfix_expression -> postfix_expression . LPAREN RPAREN
    (36) postfix_expression -> postfix_expression . LPAREN argument_expression RPAREN
    (37) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET

    TIMES           reduce using rule 55 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 55 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 55 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 55 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 55 (unary_expression -> postfix_expression .)
    LT              reduce using rule 55 (unary_expression -> postfix_expression .)
    LE              reduce using rule 55 (unary_expression -> postfix_expression .)
    HT              reduce using rule 55 (unary_expression -> postfix_expression .)
    HE              reduce using rule 55 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 55 (unary_expression -> postfix_expression .)
    DIFF            reduce using rule 55 (unary_expression -> postfix_expression .)
    AND             reduce using rule 55 (unary_expression -> postfix_expression .)
    OR              reduce using rule 55 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 55 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 55 (unary_expression -> postfix_expression .)
    TIMESASSIGN     reduce using rule 55 (unary_expression -> postfix_expression .)
    DIVIDEASSIGN    reduce using rule 55 (unary_expression -> postfix_expression .)
    MODASSIGN       reduce using rule 55 (unary_expression -> postfix_expression .)
    PLUSASSIGN      reduce using rule 55 (unary_expression -> postfix_expression .)
    MINUSASSIGN     reduce using rule 55 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 55 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 55 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 55 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 55 (unary_expression -> postfix_expression .)
    PLUSPLUS        shift and go to state 117
    MINUSMINUS      shift and go to state 118
    LPAREN          shift and go to state 119
    LBRACKET        shift and go to state 120


state 50

    (56) unary_expression -> PLUSPLUS . unary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    LPAREN          shift and go to state 122
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    unary_expression               shift and go to state 121
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 51

    (57) unary_expression -> MINUSMINUS . unary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    LPAREN          shift and go to state 122
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    unary_expression               shift and go to state 123
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 52

    (58) unary_expression -> unary_operator . cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    LPAREN          shift and go to state 48
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    unary_operator                 shift and go to state 52
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 47
    postfix_expression             shift and go to state 49
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 53

    (32) postfix_expression -> primary_expression .

    PLUSPLUS        reduce using rule 32 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 32 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 32 (postfix_expression -> primary_expression .)
    LBRACKET        reduce using rule 32 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 32 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 32 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 32 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 32 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 32 (postfix_expression -> primary_expression .)
    LT              reduce using rule 32 (postfix_expression -> primary_expression .)
    LE              reduce using rule 32 (postfix_expression -> primary_expression .)
    HT              reduce using rule 32 (postfix_expression -> primary_expression .)
    HE              reduce using rule 32 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 32 (postfix_expression -> primary_expression .)
    DIFF            reduce using rule 32 (postfix_expression -> primary_expression .)
    AND             reduce using rule 32 (postfix_expression -> primary_expression .)
    OR              reduce using rule 32 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 32 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 32 (postfix_expression -> primary_expression .)
    TIMESASSIGN     reduce using rule 32 (postfix_expression -> primary_expression .)
    DIVIDEASSIGN    reduce using rule 32 (postfix_expression -> primary_expression .)
    MODASSIGN       reduce using rule 32 (postfix_expression -> primary_expression .)
    PLUSASSIGN      reduce using rule 32 (postfix_expression -> primary_expression .)
    MINUSASSIGN     reduce using rule 32 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 32 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 32 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 32 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 32 (postfix_expression -> primary_expression .)


state 54

    (81) unary_operator -> ADDRESS .

    LPAREN          reduce using rule 81 (unary_operator -> ADDRESS .)
    PLUSPLUS        reduce using rule 81 (unary_operator -> ADDRESS .)
    MINUSMINUS      reduce using rule 81 (unary_operator -> ADDRESS .)
    ADDRESS         reduce using rule 81 (unary_operator -> ADDRESS .)
    TIMES           reduce using rule 81 (unary_operator -> ADDRESS .)
    PLUS            reduce using rule 81 (unary_operator -> ADDRESS .)
    MINUS           reduce using rule 81 (unary_operator -> ADDRESS .)
    UNARYDIFF       reduce using rule 81 (unary_operator -> ADDRESS .)
    ID              reduce using rule 81 (unary_operator -> ADDRESS .)
    INT_CONST       reduce using rule 81 (unary_operator -> ADDRESS .)
    FLOAT_CONST     reduce using rule 81 (unary_operator -> ADDRESS .)
    CHAR_CONST      reduce using rule 81 (unary_operator -> ADDRESS .)
    STRING          reduce using rule 81 (unary_operator -> ADDRESS .)


state 55

    (85) unary_operator -> UNARYDIFF .

    LPAREN          reduce using rule 85 (unary_operator -> UNARYDIFF .)
    PLUSPLUS        reduce using rule 85 (unary_operator -> UNARYDIFF .)
    MINUSMINUS      reduce using rule 85 (unary_operator -> UNARYDIFF .)
    ADDRESS         reduce using rule 85 (unary_operator -> UNARYDIFF .)
    TIMES           reduce using rule 85 (unary_operator -> UNARYDIFF .)
    PLUS            reduce using rule 85 (unary_operator -> UNARYDIFF .)
    MINUS           reduce using rule 85 (unary_operator -> UNARYDIFF .)
    UNARYDIFF       reduce using rule 85 (unary_operator -> UNARYDIFF .)
    ID              reduce using rule 85 (unary_operator -> UNARYDIFF .)
    INT_CONST       reduce using rule 85 (unary_operator -> UNARYDIFF .)
    FLOAT_CONST     reduce using rule 85 (unary_operator -> UNARYDIFF .)
    CHAR_CONST      reduce using rule 85 (unary_operator -> UNARYDIFF .)
    STRING          reduce using rule 85 (unary_operator -> UNARYDIFF .)


state 56

    (42) primary_expression -> identifier .

    PLUSPLUS        reduce using rule 42 (primary_expression -> identifier .)
    MINUSMINUS      reduce using rule 42 (primary_expression -> identifier .)
    LPAREN          reduce using rule 42 (primary_expression -> identifier .)
    LBRACKET        reduce using rule 42 (primary_expression -> identifier .)
    TIMES           reduce using rule 42 (primary_expression -> identifier .)
    DIVIDE          reduce using rule 42 (primary_expression -> identifier .)
    MOD             reduce using rule 42 (primary_expression -> identifier .)
    PLUS            reduce using rule 42 (primary_expression -> identifier .)
    MINUS           reduce using rule 42 (primary_expression -> identifier .)
    LT              reduce using rule 42 (primary_expression -> identifier .)
    LE              reduce using rule 42 (primary_expression -> identifier .)
    HT              reduce using rule 42 (primary_expression -> identifier .)
    HE              reduce using rule 42 (primary_expression -> identifier .)
    EQ              reduce using rule 42 (primary_expression -> identifier .)
    DIFF            reduce using rule 42 (primary_expression -> identifier .)
    AND             reduce using rule 42 (primary_expression -> identifier .)
    OR              reduce using rule 42 (primary_expression -> identifier .)
    RBRACKET        reduce using rule 42 (primary_expression -> identifier .)
    EQUALS          reduce using rule 42 (primary_expression -> identifier .)
    TIMESASSIGN     reduce using rule 42 (primary_expression -> identifier .)
    DIVIDEASSIGN    reduce using rule 42 (primary_expression -> identifier .)
    MODASSIGN       reduce using rule 42 (primary_expression -> identifier .)
    PLUSASSIGN      reduce using rule 42 (primary_expression -> identifier .)
    MINUSASSIGN     reduce using rule 42 (primary_expression -> identifier .)
    COMMA           reduce using rule 42 (primary_expression -> identifier .)
    SEMI            reduce using rule 42 (primary_expression -> identifier .)
    RPAREN          reduce using rule 42 (primary_expression -> identifier .)
    RBRACE          reduce using rule 42 (primary_expression -> identifier .)


state 57

    (43) primary_expression -> constant .

    PLUSPLUS        reduce using rule 43 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 43 (primary_expression -> constant .)
    LPAREN          reduce using rule 43 (primary_expression -> constant .)
    LBRACKET        reduce using rule 43 (primary_expression -> constant .)
    TIMES           reduce using rule 43 (primary_expression -> constant .)
    DIVIDE          reduce using rule 43 (primary_expression -> constant .)
    MOD             reduce using rule 43 (primary_expression -> constant .)
    PLUS            reduce using rule 43 (primary_expression -> constant .)
    MINUS           reduce using rule 43 (primary_expression -> constant .)
    LT              reduce using rule 43 (primary_expression -> constant .)
    LE              reduce using rule 43 (primary_expression -> constant .)
    HT              reduce using rule 43 (primary_expression -> constant .)
    HE              reduce using rule 43 (primary_expression -> constant .)
    EQ              reduce using rule 43 (primary_expression -> constant .)
    DIFF            reduce using rule 43 (primary_expression -> constant .)
    AND             reduce using rule 43 (primary_expression -> constant .)
    OR              reduce using rule 43 (primary_expression -> constant .)
    RBRACKET        reduce using rule 43 (primary_expression -> constant .)
    EQUALS          reduce using rule 43 (primary_expression -> constant .)
    TIMESASSIGN     reduce using rule 43 (primary_expression -> constant .)
    DIVIDEASSIGN    reduce using rule 43 (primary_expression -> constant .)
    MODASSIGN       reduce using rule 43 (primary_expression -> constant .)
    PLUSASSIGN      reduce using rule 43 (primary_expression -> constant .)
    MINUSASSIGN     reduce using rule 43 (primary_expression -> constant .)
    COMMA           reduce using rule 43 (primary_expression -> constant .)
    SEMI            reduce using rule 43 (primary_expression -> constant .)
    RPAREN          reduce using rule 43 (primary_expression -> constant .)
    RBRACE          reduce using rule 43 (primary_expression -> constant .)


state 58

    (90) constant -> INT_CONST .

    PLUSPLUS        reduce using rule 90 (constant -> INT_CONST .)
    MINUSMINUS      reduce using rule 90 (constant -> INT_CONST .)
    LPAREN          reduce using rule 90 (constant -> INT_CONST .)
    LBRACKET        reduce using rule 90 (constant -> INT_CONST .)
    TIMES           reduce using rule 90 (constant -> INT_CONST .)
    DIVIDE          reduce using rule 90 (constant -> INT_CONST .)
    MOD             reduce using rule 90 (constant -> INT_CONST .)
    PLUS            reduce using rule 90 (constant -> INT_CONST .)
    MINUS           reduce using rule 90 (constant -> INT_CONST .)
    LT              reduce using rule 90 (constant -> INT_CONST .)
    LE              reduce using rule 90 (constant -> INT_CONST .)
    HT              reduce using rule 90 (constant -> INT_CONST .)
    HE              reduce using rule 90 (constant -> INT_CONST .)
    EQ              reduce using rule 90 (constant -> INT_CONST .)
    DIFF            reduce using rule 90 (constant -> INT_CONST .)
    AND             reduce using rule 90 (constant -> INT_CONST .)
    OR              reduce using rule 90 (constant -> INT_CONST .)
    RBRACKET        reduce using rule 90 (constant -> INT_CONST .)
    EQUALS          reduce using rule 90 (constant -> INT_CONST .)
    TIMESASSIGN     reduce using rule 90 (constant -> INT_CONST .)
    DIVIDEASSIGN    reduce using rule 90 (constant -> INT_CONST .)
    MODASSIGN       reduce using rule 90 (constant -> INT_CONST .)
    PLUSASSIGN      reduce using rule 90 (constant -> INT_CONST .)
    MINUSASSIGN     reduce using rule 90 (constant -> INT_CONST .)
    COMMA           reduce using rule 90 (constant -> INT_CONST .)
    SEMI            reduce using rule 90 (constant -> INT_CONST .)
    RPAREN          reduce using rule 90 (constant -> INT_CONST .)
    RBRACE          reduce using rule 90 (constant -> INT_CONST .)


state 59

    (91) constant -> FLOAT_CONST .

    PLUSPLUS        reduce using rule 91 (constant -> FLOAT_CONST .)
    MINUSMINUS      reduce using rule 91 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 91 (constant -> FLOAT_CONST .)
    LBRACKET        reduce using rule 91 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 91 (constant -> FLOAT_CONST .)
    DIVIDE          reduce using rule 91 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 91 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 91 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 91 (constant -> FLOAT_CONST .)
    LT              reduce using rule 91 (constant -> FLOAT_CONST .)
    LE              reduce using rule 91 (constant -> FLOAT_CONST .)
    HT              reduce using rule 91 (constant -> FLOAT_CONST .)
    HE              reduce using rule 91 (constant -> FLOAT_CONST .)
    EQ              reduce using rule 91 (constant -> FLOAT_CONST .)
    DIFF            reduce using rule 91 (constant -> FLOAT_CONST .)
    AND             reduce using rule 91 (constant -> FLOAT_CONST .)
    OR              reduce using rule 91 (constant -> FLOAT_CONST .)
    RBRACKET        reduce using rule 91 (constant -> FLOAT_CONST .)
    EQUALS          reduce using rule 91 (constant -> FLOAT_CONST .)
    TIMESASSIGN     reduce using rule 91 (constant -> FLOAT_CONST .)
    DIVIDEASSIGN    reduce using rule 91 (constant -> FLOAT_CONST .)
    MODASSIGN       reduce using rule 91 (constant -> FLOAT_CONST .)
    PLUSASSIGN      reduce using rule 91 (constant -> FLOAT_CONST .)
    MINUSASSIGN     reduce using rule 91 (constant -> FLOAT_CONST .)
    COMMA           reduce using rule 91 (constant -> FLOAT_CONST .)
    SEMI            reduce using rule 91 (constant -> FLOAT_CONST .)
    RPAREN          reduce using rule 91 (constant -> FLOAT_CONST .)
    RBRACE          reduce using rule 91 (constant -> FLOAT_CONST .)


state 60

    (92) constant -> CHAR_CONST .

    PLUSPLUS        reduce using rule 92 (constant -> CHAR_CONST .)
    MINUSMINUS      reduce using rule 92 (constant -> CHAR_CONST .)
    LPAREN          reduce using rule 92 (constant -> CHAR_CONST .)
    LBRACKET        reduce using rule 92 (constant -> CHAR_CONST .)
    TIMES           reduce using rule 92 (constant -> CHAR_CONST .)
    DIVIDE          reduce using rule 92 (constant -> CHAR_CONST .)
    MOD             reduce using rule 92 (constant -> CHAR_CONST .)
    PLUS            reduce using rule 92 (constant -> CHAR_CONST .)
    MINUS           reduce using rule 92 (constant -> CHAR_CONST .)
    LT              reduce using rule 92 (constant -> CHAR_CONST .)
    LE              reduce using rule 92 (constant -> CHAR_CONST .)
    HT              reduce using rule 92 (constant -> CHAR_CONST .)
    HE              reduce using rule 92 (constant -> CHAR_CONST .)
    EQ              reduce using rule 92 (constant -> CHAR_CONST .)
    DIFF            reduce using rule 92 (constant -> CHAR_CONST .)
    AND             reduce using rule 92 (constant -> CHAR_CONST .)
    OR              reduce using rule 92 (constant -> CHAR_CONST .)
    RBRACKET        reduce using rule 92 (constant -> CHAR_CONST .)
    EQUALS          reduce using rule 92 (constant -> CHAR_CONST .)
    TIMESASSIGN     reduce using rule 92 (constant -> CHAR_CONST .)
    DIVIDEASSIGN    reduce using rule 92 (constant -> CHAR_CONST .)
    MODASSIGN       reduce using rule 92 (constant -> CHAR_CONST .)
    PLUSASSIGN      reduce using rule 92 (constant -> CHAR_CONST .)
    MINUSASSIGN     reduce using rule 92 (constant -> CHAR_CONST .)
    COMMA           reduce using rule 92 (constant -> CHAR_CONST .)
    SEMI            reduce using rule 92 (constant -> CHAR_CONST .)
    RPAREN          reduce using rule 92 (constant -> CHAR_CONST .)
    RBRACE          reduce using rule 92 (constant -> CHAR_CONST .)


state 61

    (93) constant -> STRING .

    PLUSPLUS        reduce using rule 93 (constant -> STRING .)
    MINUSMINUS      reduce using rule 93 (constant -> STRING .)
    LPAREN          reduce using rule 93 (constant -> STRING .)
    LBRACKET        reduce using rule 93 (constant -> STRING .)
    TIMES           reduce using rule 93 (constant -> STRING .)
    DIVIDE          reduce using rule 93 (constant -> STRING .)
    MOD             reduce using rule 93 (constant -> STRING .)
    PLUS            reduce using rule 93 (constant -> STRING .)
    MINUS           reduce using rule 93 (constant -> STRING .)
    LT              reduce using rule 93 (constant -> STRING .)
    LE              reduce using rule 93 (constant -> STRING .)
    HT              reduce using rule 93 (constant -> STRING .)
    HE              reduce using rule 93 (constant -> STRING .)
    EQ              reduce using rule 93 (constant -> STRING .)
    DIFF            reduce using rule 93 (constant -> STRING .)
    AND             reduce using rule 93 (constant -> STRING .)
    OR              reduce using rule 93 (constant -> STRING .)
    RBRACKET        reduce using rule 93 (constant -> STRING .)
    EQUALS          reduce using rule 93 (constant -> STRING .)
    TIMESASSIGN     reduce using rule 93 (constant -> STRING .)
    DIVIDEASSIGN    reduce using rule 93 (constant -> STRING .)
    MODASSIGN       reduce using rule 93 (constant -> STRING .)
    PLUSASSIGN      reduce using rule 93 (constant -> STRING .)
    MINUSASSIGN     reduce using rule 93 (constant -> STRING .)
    COMMA           reduce using rule 93 (constant -> STRING .)
    SEMI            reduce using rule 93 (constant -> STRING .)
    RPAREN          reduce using rule 93 (constant -> STRING .)
    RBRACE          reduce using rule 93 (constant -> STRING .)


state 62

    (25) direct_declarator -> direct_declarator LPAREN identifier_list_opt . RPAREN

    RPAREN          shift and go to state 125


state 63

    (26) direct_declarator -> direct_declarator LPAREN parameter_list . RPAREN
    (21) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          shift and go to state 126
    COMMA           shift and go to state 127


state 64

    (77) identifier_list_opt -> identifier_list .
    (80) identifier_list -> identifier_list . COMMA identifier

    RPAREN          reduce using rule 77 (identifier_list_opt -> identifier_list .)
    COMMA           shift and go to state 128


state 65

    (78) identifier_list_opt -> empty .

    RPAREN          reduce using rule 78 (identifier_list_opt -> empty .)


state 66

    (20) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 20 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 20 (parameter_list -> parameter_declaration .)


state 67

    (79) identifier_list -> identifier .

    COMMA           reduce using rule 79 (identifier_list -> identifier .)
    RPAREN          reduce using rule 79 (identifier_list -> identifier .)


state 68

    (19) parameter_declaration -> type_specifier . declarator
    (12) declarator -> . direct_declarator
    (22) direct_declarator -> . identifier
    (23) direct_declarator -> . LPAREN declarator RPAREN
    (24) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (25) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (26) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (76) identifier -> . ID

    LPAREN          shift and go to state 15
    ID              shift and go to state 16

    declarator                     shift and go to state 129
    direct_declarator              shift and go to state 13
    identifier                     shift and go to state 14

state 69

    (23) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)


state 70

    (120) function_definition -> type_specifier declarator declaration_list_opt compound_statement .

    VOID            reduce using rule 120 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 120 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 120 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 120 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 120 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 120 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 120 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)


state 71

    (14) init_declarator -> declarator EQUALS initializer .

    COMMA           reduce using rule 14 (init_declarator -> declarator EQUALS initializer .)
    SEMI            reduce using rule 14 (init_declarator -> declarator EQUALS initializer .)


state 72

    (27) initializer -> assignment_expression .

    COMMA           reduce using rule 27 (initializer -> assignment_expression .)
    SEMI            reduce using rule 27 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 27 (initializer -> assignment_expression .)


state 73

    (28) initializer -> LBRACE . initializer_list RBRACE
    (29) initializer -> LBRACE . initializer_list COMMA RBRACE
    (30) initializer_list -> . initializer
    (31) initializer_list -> . initializer_list COMMA initializer
    (27) initializer -> . assignment_expression
    (28) initializer -> . LBRACE initializer_list RBRACE
    (29) initializer -> . LBRACE initializer_list COMMA RBRACE
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    LBRACE          shift and go to state 73
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    initializer_list               shift and go to state 130
    initializer                    shift and go to state 131
    assignment_expression          shift and go to state 72
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 74

    (47) assignment_expression -> binary_expression .
    (60) binary_expression -> binary_expression . TIMES binary_expression
    (61) binary_expression -> binary_expression . DIVIDE binary_expression
    (62) binary_expression -> binary_expression . MOD binary_expression
    (63) binary_expression -> binary_expression . PLUS binary_expression
    (64) binary_expression -> binary_expression . MINUS binary_expression
    (65) binary_expression -> binary_expression . LT binary_expression
    (66) binary_expression -> binary_expression . LE binary_expression
    (67) binary_expression -> binary_expression . HT binary_expression
    (68) binary_expression -> binary_expression . HE binary_expression
    (69) binary_expression -> binary_expression . EQ binary_expression
    (70) binary_expression -> binary_expression . DIFF binary_expression
    (71) binary_expression -> binary_expression . AND binary_expression
    (72) binary_expression -> binary_expression . OR binary_expression

    COMMA           reduce using rule 47 (assignment_expression -> binary_expression .)
    SEMI            reduce using rule 47 (assignment_expression -> binary_expression .)
    RPAREN          reduce using rule 47 (assignment_expression -> binary_expression .)
    RBRACE          reduce using rule 47 (assignment_expression -> binary_expression .)
    RBRACKET        reduce using rule 47 (assignment_expression -> binary_expression .)
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    LT              shift and go to state 107
    LE              shift and go to state 108
    HT              shift and go to state 109
    HE              shift and go to state 110
    EQ              shift and go to state 111
    DIFF            shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 75

    (48) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (45) cast_expression -> unary_expression .
    (49) assignment_operator -> . EQUALS
    (50) assignment_operator -> . TIMESASSIGN
    (51) assignment_operator -> . DIVIDEASSIGN
    (52) assignment_operator -> . MODASSIGN
    (53) assignment_operator -> . PLUSASSIGN
    (54) assignment_operator -> . MINUSASSIGN

    TIMES           reduce using rule 45 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 45 (cast_expression -> unary_expression .)
    MOD             reduce using rule 45 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 45 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 45 (cast_expression -> unary_expression .)
    LT              reduce using rule 45 (cast_expression -> unary_expression .)
    LE              reduce using rule 45 (cast_expression -> unary_expression .)
    HT              reduce using rule 45 (cast_expression -> unary_expression .)
    HE              reduce using rule 45 (cast_expression -> unary_expression .)
    EQ              reduce using rule 45 (cast_expression -> unary_expression .)
    DIFF            reduce using rule 45 (cast_expression -> unary_expression .)
    AND             reduce using rule 45 (cast_expression -> unary_expression .)
    OR              reduce using rule 45 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 45 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 45 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 45 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 45 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 45 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 133
    TIMESASSIGN     shift and go to state 134
    DIVIDEASSIGN    shift and go to state 135
    MODASSIGN       shift and go to state 136
    PLUSASSIGN      shift and go to state 137
    MINUSASSIGN     shift and go to state 138

    assignment_operator            shift and go to state 132

state 76

    (16) init_declarator_list -> init_declarator_list COMMA init_declarator .

    COMMA           reduce using rule 16 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 16 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 77

    (100) compound_statement -> LBRACE block_item_list . RBRACE
    (99) block_item_list -> block_item_list . block_item
    (96) block_item -> . declaration
    (97) block_item -> . statement
    (6) declaration -> . decl_body SEMI
    (110) statement -> . expression_statement
    (111) statement -> . selection_statement
    (112) statement -> . compound_statement
    (113) statement -> . iteration_statement
    (114) statement -> . jump_statement
    (115) statement -> . assert_statement
    (116) statement -> . print_statement
    (117) statement -> . read_statement
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (106) expression_statement -> . expression_opt SEMI
    (101) selection_statement -> . IF LPAREN expression RPAREN statement
    (102) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) compound_statement -> . LBRACE block_item_list RBRACE
    (103) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (104) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (105) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (94) jump_statement -> . BREAK SEMI
    (95) jump_statement -> . RETURN expression_opt SEMI
    (107) assert_statement -> . ASSERT expression SEMI
    (108) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (109) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (86) type_specifier -> . VOID
    (87) type_specifier -> . CHAR
    (88) type_specifier -> . INT
    (89) type_specifier -> . FLOAT
    (118) expression_opt -> . expression
    (119) expression_opt -> . empty
    (40) expression -> . assignment_expression
    (41) expression -> . expression COMMA assignment_expression
    (122) empty -> .
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    RBRACE          shift and go to state 139
    IF              shift and go to state 90
    LBRACE          shift and go to state 36
    WHILE           shift and go to state 92
    FOR             shift and go to state 93
    BREAK           shift and go to state 94
    RETURN          shift and go to state 95
    ASSERT          shift and go to state 96
    PRINT           shift and go to state 97
    READ            shift and go to state 98
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    SEMI            reduce using rule 122 (empty -> .)
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    block_item                     shift and go to state 140
    declaration                    shift and go to state 79
    statement                      shift and go to state 80
    decl_body                      shift and go to state 6
    expression_statement           shift and go to state 81
    selection_statement            shift and go to state 82
    compound_statement             shift and go to state 83
    iteration_statement            shift and go to state 84
    jump_statement                 shift and go to state 85
    assert_statement               shift and go to state 86
    print_statement                shift and go to state 87
    read_statement                 shift and go to state 88
    type_specifier                 shift and go to state 28
    expression_opt                 shift and go to state 89
    expression                     shift and go to state 91
    empty                          shift and go to state 99
    assignment_expression          shift and go to state 100
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 78

    (98) block_item_list -> block_item .

    RBRACE          reduce using rule 98 (block_item_list -> block_item .)
    IF              reduce using rule 98 (block_item_list -> block_item .)
    LBRACE          reduce using rule 98 (block_item_list -> block_item .)
    WHILE           reduce using rule 98 (block_item_list -> block_item .)
    FOR             reduce using rule 98 (block_item_list -> block_item .)
    BREAK           reduce using rule 98 (block_item_list -> block_item .)
    RETURN          reduce using rule 98 (block_item_list -> block_item .)
    ASSERT          reduce using rule 98 (block_item_list -> block_item .)
    PRINT           reduce using rule 98 (block_item_list -> block_item .)
    READ            reduce using rule 98 (block_item_list -> block_item .)
    VOID            reduce using rule 98 (block_item_list -> block_item .)
    CHAR            reduce using rule 98 (block_item_list -> block_item .)
    INT             reduce using rule 98 (block_item_list -> block_item .)
    FLOAT           reduce using rule 98 (block_item_list -> block_item .)
    PLUSPLUS        reduce using rule 98 (block_item_list -> block_item .)
    MINUSMINUS      reduce using rule 98 (block_item_list -> block_item .)
    LPAREN          reduce using rule 98 (block_item_list -> block_item .)
    ADDRESS         reduce using rule 98 (block_item_list -> block_item .)
    TIMES           reduce using rule 98 (block_item_list -> block_item .)
    PLUS            reduce using rule 98 (block_item_list -> block_item .)
    MINUS           reduce using rule 98 (block_item_list -> block_item .)
    UNARYDIFF       reduce using rule 98 (block_item_list -> block_item .)
    ID              reduce using rule 98 (block_item_list -> block_item .)
    INT_CONST       reduce using rule 98 (block_item_list -> block_item .)
    FLOAT_CONST     reduce using rule 98 (block_item_list -> block_item .)
    CHAR_CONST      reduce using rule 98 (block_item_list -> block_item .)
    STRING          reduce using rule 98 (block_item_list -> block_item .)
    SEMI            reduce using rule 98 (block_item_list -> block_item .)


state 79

    (96) block_item -> declaration .

    RBRACE          reduce using rule 96 (block_item -> declaration .)
    IF              reduce using rule 96 (block_item -> declaration .)
    LBRACE          reduce using rule 96 (block_item -> declaration .)
    WHILE           reduce using rule 96 (block_item -> declaration .)
    FOR             reduce using rule 96 (block_item -> declaration .)
    BREAK           reduce using rule 96 (block_item -> declaration .)
    RETURN          reduce using rule 96 (block_item -> declaration .)
    ASSERT          reduce using rule 96 (block_item -> declaration .)
    PRINT           reduce using rule 96 (block_item -> declaration .)
    READ            reduce using rule 96 (block_item -> declaration .)
    VOID            reduce using rule 96 (block_item -> declaration .)
    CHAR            reduce using rule 96 (block_item -> declaration .)
    INT             reduce using rule 96 (block_item -> declaration .)
    FLOAT           reduce using rule 96 (block_item -> declaration .)
    PLUSPLUS        reduce using rule 96 (block_item -> declaration .)
    MINUSMINUS      reduce using rule 96 (block_item -> declaration .)
    LPAREN          reduce using rule 96 (block_item -> declaration .)
    ADDRESS         reduce using rule 96 (block_item -> declaration .)
    TIMES           reduce using rule 96 (block_item -> declaration .)
    PLUS            reduce using rule 96 (block_item -> declaration .)
    MINUS           reduce using rule 96 (block_item -> declaration .)
    UNARYDIFF       reduce using rule 96 (block_item -> declaration .)
    ID              reduce using rule 96 (block_item -> declaration .)
    INT_CONST       reduce using rule 96 (block_item -> declaration .)
    FLOAT_CONST     reduce using rule 96 (block_item -> declaration .)
    CHAR_CONST      reduce using rule 96 (block_item -> declaration .)
    STRING          reduce using rule 96 (block_item -> declaration .)
    SEMI            reduce using rule 96 (block_item -> declaration .)


state 80

    (97) block_item -> statement .

    RBRACE          reduce using rule 97 (block_item -> statement .)
    IF              reduce using rule 97 (block_item -> statement .)
    LBRACE          reduce using rule 97 (block_item -> statement .)
    WHILE           reduce using rule 97 (block_item -> statement .)
    FOR             reduce using rule 97 (block_item -> statement .)
    BREAK           reduce using rule 97 (block_item -> statement .)
    RETURN          reduce using rule 97 (block_item -> statement .)
    ASSERT          reduce using rule 97 (block_item -> statement .)
    PRINT           reduce using rule 97 (block_item -> statement .)
    READ            reduce using rule 97 (block_item -> statement .)
    VOID            reduce using rule 97 (block_item -> statement .)
    CHAR            reduce using rule 97 (block_item -> statement .)
    INT             reduce using rule 97 (block_item -> statement .)
    FLOAT           reduce using rule 97 (block_item -> statement .)
    PLUSPLUS        reduce using rule 97 (block_item -> statement .)
    MINUSMINUS      reduce using rule 97 (block_item -> statement .)
    LPAREN          reduce using rule 97 (block_item -> statement .)
    ADDRESS         reduce using rule 97 (block_item -> statement .)
    TIMES           reduce using rule 97 (block_item -> statement .)
    PLUS            reduce using rule 97 (block_item -> statement .)
    MINUS           reduce using rule 97 (block_item -> statement .)
    UNARYDIFF       reduce using rule 97 (block_item -> statement .)
    ID              reduce using rule 97 (block_item -> statement .)
    INT_CONST       reduce using rule 97 (block_item -> statement .)
    FLOAT_CONST     reduce using rule 97 (block_item -> statement .)
    CHAR_CONST      reduce using rule 97 (block_item -> statement .)
    STRING          reduce using rule 97 (block_item -> statement .)
    SEMI            reduce using rule 97 (block_item -> statement .)


state 81

    (110) statement -> expression_statement .

    RBRACE          reduce using rule 110 (statement -> expression_statement .)
    IF              reduce using rule 110 (statement -> expression_statement .)
    LBRACE          reduce using rule 110 (statement -> expression_statement .)
    WHILE           reduce using rule 110 (statement -> expression_statement .)
    FOR             reduce using rule 110 (statement -> expression_statement .)
    BREAK           reduce using rule 110 (statement -> expression_statement .)
    RETURN          reduce using rule 110 (statement -> expression_statement .)
    ASSERT          reduce using rule 110 (statement -> expression_statement .)
    PRINT           reduce using rule 110 (statement -> expression_statement .)
    READ            reduce using rule 110 (statement -> expression_statement .)
    VOID            reduce using rule 110 (statement -> expression_statement .)
    CHAR            reduce using rule 110 (statement -> expression_statement .)
    INT             reduce using rule 110 (statement -> expression_statement .)
    FLOAT           reduce using rule 110 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 110 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 110 (statement -> expression_statement .)
    LPAREN          reduce using rule 110 (statement -> expression_statement .)
    ADDRESS         reduce using rule 110 (statement -> expression_statement .)
    TIMES           reduce using rule 110 (statement -> expression_statement .)
    PLUS            reduce using rule 110 (statement -> expression_statement .)
    MINUS           reduce using rule 110 (statement -> expression_statement .)
    UNARYDIFF       reduce using rule 110 (statement -> expression_statement .)
    ID              reduce using rule 110 (statement -> expression_statement .)
    INT_CONST       reduce using rule 110 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 110 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 110 (statement -> expression_statement .)
    STRING          reduce using rule 110 (statement -> expression_statement .)
    SEMI            reduce using rule 110 (statement -> expression_statement .)
    ELSE            reduce using rule 110 (statement -> expression_statement .)


state 82

    (111) statement -> selection_statement .

    RBRACE          reduce using rule 111 (statement -> selection_statement .)
    IF              reduce using rule 111 (statement -> selection_statement .)
    LBRACE          reduce using rule 111 (statement -> selection_statement .)
    WHILE           reduce using rule 111 (statement -> selection_statement .)
    FOR             reduce using rule 111 (statement -> selection_statement .)
    BREAK           reduce using rule 111 (statement -> selection_statement .)
    RETURN          reduce using rule 111 (statement -> selection_statement .)
    ASSERT          reduce using rule 111 (statement -> selection_statement .)
    PRINT           reduce using rule 111 (statement -> selection_statement .)
    READ            reduce using rule 111 (statement -> selection_statement .)
    VOID            reduce using rule 111 (statement -> selection_statement .)
    CHAR            reduce using rule 111 (statement -> selection_statement .)
    INT             reduce using rule 111 (statement -> selection_statement .)
    FLOAT           reduce using rule 111 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 111 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 111 (statement -> selection_statement .)
    LPAREN          reduce using rule 111 (statement -> selection_statement .)
    ADDRESS         reduce using rule 111 (statement -> selection_statement .)
    TIMES           reduce using rule 111 (statement -> selection_statement .)
    PLUS            reduce using rule 111 (statement -> selection_statement .)
    MINUS           reduce using rule 111 (statement -> selection_statement .)
    UNARYDIFF       reduce using rule 111 (statement -> selection_statement .)
    ID              reduce using rule 111 (statement -> selection_statement .)
    INT_CONST       reduce using rule 111 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 111 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 111 (statement -> selection_statement .)
    STRING          reduce using rule 111 (statement -> selection_statement .)
    SEMI            reduce using rule 111 (statement -> selection_statement .)
    ELSE            reduce using rule 111 (statement -> selection_statement .)


state 83

    (112) statement -> compound_statement .

    RBRACE          reduce using rule 112 (statement -> compound_statement .)
    IF              reduce using rule 112 (statement -> compound_statement .)
    LBRACE          reduce using rule 112 (statement -> compound_statement .)
    WHILE           reduce using rule 112 (statement -> compound_statement .)
    FOR             reduce using rule 112 (statement -> compound_statement .)
    BREAK           reduce using rule 112 (statement -> compound_statement .)
    RETURN          reduce using rule 112 (statement -> compound_statement .)
    ASSERT          reduce using rule 112 (statement -> compound_statement .)
    PRINT           reduce using rule 112 (statement -> compound_statement .)
    READ            reduce using rule 112 (statement -> compound_statement .)
    VOID            reduce using rule 112 (statement -> compound_statement .)
    CHAR            reduce using rule 112 (statement -> compound_statement .)
    INT             reduce using rule 112 (statement -> compound_statement .)
    FLOAT           reduce using rule 112 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 112 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 112 (statement -> compound_statement .)
    LPAREN          reduce using rule 112 (statement -> compound_statement .)
    ADDRESS         reduce using rule 112 (statement -> compound_statement .)
    TIMES           reduce using rule 112 (statement -> compound_statement .)
    PLUS            reduce using rule 112 (statement -> compound_statement .)
    MINUS           reduce using rule 112 (statement -> compound_statement .)
    UNARYDIFF       reduce using rule 112 (statement -> compound_statement .)
    ID              reduce using rule 112 (statement -> compound_statement .)
    INT_CONST       reduce using rule 112 (statement -> compound_statement .)
    FLOAT_CONST     reduce using rule 112 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 112 (statement -> compound_statement .)
    STRING          reduce using rule 112 (statement -> compound_statement .)
    SEMI            reduce using rule 112 (statement -> compound_statement .)
    ELSE            reduce using rule 112 (statement -> compound_statement .)


state 84

    (113) statement -> iteration_statement .

    RBRACE          reduce using rule 113 (statement -> iteration_statement .)
    IF              reduce using rule 113 (statement -> iteration_statement .)
    LBRACE          reduce using rule 113 (statement -> iteration_statement .)
    WHILE           reduce using rule 113 (statement -> iteration_statement .)
    FOR             reduce using rule 113 (statement -> iteration_statement .)
    BREAK           reduce using rule 113 (statement -> iteration_statement .)
    RETURN          reduce using rule 113 (statement -> iteration_statement .)
    ASSERT          reduce using rule 113 (statement -> iteration_statement .)
    PRINT           reduce using rule 113 (statement -> iteration_statement .)
    READ            reduce using rule 113 (statement -> iteration_statement .)
    VOID            reduce using rule 113 (statement -> iteration_statement .)
    CHAR            reduce using rule 113 (statement -> iteration_statement .)
    INT             reduce using rule 113 (statement -> iteration_statement .)
    FLOAT           reduce using rule 113 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 113 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 113 (statement -> iteration_statement .)
    LPAREN          reduce using rule 113 (statement -> iteration_statement .)
    ADDRESS         reduce using rule 113 (statement -> iteration_statement .)
    TIMES           reduce using rule 113 (statement -> iteration_statement .)
    PLUS            reduce using rule 113 (statement -> iteration_statement .)
    MINUS           reduce using rule 113 (statement -> iteration_statement .)
    UNARYDIFF       reduce using rule 113 (statement -> iteration_statement .)
    ID              reduce using rule 113 (statement -> iteration_statement .)
    INT_CONST       reduce using rule 113 (statement -> iteration_statement .)
    FLOAT_CONST     reduce using rule 113 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 113 (statement -> iteration_statement .)
    STRING          reduce using rule 113 (statement -> iteration_statement .)
    SEMI            reduce using rule 113 (statement -> iteration_statement .)
    ELSE            reduce using rule 113 (statement -> iteration_statement .)


state 85

    (114) statement -> jump_statement .

    RBRACE          reduce using rule 114 (statement -> jump_statement .)
    IF              reduce using rule 114 (statement -> jump_statement .)
    LBRACE          reduce using rule 114 (statement -> jump_statement .)
    WHILE           reduce using rule 114 (statement -> jump_statement .)
    FOR             reduce using rule 114 (statement -> jump_statement .)
    BREAK           reduce using rule 114 (statement -> jump_statement .)
    RETURN          reduce using rule 114 (statement -> jump_statement .)
    ASSERT          reduce using rule 114 (statement -> jump_statement .)
    PRINT           reduce using rule 114 (statement -> jump_statement .)
    READ            reduce using rule 114 (statement -> jump_statement .)
    VOID            reduce using rule 114 (statement -> jump_statement .)
    CHAR            reduce using rule 114 (statement -> jump_statement .)
    INT             reduce using rule 114 (statement -> jump_statement .)
    FLOAT           reduce using rule 114 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 114 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 114 (statement -> jump_statement .)
    LPAREN          reduce using rule 114 (statement -> jump_statement .)
    ADDRESS         reduce using rule 114 (statement -> jump_statement .)
    TIMES           reduce using rule 114 (statement -> jump_statement .)
    PLUS            reduce using rule 114 (statement -> jump_statement .)
    MINUS           reduce using rule 114 (statement -> jump_statement .)
    UNARYDIFF       reduce using rule 114 (statement -> jump_statement .)
    ID              reduce using rule 114 (statement -> jump_statement .)
    INT_CONST       reduce using rule 114 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 114 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 114 (statement -> jump_statement .)
    STRING          reduce using rule 114 (statement -> jump_statement .)
    SEMI            reduce using rule 114 (statement -> jump_statement .)
    ELSE            reduce using rule 114 (statement -> jump_statement .)


state 86

    (115) statement -> assert_statement .

    RBRACE          reduce using rule 115 (statement -> assert_statement .)
    IF              reduce using rule 115 (statement -> assert_statement .)
    LBRACE          reduce using rule 115 (statement -> assert_statement .)
    WHILE           reduce using rule 115 (statement -> assert_statement .)
    FOR             reduce using rule 115 (statement -> assert_statement .)
    BREAK           reduce using rule 115 (statement -> assert_statement .)
    RETURN          reduce using rule 115 (statement -> assert_statement .)
    ASSERT          reduce using rule 115 (statement -> assert_statement .)
    PRINT           reduce using rule 115 (statement -> assert_statement .)
    READ            reduce using rule 115 (statement -> assert_statement .)
    VOID            reduce using rule 115 (statement -> assert_statement .)
    CHAR            reduce using rule 115 (statement -> assert_statement .)
    INT             reduce using rule 115 (statement -> assert_statement .)
    FLOAT           reduce using rule 115 (statement -> assert_statement .)
    PLUSPLUS        reduce using rule 115 (statement -> assert_statement .)
    MINUSMINUS      reduce using rule 115 (statement -> assert_statement .)
    LPAREN          reduce using rule 115 (statement -> assert_statement .)
    ADDRESS         reduce using rule 115 (statement -> assert_statement .)
    TIMES           reduce using rule 115 (statement -> assert_statement .)
    PLUS            reduce using rule 115 (statement -> assert_statement .)
    MINUS           reduce using rule 115 (statement -> assert_statement .)
    UNARYDIFF       reduce using rule 115 (statement -> assert_statement .)
    ID              reduce using rule 115 (statement -> assert_statement .)
    INT_CONST       reduce using rule 115 (statement -> assert_statement .)
    FLOAT_CONST     reduce using rule 115 (statement -> assert_statement .)
    CHAR_CONST      reduce using rule 115 (statement -> assert_statement .)
    STRING          reduce using rule 115 (statement -> assert_statement .)
    SEMI            reduce using rule 115 (statement -> assert_statement .)
    ELSE            reduce using rule 115 (statement -> assert_statement .)


state 87

    (116) statement -> print_statement .

    RBRACE          reduce using rule 116 (statement -> print_statement .)
    IF              reduce using rule 116 (statement -> print_statement .)
    LBRACE          reduce using rule 116 (statement -> print_statement .)
    WHILE           reduce using rule 116 (statement -> print_statement .)
    FOR             reduce using rule 116 (statement -> print_statement .)
    BREAK           reduce using rule 116 (statement -> print_statement .)
    RETURN          reduce using rule 116 (statement -> print_statement .)
    ASSERT          reduce using rule 116 (statement -> print_statement .)
    PRINT           reduce using rule 116 (statement -> print_statement .)
    READ            reduce using rule 116 (statement -> print_statement .)
    VOID            reduce using rule 116 (statement -> print_statement .)
    CHAR            reduce using rule 116 (statement -> print_statement .)
    INT             reduce using rule 116 (statement -> print_statement .)
    FLOAT           reduce using rule 116 (statement -> print_statement .)
    PLUSPLUS        reduce using rule 116 (statement -> print_statement .)
    MINUSMINUS      reduce using rule 116 (statement -> print_statement .)
    LPAREN          reduce using rule 116 (statement -> print_statement .)
    ADDRESS         reduce using rule 116 (statement -> print_statement .)
    TIMES           reduce using rule 116 (statement -> print_statement .)
    PLUS            reduce using rule 116 (statement -> print_statement .)
    MINUS           reduce using rule 116 (statement -> print_statement .)
    UNARYDIFF       reduce using rule 116 (statement -> print_statement .)
    ID              reduce using rule 116 (statement -> print_statement .)
    INT_CONST       reduce using rule 116 (statement -> print_statement .)
    FLOAT_CONST     reduce using rule 116 (statement -> print_statement .)
    CHAR_CONST      reduce using rule 116 (statement -> print_statement .)
    STRING          reduce using rule 116 (statement -> print_statement .)
    SEMI            reduce using rule 116 (statement -> print_statement .)
    ELSE            reduce using rule 116 (statement -> print_statement .)


state 88

    (117) statement -> read_statement .

    RBRACE          reduce using rule 117 (statement -> read_statement .)
    IF              reduce using rule 117 (statement -> read_statement .)
    LBRACE          reduce using rule 117 (statement -> read_statement .)
    WHILE           reduce using rule 117 (statement -> read_statement .)
    FOR             reduce using rule 117 (statement -> read_statement .)
    BREAK           reduce using rule 117 (statement -> read_statement .)
    RETURN          reduce using rule 117 (statement -> read_statement .)
    ASSERT          reduce using rule 117 (statement -> read_statement .)
    PRINT           reduce using rule 117 (statement -> read_statement .)
    READ            reduce using rule 117 (statement -> read_statement .)
    VOID            reduce using rule 117 (statement -> read_statement .)
    CHAR            reduce using rule 117 (statement -> read_statement .)
    INT             reduce using rule 117 (statement -> read_statement .)
    FLOAT           reduce using rule 117 (statement -> read_statement .)
    PLUSPLUS        reduce using rule 117 (statement -> read_statement .)
    MINUSMINUS      reduce using rule 117 (statement -> read_statement .)
    LPAREN          reduce using rule 117 (statement -> read_statement .)
    ADDRESS         reduce using rule 117 (statement -> read_statement .)
    TIMES           reduce using rule 117 (statement -> read_statement .)
    PLUS            reduce using rule 117 (statement -> read_statement .)
    MINUS           reduce using rule 117 (statement -> read_statement .)
    UNARYDIFF       reduce using rule 117 (statement -> read_statement .)
    ID              reduce using rule 117 (statement -> read_statement .)
    INT_CONST       reduce using rule 117 (statement -> read_statement .)
    FLOAT_CONST     reduce using rule 117 (statement -> read_statement .)
    CHAR_CONST      reduce using rule 117 (statement -> read_statement .)
    STRING          reduce using rule 117 (statement -> read_statement .)
    SEMI            reduce using rule 117 (statement -> read_statement .)
    ELSE            reduce using rule 117 (statement -> read_statement .)


state 89

    (106) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 141


state 90

    (101) selection_statement -> IF . LPAREN expression RPAREN statement
    (102) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 142


state 91

    (118) expression_opt -> expression .
    (41) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 118 (expression_opt -> expression .)
    RPAREN          reduce using rule 118 (expression_opt -> expression .)
    COMMA           shift and go to state 143


state 92

    (103) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 144


state 93

    (104) iteration_statement -> FOR . LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (105) iteration_statement -> FOR . LPAREN declaration expression_opt SEMI expression_opt RPAREN statement

    LPAREN          shift and go to state 145


state 94

    (94) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 146


state 95

    (95) jump_statement -> RETURN . expression_opt SEMI
    (118) expression_opt -> . expression
    (119) expression_opt -> . empty
    (40) expression -> . assignment_expression
    (41) expression -> . expression COMMA assignment_expression
    (122) empty -> .
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    SEMI            reduce using rule 122 (empty -> .)
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    expression_opt                 shift and go to state 147
    expression                     shift and go to state 91
    empty                          shift and go to state 99
    assignment_expression          shift and go to state 100
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 96

    (107) assert_statement -> ASSERT . expression SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 148
    assignment_expression          shift and go to state 100
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 97

    (108) print_statement -> PRINT . LPAREN expression_opt RPAREN SEMI

    LPAREN          shift and go to state 149


state 98

    (109) read_statement -> READ . LPAREN argument_expression RPAREN SEMI

    LPAREN          shift and go to state 150


state 99

    (119) expression_opt -> empty .

    SEMI            reduce using rule 119 (expression_opt -> empty .)
    RPAREN          reduce using rule 119 (expression_opt -> empty .)


state 100

    (40) expression -> assignment_expression .

    COMMA           reduce using rule 40 (expression -> assignment_expression .)
    SEMI            reduce using rule 40 (expression -> assignment_expression .)
    RPAREN          reduce using rule 40 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 40 (expression -> assignment_expression .)


state 101

    (24) direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .

    LBRACKET        reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LPAREN          reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    VOID            reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    CHAR            reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    INT             reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    FLOAT           reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LBRACE          reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    EQUALS          reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    COMMA           reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    SEMI            reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    RPAREN          reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)


state 102

    (60) binary_expression -> binary_expression TIMES . binary_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    LPAREN          shift and go to state 48
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    binary_expression              shift and go to state 151
    cast_expression                shift and go to state 43
    unary_expression               shift and go to state 47
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 103

    (61) binary_expression -> binary_expression DIVIDE . binary_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    LPAREN          shift and go to state 48
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    binary_expression              shift and go to state 152
    cast_expression                shift and go to state 43
    unary_expression               shift and go to state 47
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 104

    (62) binary_expression -> binary_expression MOD . binary_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    LPAREN          shift and go to state 48
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 43
    unary_expression               shift and go to state 47
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 105

    (63) binary_expression -> binary_expression PLUS . binary_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    LPAREN          shift and go to state 48
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    binary_expression              shift and go to state 154
    cast_expression                shift and go to state 43
    unary_expression               shift and go to state 47
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 106

    (64) binary_expression -> binary_expression MINUS . binary_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    LPAREN          shift and go to state 48
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    binary_expression              shift and go to state 155
    cast_expression                shift and go to state 43
    unary_expression               shift and go to state 47
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 107

    (65) binary_expression -> binary_expression LT . binary_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    LPAREN          shift and go to state 48
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    binary_expression              shift and go to state 156
    cast_expression                shift and go to state 43
    unary_expression               shift and go to state 47
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 108

    (66) binary_expression -> binary_expression LE . binary_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    LPAREN          shift and go to state 48
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    binary_expression              shift and go to state 157
    cast_expression                shift and go to state 43
    unary_expression               shift and go to state 47
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 109

    (67) binary_expression -> binary_expression HT . binary_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    LPAREN          shift and go to state 48
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    binary_expression              shift and go to state 158
    cast_expression                shift and go to state 43
    unary_expression               shift and go to state 47
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 110

    (68) binary_expression -> binary_expression HE . binary_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    LPAREN          shift and go to state 48
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    binary_expression              shift and go to state 159
    cast_expression                shift and go to state 43
    unary_expression               shift and go to state 47
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 111

    (69) binary_expression -> binary_expression EQ . binary_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    LPAREN          shift and go to state 48
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    binary_expression              shift and go to state 160
    cast_expression                shift and go to state 43
    unary_expression               shift and go to state 47
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 112

    (70) binary_expression -> binary_expression DIFF . binary_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    LPAREN          shift and go to state 48
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    binary_expression              shift and go to state 161
    cast_expression                shift and go to state 43
    unary_expression               shift and go to state 47
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 113

    (71) binary_expression -> binary_expression AND . binary_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    LPAREN          shift and go to state 48
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    binary_expression              shift and go to state 162
    cast_expression                shift and go to state 43
    unary_expression               shift and go to state 47
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 114

    (72) binary_expression -> binary_expression OR . binary_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    LPAREN          shift and go to state 48
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    binary_expression              shift and go to state 163
    cast_expression                shift and go to state 43
    unary_expression               shift and go to state 47
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 115

    (46) cast_expression -> LPAREN type_specifier . RPAREN cast_expression

    RPAREN          shift and go to state 164


state 116

    (44) primary_expression -> LPAREN expression . RPAREN
    (41) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 165
    COMMA           shift and go to state 143


state 117

    (33) postfix_expression -> postfix_expression PLUSPLUS .

    PLUSPLUS        reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    LBRACKET        reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    LE              reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    HT              reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    HE              reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIFF            reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMESASSIGN     reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDEASSIGN    reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    MODASSIGN       reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSASSIGN      reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSASSIGN     reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 33 (postfix_expression -> postfix_expression PLUSPLUS .)


state 118

    (34) postfix_expression -> postfix_expression MINUSMINUS .

    PLUSPLUS        reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    LBRACKET        reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    LE              reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    HT              reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    HE              reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIFF            reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMESASSIGN     reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDEASSIGN    reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    MODASSIGN       reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSASSIGN      reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSASSIGN     reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 34 (postfix_expression -> postfix_expression MINUSMINUS .)


state 119

    (35) postfix_expression -> postfix_expression LPAREN . RPAREN
    (36) postfix_expression -> postfix_expression LPAREN . argument_expression RPAREN
    (38) argument_expression -> . assignment_expression
    (39) argument_expression -> . argument_expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    RPAREN          shift and go to state 166
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    postfix_expression             shift and go to state 49
    argument_expression            shift and go to state 167
    assignment_expression          shift and go to state 168
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 120

    (37) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (40) expression -> . assignment_expression
    (41) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    postfix_expression             shift and go to state 49
    expression                     shift and go to state 169
    assignment_expression          shift and go to state 100
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 121

    (56) unary_expression -> PLUSPLUS unary_expression .

    TIMES           reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    LE              reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    HT              reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    HE              reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    DIFF            reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    EQUALS          reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    TIMESASSIGN     reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDEASSIGN    reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    MODASSIGN       reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    PLUSASSIGN      reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    MINUSASSIGN     reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 56 (unary_expression -> PLUSPLUS unary_expression .)


state 122

    (44) primary_expression -> LPAREN . expression RPAREN
    (40) expression -> . assignment_expression
    (41) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 116
    assignment_expression          shift and go to state 100
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 123

    (57) unary_expression -> MINUSMINUS unary_expression .

    TIMES           reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    LE              reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    HT              reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    HE              reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    DIFF            reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    EQUALS          reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    TIMESASSIGN     reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDEASSIGN    reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    MODASSIGN       reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    PLUSASSIGN      reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    MINUSASSIGN     reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 57 (unary_expression -> MINUSMINUS unary_expression .)


state 124

    (58) unary_expression -> unary_operator cast_expression .

    TIMES           reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    HT              reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    HE              reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    DIFF            reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    EQUALS          reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    TIMESASSIGN     reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    DIVIDEASSIGN    reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    MODASSIGN       reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    PLUSASSIGN      reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    MINUSASSIGN     reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 58 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 58 (unary_expression -> unary_operator cast_expression .)


state 125

    (25) direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .

    LBRACKET        reduce using rule 25 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LPAREN          reduce using rule 25 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    VOID            reduce using rule 25 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    CHAR            reduce using rule 25 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    INT             reduce using rule 25 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    FLOAT           reduce using rule 25 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LBRACE          reduce using rule 25 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    EQUALS          reduce using rule 25 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    COMMA           reduce using rule 25 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    SEMI            reduce using rule 25 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 25 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)


state 126

    (26) direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .

    LBRACKET        reduce using rule 26 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LPAREN          reduce using rule 26 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    VOID            reduce using rule 26 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    CHAR            reduce using rule 26 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    INT             reduce using rule 26 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    FLOAT           reduce using rule 26 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LBRACE          reduce using rule 26 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    EQUALS          reduce using rule 26 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 26 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 26 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 26 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)


state 127

    (21) parameter_list -> parameter_list COMMA . parameter_declaration
    (19) parameter_declaration -> . type_specifier declarator
    (86) type_specifier -> . VOID
    (87) type_specifier -> . CHAR
    (88) type_specifier -> . INT
    (89) type_specifier -> . FLOAT

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    parameter_declaration          shift and go to state 170
    type_specifier                 shift and go to state 68

state 128

    (80) identifier_list -> identifier_list COMMA . identifier
    (76) identifier -> . ID

    ID              shift and go to state 16

    identifier                     shift and go to state 171

state 129

    (19) parameter_declaration -> type_specifier declarator .

    RPAREN          reduce using rule 19 (parameter_declaration -> type_specifier declarator .)
    COMMA           reduce using rule 19 (parameter_declaration -> type_specifier declarator .)


state 130

    (28) initializer -> LBRACE initializer_list . RBRACE
    (29) initializer -> LBRACE initializer_list . COMMA RBRACE
    (31) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 172
    COMMA           shift and go to state 173


state 131

    (30) initializer_list -> initializer .

    RBRACE          reduce using rule 30 (initializer_list -> initializer .)
    COMMA           reduce using rule 30 (initializer_list -> initializer .)


state 132

    (48) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    unary_expression               shift and go to state 75
    assignment_expression          shift and go to state 174
    binary_expression              shift and go to state 74
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 133

    (49) assignment_operator -> EQUALS .

    PLUSPLUS        reduce using rule 49 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 49 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 49 (assignment_operator -> EQUALS .)
    ADDRESS         reduce using rule 49 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 49 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 49 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 49 (assignment_operator -> EQUALS .)
    UNARYDIFF       reduce using rule 49 (assignment_operator -> EQUALS .)
    ID              reduce using rule 49 (assignment_operator -> EQUALS .)
    INT_CONST       reduce using rule 49 (assignment_operator -> EQUALS .)
    FLOAT_CONST     reduce using rule 49 (assignment_operator -> EQUALS .)
    CHAR_CONST      reduce using rule 49 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 49 (assignment_operator -> EQUALS .)


state 134

    (50) assignment_operator -> TIMESASSIGN .

    PLUSPLUS        reduce using rule 50 (assignment_operator -> TIMESASSIGN .)
    MINUSMINUS      reduce using rule 50 (assignment_operator -> TIMESASSIGN .)
    LPAREN          reduce using rule 50 (assignment_operator -> TIMESASSIGN .)
    ADDRESS         reduce using rule 50 (assignment_operator -> TIMESASSIGN .)
    TIMES           reduce using rule 50 (assignment_operator -> TIMESASSIGN .)
    PLUS            reduce using rule 50 (assignment_operator -> TIMESASSIGN .)
    MINUS           reduce using rule 50 (assignment_operator -> TIMESASSIGN .)
    UNARYDIFF       reduce using rule 50 (assignment_operator -> TIMESASSIGN .)
    ID              reduce using rule 50 (assignment_operator -> TIMESASSIGN .)
    INT_CONST       reduce using rule 50 (assignment_operator -> TIMESASSIGN .)
    FLOAT_CONST     reduce using rule 50 (assignment_operator -> TIMESASSIGN .)
    CHAR_CONST      reduce using rule 50 (assignment_operator -> TIMESASSIGN .)
    STRING          reduce using rule 50 (assignment_operator -> TIMESASSIGN .)


state 135

    (51) assignment_operator -> DIVIDEASSIGN .

    PLUSPLUS        reduce using rule 51 (assignment_operator -> DIVIDEASSIGN .)
    MINUSMINUS      reduce using rule 51 (assignment_operator -> DIVIDEASSIGN .)
    LPAREN          reduce using rule 51 (assignment_operator -> DIVIDEASSIGN .)
    ADDRESS         reduce using rule 51 (assignment_operator -> DIVIDEASSIGN .)
    TIMES           reduce using rule 51 (assignment_operator -> DIVIDEASSIGN .)
    PLUS            reduce using rule 51 (assignment_operator -> DIVIDEASSIGN .)
    MINUS           reduce using rule 51 (assignment_operator -> DIVIDEASSIGN .)
    UNARYDIFF       reduce using rule 51 (assignment_operator -> DIVIDEASSIGN .)
    ID              reduce using rule 51 (assignment_operator -> DIVIDEASSIGN .)
    INT_CONST       reduce using rule 51 (assignment_operator -> DIVIDEASSIGN .)
    FLOAT_CONST     reduce using rule 51 (assignment_operator -> DIVIDEASSIGN .)
    CHAR_CONST      reduce using rule 51 (assignment_operator -> DIVIDEASSIGN .)
    STRING          reduce using rule 51 (assignment_operator -> DIVIDEASSIGN .)


state 136

    (52) assignment_operator -> MODASSIGN .

    PLUSPLUS        reduce using rule 52 (assignment_operator -> MODASSIGN .)
    MINUSMINUS      reduce using rule 52 (assignment_operator -> MODASSIGN .)
    LPAREN          reduce using rule 52 (assignment_operator -> MODASSIGN .)
    ADDRESS         reduce using rule 52 (assignment_operator -> MODASSIGN .)
    TIMES           reduce using rule 52 (assignment_operator -> MODASSIGN .)
    PLUS            reduce using rule 52 (assignment_operator -> MODASSIGN .)
    MINUS           reduce using rule 52 (assignment_operator -> MODASSIGN .)
    UNARYDIFF       reduce using rule 52 (assignment_operator -> MODASSIGN .)
    ID              reduce using rule 52 (assignment_operator -> MODASSIGN .)
    INT_CONST       reduce using rule 52 (assignment_operator -> MODASSIGN .)
    FLOAT_CONST     reduce using rule 52 (assignment_operator -> MODASSIGN .)
    CHAR_CONST      reduce using rule 52 (assignment_operator -> MODASSIGN .)
    STRING          reduce using rule 52 (assignment_operator -> MODASSIGN .)


state 137

    (53) assignment_operator -> PLUSASSIGN .

    PLUSPLUS        reduce using rule 53 (assignment_operator -> PLUSASSIGN .)
    MINUSMINUS      reduce using rule 53 (assignment_operator -> PLUSASSIGN .)
    LPAREN          reduce using rule 53 (assignment_operator -> PLUSASSIGN .)
    ADDRESS         reduce using rule 53 (assignment_operator -> PLUSASSIGN .)
    TIMES           reduce using rule 53 (assignment_operator -> PLUSASSIGN .)
    PLUS            reduce using rule 53 (assignment_operator -> PLUSASSIGN .)
    MINUS           reduce using rule 53 (assignment_operator -> PLUSASSIGN .)
    UNARYDIFF       reduce using rule 53 (assignment_operator -> PLUSASSIGN .)
    ID              reduce using rule 53 (assignment_operator -> PLUSASSIGN .)
    INT_CONST       reduce using rule 53 (assignment_operator -> PLUSASSIGN .)
    FLOAT_CONST     reduce using rule 53 (assignment_operator -> PLUSASSIGN .)
    CHAR_CONST      reduce using rule 53 (assignment_operator -> PLUSASSIGN .)
    STRING          reduce using rule 53 (assignment_operator -> PLUSASSIGN .)


state 138

    (54) assignment_operator -> MINUSASSIGN .

    PLUSPLUS        reduce using rule 54 (assignment_operator -> MINUSASSIGN .)
    MINUSMINUS      reduce using rule 54 (assignment_operator -> MINUSASSIGN .)
    LPAREN          reduce using rule 54 (assignment_operator -> MINUSASSIGN .)
    ADDRESS         reduce using rule 54 (assignment_operator -> MINUSASSIGN .)
    TIMES           reduce using rule 54 (assignment_operator -> MINUSASSIGN .)
    PLUS            reduce using rule 54 (assignment_operator -> MINUSASSIGN .)
    MINUS           reduce using rule 54 (assignment_operator -> MINUSASSIGN .)
    UNARYDIFF       reduce using rule 54 (assignment_operator -> MINUSASSIGN .)
    ID              reduce using rule 54 (assignment_operator -> MINUSASSIGN .)
    INT_CONST       reduce using rule 54 (assignment_operator -> MINUSASSIGN .)
    FLOAT_CONST     reduce using rule 54 (assignment_operator -> MINUSASSIGN .)
    CHAR_CONST      reduce using rule 54 (assignment_operator -> MINUSASSIGN .)
    STRING          reduce using rule 54 (assignment_operator -> MINUSASSIGN .)


state 139

    (100) compound_statement -> LBRACE block_item_list RBRACE .

    VOID            reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    CHAR            reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    INT             reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    FLOAT           reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    LPAREN          reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    ID              reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    $end            reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    RBRACE          reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    IF              reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    LBRACE          reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    WHILE           reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    FOR             reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    BREAK           reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    RETURN          reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    ASSERT          reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    PRINT           reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    READ            reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    PLUSPLUS        reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    MINUSMINUS      reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    ADDRESS         reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    TIMES           reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    PLUS            reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    MINUS           reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    UNARYDIFF       reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    INT_CONST       reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    FLOAT_CONST     reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    CHAR_CONST      reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    STRING          reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    SEMI            reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)
    ELSE            reduce using rule 100 (compound_statement -> LBRACE block_item_list RBRACE .)


state 140

    (99) block_item_list -> block_item_list block_item .

    RBRACE          reduce using rule 99 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 99 (block_item_list -> block_item_list block_item .)
    LBRACE          reduce using rule 99 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 99 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 99 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 99 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 99 (block_item_list -> block_item_list block_item .)
    ASSERT          reduce using rule 99 (block_item_list -> block_item_list block_item .)
    PRINT           reduce using rule 99 (block_item_list -> block_item_list block_item .)
    READ            reduce using rule 99 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 99 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 99 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 99 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 99 (block_item_list -> block_item_list block_item .)
    PLUSPLUS        reduce using rule 99 (block_item_list -> block_item_list block_item .)
    MINUSMINUS      reduce using rule 99 (block_item_list -> block_item_list block_item .)
    LPAREN          reduce using rule 99 (block_item_list -> block_item_list block_item .)
    ADDRESS         reduce using rule 99 (block_item_list -> block_item_list block_item .)
    TIMES           reduce using rule 99 (block_item_list -> block_item_list block_item .)
    PLUS            reduce using rule 99 (block_item_list -> block_item_list block_item .)
    MINUS           reduce using rule 99 (block_item_list -> block_item_list block_item .)
    UNARYDIFF       reduce using rule 99 (block_item_list -> block_item_list block_item .)
    ID              reduce using rule 99 (block_item_list -> block_item_list block_item .)
    INT_CONST       reduce using rule 99 (block_item_list -> block_item_list block_item .)
    FLOAT_CONST     reduce using rule 99 (block_item_list -> block_item_list block_item .)
    CHAR_CONST      reduce using rule 99 (block_item_list -> block_item_list block_item .)
    STRING          reduce using rule 99 (block_item_list -> block_item_list block_item .)
    SEMI            reduce using rule 99 (block_item_list -> block_item_list block_item .)


state 141

    (106) expression_statement -> expression_opt SEMI .

    RBRACE          reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    IF              reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    LBRACE          reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    ASSERT          reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    PRINT           reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    READ            reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    VOID            reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    CHAR            reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    INT             reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    FLOAT           reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    PLUSPLUS        reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    MINUSMINUS      reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    ADDRESS         reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    TIMES           reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    PLUS            reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    MINUS           reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    UNARYDIFF       reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    ID              reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    INT_CONST       reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    FLOAT_CONST     reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    CHAR_CONST      reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    STRING          reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 106 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 106 (expression_statement -> expression_opt SEMI .)


state 142

    (101) selection_statement -> IF LPAREN . expression RPAREN statement
    (102) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (40) expression -> . assignment_expression
    (41) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 175
    assignment_expression          shift and go to state 100
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 143

    (41) expression -> expression COMMA . assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    assignment_expression          shift and go to state 176
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 144

    (103) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (40) expression -> . assignment_expression
    (41) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 177
    assignment_expression          shift and go to state 100
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 145

    (104) iteration_statement -> FOR LPAREN . expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (105) iteration_statement -> FOR LPAREN . declaration expression_opt SEMI expression_opt RPAREN statement
    (118) expression_opt -> . expression
    (119) expression_opt -> . empty
    (6) declaration -> . decl_body SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . expression COMMA assignment_expression
    (122) empty -> .
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (86) type_specifier -> . VOID
    (87) type_specifier -> . CHAR
    (88) type_specifier -> . INT
    (89) type_specifier -> . FLOAT
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    SEMI            reduce using rule 122 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    expression_opt                 shift and go to state 178
    declaration                    shift and go to state 179
    expression                     shift and go to state 91
    empty                          shift and go to state 99
    decl_body                      shift and go to state 6
    assignment_expression          shift and go to state 100
    type_specifier                 shift and go to state 28
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 146

    (94) jump_statement -> BREAK SEMI .

    RBRACE          reduce using rule 94 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 94 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 94 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 94 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 94 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 94 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 94 (jump_statement -> BREAK SEMI .)
    ASSERT          reduce using rule 94 (jump_statement -> BREAK SEMI .)
    PRINT           reduce using rule 94 (jump_statement -> BREAK SEMI .)
    READ            reduce using rule 94 (jump_statement -> BREAK SEMI .)
    VOID            reduce using rule 94 (jump_statement -> BREAK SEMI .)
    CHAR            reduce using rule 94 (jump_statement -> BREAK SEMI .)
    INT             reduce using rule 94 (jump_statement -> BREAK SEMI .)
    FLOAT           reduce using rule 94 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 94 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 94 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 94 (jump_statement -> BREAK SEMI .)
    ADDRESS         reduce using rule 94 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 94 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 94 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 94 (jump_statement -> BREAK SEMI .)
    UNARYDIFF       reduce using rule 94 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 94 (jump_statement -> BREAK SEMI .)
    INT_CONST       reduce using rule 94 (jump_statement -> BREAK SEMI .)
    FLOAT_CONST     reduce using rule 94 (jump_statement -> BREAK SEMI .)
    CHAR_CONST      reduce using rule 94 (jump_statement -> BREAK SEMI .)
    STRING          reduce using rule 94 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 94 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 94 (jump_statement -> BREAK SEMI .)


state 147

    (95) jump_statement -> RETURN expression_opt . SEMI

    SEMI            shift and go to state 180


state 148

    (107) assert_statement -> ASSERT expression . SEMI
    (41) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 181
    COMMA           shift and go to state 143


state 149

    (108) print_statement -> PRINT LPAREN . expression_opt RPAREN SEMI
    (118) expression_opt -> . expression
    (119) expression_opt -> . empty
    (40) expression -> . assignment_expression
    (41) expression -> . expression COMMA assignment_expression
    (122) empty -> .
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    RPAREN          reduce using rule 122 (empty -> .)
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    expression_opt                 shift and go to state 182
    expression                     shift and go to state 91
    empty                          shift and go to state 99
    assignment_expression          shift and go to state 100
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 150

    (109) read_statement -> READ LPAREN . argument_expression RPAREN SEMI
    (38) argument_expression -> . assignment_expression
    (39) argument_expression -> . argument_expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    argument_expression            shift and go to state 183
    assignment_expression          shift and go to state 168
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 151

    (60) binary_expression -> binary_expression TIMES binary_expression .
    (60) binary_expression -> binary_expression . TIMES binary_expression
    (61) binary_expression -> binary_expression . DIVIDE binary_expression
    (62) binary_expression -> binary_expression . MOD binary_expression
    (63) binary_expression -> binary_expression . PLUS binary_expression
    (64) binary_expression -> binary_expression . MINUS binary_expression
    (65) binary_expression -> binary_expression . LT binary_expression
    (66) binary_expression -> binary_expression . LE binary_expression
    (67) binary_expression -> binary_expression . HT binary_expression
    (68) binary_expression -> binary_expression . HE binary_expression
    (69) binary_expression -> binary_expression . EQ binary_expression
    (70) binary_expression -> binary_expression . DIFF binary_expression
    (71) binary_expression -> binary_expression . AND binary_expression
    (72) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 60 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 60 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 60 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 60 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 60 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 60 (binary_expression -> binary_expression TIMES binary_expression .)
    LE              reduce using rule 60 (binary_expression -> binary_expression TIMES binary_expression .)
    HT              reduce using rule 60 (binary_expression -> binary_expression TIMES binary_expression .)
    HE              reduce using rule 60 (binary_expression -> binary_expression TIMES binary_expression .)
    EQ              reduce using rule 60 (binary_expression -> binary_expression TIMES binary_expression .)
    DIFF            reduce using rule 60 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 60 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 60 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 60 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 60 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 60 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 60 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 60 (binary_expression -> binary_expression TIMES binary_expression .)

  ! TIMES           [ shift and go to state 102 ]
  ! DIVIDE          [ shift and go to state 103 ]
  ! MOD             [ shift and go to state 104 ]
  ! PLUS            [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 106 ]
  ! LT              [ shift and go to state 107 ]
  ! LE              [ shift and go to state 108 ]
  ! HT              [ shift and go to state 109 ]
  ! HE              [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! DIFF            [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 152

    (61) binary_expression -> binary_expression DIVIDE binary_expression .
    (60) binary_expression -> binary_expression . TIMES binary_expression
    (61) binary_expression -> binary_expression . DIVIDE binary_expression
    (62) binary_expression -> binary_expression . MOD binary_expression
    (63) binary_expression -> binary_expression . PLUS binary_expression
    (64) binary_expression -> binary_expression . MINUS binary_expression
    (65) binary_expression -> binary_expression . LT binary_expression
    (66) binary_expression -> binary_expression . LE binary_expression
    (67) binary_expression -> binary_expression . HT binary_expression
    (68) binary_expression -> binary_expression . HE binary_expression
    (69) binary_expression -> binary_expression . EQ binary_expression
    (70) binary_expression -> binary_expression . DIFF binary_expression
    (71) binary_expression -> binary_expression . AND binary_expression
    (72) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 61 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 61 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 61 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 61 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 61 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LT              reduce using rule 61 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LE              reduce using rule 61 (binary_expression -> binary_expression DIVIDE binary_expression .)
    HT              reduce using rule 61 (binary_expression -> binary_expression DIVIDE binary_expression .)
    HE              reduce using rule 61 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQ              reduce using rule 61 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIFF            reduce using rule 61 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 61 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 61 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACKET        reduce using rule 61 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COMMA           reduce using rule 61 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SEMI            reduce using rule 61 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 61 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACE          reduce using rule 61 (binary_expression -> binary_expression DIVIDE binary_expression .)

  ! TIMES           [ shift and go to state 102 ]
  ! DIVIDE          [ shift and go to state 103 ]
  ! MOD             [ shift and go to state 104 ]
  ! PLUS            [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 106 ]
  ! LT              [ shift and go to state 107 ]
  ! LE              [ shift and go to state 108 ]
  ! HT              [ shift and go to state 109 ]
  ! HE              [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! DIFF            [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 153

    (62) binary_expression -> binary_expression MOD binary_expression .
    (60) binary_expression -> binary_expression . TIMES binary_expression
    (61) binary_expression -> binary_expression . DIVIDE binary_expression
    (62) binary_expression -> binary_expression . MOD binary_expression
    (63) binary_expression -> binary_expression . PLUS binary_expression
    (64) binary_expression -> binary_expression . MINUS binary_expression
    (65) binary_expression -> binary_expression . LT binary_expression
    (66) binary_expression -> binary_expression . LE binary_expression
    (67) binary_expression -> binary_expression . HT binary_expression
    (68) binary_expression -> binary_expression . HE binary_expression
    (69) binary_expression -> binary_expression . EQ binary_expression
    (70) binary_expression -> binary_expression . DIFF binary_expression
    (71) binary_expression -> binary_expression . AND binary_expression
    (72) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 62 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 62 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 62 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 62 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 62 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 62 (binary_expression -> binary_expression MOD binary_expression .)
    LE              reduce using rule 62 (binary_expression -> binary_expression MOD binary_expression .)
    HT              reduce using rule 62 (binary_expression -> binary_expression MOD binary_expression .)
    HE              reduce using rule 62 (binary_expression -> binary_expression MOD binary_expression .)
    EQ              reduce using rule 62 (binary_expression -> binary_expression MOD binary_expression .)
    DIFF            reduce using rule 62 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 62 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 62 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 62 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 62 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 62 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 62 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 62 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 102 ]
  ! DIVIDE          [ shift and go to state 103 ]
  ! MOD             [ shift and go to state 104 ]
  ! PLUS            [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 106 ]
  ! LT              [ shift and go to state 107 ]
  ! LE              [ shift and go to state 108 ]
  ! HT              [ shift and go to state 109 ]
  ! HE              [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! DIFF            [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 154

    (63) binary_expression -> binary_expression PLUS binary_expression .
    (60) binary_expression -> binary_expression . TIMES binary_expression
    (61) binary_expression -> binary_expression . DIVIDE binary_expression
    (62) binary_expression -> binary_expression . MOD binary_expression
    (63) binary_expression -> binary_expression . PLUS binary_expression
    (64) binary_expression -> binary_expression . MINUS binary_expression
    (65) binary_expression -> binary_expression . LT binary_expression
    (66) binary_expression -> binary_expression . LE binary_expression
    (67) binary_expression -> binary_expression . HT binary_expression
    (68) binary_expression -> binary_expression . HE binary_expression
    (69) binary_expression -> binary_expression . EQ binary_expression
    (70) binary_expression -> binary_expression . DIFF binary_expression
    (71) binary_expression -> binary_expression . AND binary_expression
    (72) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 63 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 63 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 63 (binary_expression -> binary_expression PLUS binary_expression .)
    LE              reduce using rule 63 (binary_expression -> binary_expression PLUS binary_expression .)
    HT              reduce using rule 63 (binary_expression -> binary_expression PLUS binary_expression .)
    HE              reduce using rule 63 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 63 (binary_expression -> binary_expression PLUS binary_expression .)
    DIFF            reduce using rule 63 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 63 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 63 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 63 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 63 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 63 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 63 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 63 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

  ! TIMES           [ reduce using rule 63 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 63 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 63 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 106 ]
  ! LT              [ shift and go to state 107 ]
  ! LE              [ shift and go to state 108 ]
  ! HT              [ shift and go to state 109 ]
  ! HE              [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! DIFF            [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 155

    (64) binary_expression -> binary_expression MINUS binary_expression .
    (60) binary_expression -> binary_expression . TIMES binary_expression
    (61) binary_expression -> binary_expression . DIVIDE binary_expression
    (62) binary_expression -> binary_expression . MOD binary_expression
    (63) binary_expression -> binary_expression . PLUS binary_expression
    (64) binary_expression -> binary_expression . MINUS binary_expression
    (65) binary_expression -> binary_expression . LT binary_expression
    (66) binary_expression -> binary_expression . LE binary_expression
    (67) binary_expression -> binary_expression . HT binary_expression
    (68) binary_expression -> binary_expression . HE binary_expression
    (69) binary_expression -> binary_expression . EQ binary_expression
    (70) binary_expression -> binary_expression . DIFF binary_expression
    (71) binary_expression -> binary_expression . AND binary_expression
    (72) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 64 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 64 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 64 (binary_expression -> binary_expression MINUS binary_expression .)
    LE              reduce using rule 64 (binary_expression -> binary_expression MINUS binary_expression .)
    HT              reduce using rule 64 (binary_expression -> binary_expression MINUS binary_expression .)
    HE              reduce using rule 64 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 64 (binary_expression -> binary_expression MINUS binary_expression .)
    DIFF            reduce using rule 64 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 64 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 64 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 64 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 64 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 64 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 64 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 64 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

  ! TIMES           [ reduce using rule 64 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 64 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 64 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 106 ]
  ! LT              [ shift and go to state 107 ]
  ! LE              [ shift and go to state 108 ]
  ! HT              [ shift and go to state 109 ]
  ! HE              [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! DIFF            [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 156

    (65) binary_expression -> binary_expression LT binary_expression .
    (60) binary_expression -> binary_expression . TIMES binary_expression
    (61) binary_expression -> binary_expression . DIVIDE binary_expression
    (62) binary_expression -> binary_expression . MOD binary_expression
    (63) binary_expression -> binary_expression . PLUS binary_expression
    (64) binary_expression -> binary_expression . MINUS binary_expression
    (65) binary_expression -> binary_expression . LT binary_expression
    (66) binary_expression -> binary_expression . LE binary_expression
    (67) binary_expression -> binary_expression . HT binary_expression
    (68) binary_expression -> binary_expression . HE binary_expression
    (69) binary_expression -> binary_expression . EQ binary_expression
    (70) binary_expression -> binary_expression . DIFF binary_expression
    (71) binary_expression -> binary_expression . AND binary_expression
    (72) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 65 (binary_expression -> binary_expression LT binary_expression .)
    LE              reduce using rule 65 (binary_expression -> binary_expression LT binary_expression .)
    HT              reduce using rule 65 (binary_expression -> binary_expression LT binary_expression .)
    HE              reduce using rule 65 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 65 (binary_expression -> binary_expression LT binary_expression .)
    DIFF            reduce using rule 65 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 65 (binary_expression -> binary_expression LT binary_expression .)
    OR              reduce using rule 65 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 65 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 65 (binary_expression -> binary_expression LT binary_expression .)
    SEMI            reduce using rule 65 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 65 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 65 (binary_expression -> binary_expression LT binary_expression .)
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106

  ! TIMES           [ reduce using rule 65 (binary_expression -> binary_expression LT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 65 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MOD             [ reduce using rule 65 (binary_expression -> binary_expression LT binary_expression .) ]
  ! PLUS            [ reduce using rule 65 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 65 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LT              [ shift and go to state 107 ]
  ! LE              [ shift and go to state 108 ]
  ! HT              [ shift and go to state 109 ]
  ! HE              [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! DIFF            [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 157

    (66) binary_expression -> binary_expression LE binary_expression .
    (60) binary_expression -> binary_expression . TIMES binary_expression
    (61) binary_expression -> binary_expression . DIVIDE binary_expression
    (62) binary_expression -> binary_expression . MOD binary_expression
    (63) binary_expression -> binary_expression . PLUS binary_expression
    (64) binary_expression -> binary_expression . MINUS binary_expression
    (65) binary_expression -> binary_expression . LT binary_expression
    (66) binary_expression -> binary_expression . LE binary_expression
    (67) binary_expression -> binary_expression . HT binary_expression
    (68) binary_expression -> binary_expression . HE binary_expression
    (69) binary_expression -> binary_expression . EQ binary_expression
    (70) binary_expression -> binary_expression . DIFF binary_expression
    (71) binary_expression -> binary_expression . AND binary_expression
    (72) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 66 (binary_expression -> binary_expression LE binary_expression .)
    LE              reduce using rule 66 (binary_expression -> binary_expression LE binary_expression .)
    HT              reduce using rule 66 (binary_expression -> binary_expression LE binary_expression .)
    HE              reduce using rule 66 (binary_expression -> binary_expression LE binary_expression .)
    EQ              reduce using rule 66 (binary_expression -> binary_expression LE binary_expression .)
    DIFF            reduce using rule 66 (binary_expression -> binary_expression LE binary_expression .)
    AND             reduce using rule 66 (binary_expression -> binary_expression LE binary_expression .)
    OR              reduce using rule 66 (binary_expression -> binary_expression LE binary_expression .)
    RBRACKET        reduce using rule 66 (binary_expression -> binary_expression LE binary_expression .)
    COMMA           reduce using rule 66 (binary_expression -> binary_expression LE binary_expression .)
    SEMI            reduce using rule 66 (binary_expression -> binary_expression LE binary_expression .)
    RPAREN          reduce using rule 66 (binary_expression -> binary_expression LE binary_expression .)
    RBRACE          reduce using rule 66 (binary_expression -> binary_expression LE binary_expression .)
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106

  ! TIMES           [ reduce using rule 66 (binary_expression -> binary_expression LE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 66 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MOD             [ reduce using rule 66 (binary_expression -> binary_expression LE binary_expression .) ]
  ! PLUS            [ reduce using rule 66 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MINUS           [ reduce using rule 66 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LT              [ shift and go to state 107 ]
  ! LE              [ shift and go to state 108 ]
  ! HT              [ shift and go to state 109 ]
  ! HE              [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! DIFF            [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 158

    (67) binary_expression -> binary_expression HT binary_expression .
    (60) binary_expression -> binary_expression . TIMES binary_expression
    (61) binary_expression -> binary_expression . DIVIDE binary_expression
    (62) binary_expression -> binary_expression . MOD binary_expression
    (63) binary_expression -> binary_expression . PLUS binary_expression
    (64) binary_expression -> binary_expression . MINUS binary_expression
    (65) binary_expression -> binary_expression . LT binary_expression
    (66) binary_expression -> binary_expression . LE binary_expression
    (67) binary_expression -> binary_expression . HT binary_expression
    (68) binary_expression -> binary_expression . HE binary_expression
    (69) binary_expression -> binary_expression . EQ binary_expression
    (70) binary_expression -> binary_expression . DIFF binary_expression
    (71) binary_expression -> binary_expression . AND binary_expression
    (72) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 67 (binary_expression -> binary_expression HT binary_expression .)
    LE              reduce using rule 67 (binary_expression -> binary_expression HT binary_expression .)
    HT              reduce using rule 67 (binary_expression -> binary_expression HT binary_expression .)
    HE              reduce using rule 67 (binary_expression -> binary_expression HT binary_expression .)
    EQ              reduce using rule 67 (binary_expression -> binary_expression HT binary_expression .)
    DIFF            reduce using rule 67 (binary_expression -> binary_expression HT binary_expression .)
    AND             reduce using rule 67 (binary_expression -> binary_expression HT binary_expression .)
    OR              reduce using rule 67 (binary_expression -> binary_expression HT binary_expression .)
    RBRACKET        reduce using rule 67 (binary_expression -> binary_expression HT binary_expression .)
    COMMA           reduce using rule 67 (binary_expression -> binary_expression HT binary_expression .)
    SEMI            reduce using rule 67 (binary_expression -> binary_expression HT binary_expression .)
    RPAREN          reduce using rule 67 (binary_expression -> binary_expression HT binary_expression .)
    RBRACE          reduce using rule 67 (binary_expression -> binary_expression HT binary_expression .)
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106

  ! TIMES           [ reduce using rule 67 (binary_expression -> binary_expression HT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 67 (binary_expression -> binary_expression HT binary_expression .) ]
  ! MOD             [ reduce using rule 67 (binary_expression -> binary_expression HT binary_expression .) ]
  ! PLUS            [ reduce using rule 67 (binary_expression -> binary_expression HT binary_expression .) ]
  ! MINUS           [ reduce using rule 67 (binary_expression -> binary_expression HT binary_expression .) ]
  ! LT              [ shift and go to state 107 ]
  ! LE              [ shift and go to state 108 ]
  ! HT              [ shift and go to state 109 ]
  ! HE              [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! DIFF            [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 159

    (68) binary_expression -> binary_expression HE binary_expression .
    (60) binary_expression -> binary_expression . TIMES binary_expression
    (61) binary_expression -> binary_expression . DIVIDE binary_expression
    (62) binary_expression -> binary_expression . MOD binary_expression
    (63) binary_expression -> binary_expression . PLUS binary_expression
    (64) binary_expression -> binary_expression . MINUS binary_expression
    (65) binary_expression -> binary_expression . LT binary_expression
    (66) binary_expression -> binary_expression . LE binary_expression
    (67) binary_expression -> binary_expression . HT binary_expression
    (68) binary_expression -> binary_expression . HE binary_expression
    (69) binary_expression -> binary_expression . EQ binary_expression
    (70) binary_expression -> binary_expression . DIFF binary_expression
    (71) binary_expression -> binary_expression . AND binary_expression
    (72) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 68 (binary_expression -> binary_expression HE binary_expression .)
    LE              reduce using rule 68 (binary_expression -> binary_expression HE binary_expression .)
    HT              reduce using rule 68 (binary_expression -> binary_expression HE binary_expression .)
    HE              reduce using rule 68 (binary_expression -> binary_expression HE binary_expression .)
    EQ              reduce using rule 68 (binary_expression -> binary_expression HE binary_expression .)
    DIFF            reduce using rule 68 (binary_expression -> binary_expression HE binary_expression .)
    AND             reduce using rule 68 (binary_expression -> binary_expression HE binary_expression .)
    OR              reduce using rule 68 (binary_expression -> binary_expression HE binary_expression .)
    RBRACKET        reduce using rule 68 (binary_expression -> binary_expression HE binary_expression .)
    COMMA           reduce using rule 68 (binary_expression -> binary_expression HE binary_expression .)
    SEMI            reduce using rule 68 (binary_expression -> binary_expression HE binary_expression .)
    RPAREN          reduce using rule 68 (binary_expression -> binary_expression HE binary_expression .)
    RBRACE          reduce using rule 68 (binary_expression -> binary_expression HE binary_expression .)
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106

  ! TIMES           [ reduce using rule 68 (binary_expression -> binary_expression HE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 68 (binary_expression -> binary_expression HE binary_expression .) ]
  ! MOD             [ reduce using rule 68 (binary_expression -> binary_expression HE binary_expression .) ]
  ! PLUS            [ reduce using rule 68 (binary_expression -> binary_expression HE binary_expression .) ]
  ! MINUS           [ reduce using rule 68 (binary_expression -> binary_expression HE binary_expression .) ]
  ! LT              [ shift and go to state 107 ]
  ! LE              [ shift and go to state 108 ]
  ! HT              [ shift and go to state 109 ]
  ! HE              [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! DIFF            [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 160

    (69) binary_expression -> binary_expression EQ binary_expression .
    (60) binary_expression -> binary_expression . TIMES binary_expression
    (61) binary_expression -> binary_expression . DIVIDE binary_expression
    (62) binary_expression -> binary_expression . MOD binary_expression
    (63) binary_expression -> binary_expression . PLUS binary_expression
    (64) binary_expression -> binary_expression . MINUS binary_expression
    (65) binary_expression -> binary_expression . LT binary_expression
    (66) binary_expression -> binary_expression . LE binary_expression
    (67) binary_expression -> binary_expression . HT binary_expression
    (68) binary_expression -> binary_expression . HE binary_expression
    (69) binary_expression -> binary_expression . EQ binary_expression
    (70) binary_expression -> binary_expression . DIFF binary_expression
    (71) binary_expression -> binary_expression . AND binary_expression
    (72) binary_expression -> binary_expression . OR binary_expression

    EQ              reduce using rule 69 (binary_expression -> binary_expression EQ binary_expression .)
    DIFF            reduce using rule 69 (binary_expression -> binary_expression EQ binary_expression .)
    AND             reduce using rule 69 (binary_expression -> binary_expression EQ binary_expression .)
    OR              reduce using rule 69 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACKET        reduce using rule 69 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 69 (binary_expression -> binary_expression EQ binary_expression .)
    SEMI            reduce using rule 69 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 69 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 69 (binary_expression -> binary_expression EQ binary_expression .)
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    LT              shift and go to state 107
    LE              shift and go to state 108
    HT              shift and go to state 109
    HE              shift and go to state 110

  ! TIMES           [ reduce using rule 69 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 69 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MOD             [ reduce using rule 69 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! PLUS            [ reduce using rule 69 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MINUS           [ reduce using rule 69 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LT              [ reduce using rule 69 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LE              [ reduce using rule 69 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! HT              [ reduce using rule 69 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! HE              [ reduce using rule 69 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! EQ              [ shift and go to state 111 ]
  ! DIFF            [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 161

    (70) binary_expression -> binary_expression DIFF binary_expression .
    (60) binary_expression -> binary_expression . TIMES binary_expression
    (61) binary_expression -> binary_expression . DIVIDE binary_expression
    (62) binary_expression -> binary_expression . MOD binary_expression
    (63) binary_expression -> binary_expression . PLUS binary_expression
    (64) binary_expression -> binary_expression . MINUS binary_expression
    (65) binary_expression -> binary_expression . LT binary_expression
    (66) binary_expression -> binary_expression . LE binary_expression
    (67) binary_expression -> binary_expression . HT binary_expression
    (68) binary_expression -> binary_expression . HE binary_expression
    (69) binary_expression -> binary_expression . EQ binary_expression
    (70) binary_expression -> binary_expression . DIFF binary_expression
    (71) binary_expression -> binary_expression . AND binary_expression
    (72) binary_expression -> binary_expression . OR binary_expression

    EQ              reduce using rule 70 (binary_expression -> binary_expression DIFF binary_expression .)
    DIFF            reduce using rule 70 (binary_expression -> binary_expression DIFF binary_expression .)
    AND             reduce using rule 70 (binary_expression -> binary_expression DIFF binary_expression .)
    OR              reduce using rule 70 (binary_expression -> binary_expression DIFF binary_expression .)
    RBRACKET        reduce using rule 70 (binary_expression -> binary_expression DIFF binary_expression .)
    COMMA           reduce using rule 70 (binary_expression -> binary_expression DIFF binary_expression .)
    SEMI            reduce using rule 70 (binary_expression -> binary_expression DIFF binary_expression .)
    RPAREN          reduce using rule 70 (binary_expression -> binary_expression DIFF binary_expression .)
    RBRACE          reduce using rule 70 (binary_expression -> binary_expression DIFF binary_expression .)
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    LT              shift and go to state 107
    LE              shift and go to state 108
    HT              shift and go to state 109
    HE              shift and go to state 110

  ! TIMES           [ reduce using rule 70 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! DIVIDE          [ reduce using rule 70 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! MOD             [ reduce using rule 70 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! PLUS            [ reduce using rule 70 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! MINUS           [ reduce using rule 70 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! LT              [ reduce using rule 70 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! LE              [ reduce using rule 70 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! HT              [ reduce using rule 70 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! HE              [ reduce using rule 70 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! EQ              [ shift and go to state 111 ]
  ! DIFF            [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 162

    (71) binary_expression -> binary_expression AND binary_expression .
    (60) binary_expression -> binary_expression . TIMES binary_expression
    (61) binary_expression -> binary_expression . DIVIDE binary_expression
    (62) binary_expression -> binary_expression . MOD binary_expression
    (63) binary_expression -> binary_expression . PLUS binary_expression
    (64) binary_expression -> binary_expression . MINUS binary_expression
    (65) binary_expression -> binary_expression . LT binary_expression
    (66) binary_expression -> binary_expression . LE binary_expression
    (67) binary_expression -> binary_expression . HT binary_expression
    (68) binary_expression -> binary_expression . HE binary_expression
    (69) binary_expression -> binary_expression . EQ binary_expression
    (70) binary_expression -> binary_expression . DIFF binary_expression
    (71) binary_expression -> binary_expression . AND binary_expression
    (72) binary_expression -> binary_expression . OR binary_expression

    AND             reduce using rule 71 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 71 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 71 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 71 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 71 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 71 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 71 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    LT              shift and go to state 107
    LE              shift and go to state 108
    HT              shift and go to state 109
    HE              shift and go to state 110
    EQ              shift and go to state 111
    DIFF            shift and go to state 112

  ! TIMES           [ reduce using rule 71 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 71 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 71 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 71 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 71 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LT              [ reduce using rule 71 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LE              [ reduce using rule 71 (binary_expression -> binary_expression AND binary_expression .) ]
  ! HT              [ reduce using rule 71 (binary_expression -> binary_expression AND binary_expression .) ]
  ! HE              [ reduce using rule 71 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQ              [ reduce using rule 71 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIFF            [ reduce using rule 71 (binary_expression -> binary_expression AND binary_expression .) ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 163

    (72) binary_expression -> binary_expression OR binary_expression .
    (60) binary_expression -> binary_expression . TIMES binary_expression
    (61) binary_expression -> binary_expression . DIVIDE binary_expression
    (62) binary_expression -> binary_expression . MOD binary_expression
    (63) binary_expression -> binary_expression . PLUS binary_expression
    (64) binary_expression -> binary_expression . MINUS binary_expression
    (65) binary_expression -> binary_expression . LT binary_expression
    (66) binary_expression -> binary_expression . LE binary_expression
    (67) binary_expression -> binary_expression . HT binary_expression
    (68) binary_expression -> binary_expression . HE binary_expression
    (69) binary_expression -> binary_expression . EQ binary_expression
    (70) binary_expression -> binary_expression . DIFF binary_expression
    (71) binary_expression -> binary_expression . AND binary_expression
    (72) binary_expression -> binary_expression . OR binary_expression

    OR              reduce using rule 72 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 72 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 72 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 72 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 72 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 72 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    LT              shift and go to state 107
    LE              shift and go to state 108
    HT              shift and go to state 109
    HE              shift and go to state 110
    EQ              shift and go to state 111
    DIFF            shift and go to state 112
    AND             shift and go to state 113

  ! TIMES           [ reduce using rule 72 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 72 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 72 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 72 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 72 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LT              [ reduce using rule 72 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LE              [ reduce using rule 72 (binary_expression -> binary_expression OR binary_expression .) ]
  ! HT              [ reduce using rule 72 (binary_expression -> binary_expression OR binary_expression .) ]
  ! HE              [ reduce using rule 72 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQ              [ reduce using rule 72 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIFF            [ reduce using rule 72 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 72 (binary_expression -> binary_expression OR binary_expression .) ]
  ! OR              [ shift and go to state 114 ]


state 164

    (46) cast_expression -> LPAREN type_specifier RPAREN . cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    LPAREN          shift and go to state 48
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    cast_expression                shift and go to state 184
    unary_expression               shift and go to state 47
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 165

    (44) primary_expression -> LPAREN expression RPAREN .

    PLUSPLUS        reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    HT              reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    HE              reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    DIFF            reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    TIMESASSIGN     reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDEASSIGN    reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    MODASSIGN       reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    PLUSASSIGN      reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    MINUSASSIGN     reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 44 (primary_expression -> LPAREN expression RPAREN .)


state 166

    (35) postfix_expression -> postfix_expression LPAREN RPAREN .

    PLUSPLUS        reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LBRACKET        reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE              reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    HT              reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    HE              reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIFF            reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMESASSIGN     reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDEASSIGN    reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODASSIGN       reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSASSIGN      reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSASSIGN     reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 35 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 167

    (36) postfix_expression -> postfix_expression LPAREN argument_expression . RPAREN
    (39) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 185
    COMMA           shift and go to state 186


state 168

    (38) argument_expression -> assignment_expression .

    RPAREN          reduce using rule 38 (argument_expression -> assignment_expression .)
    COMMA           reduce using rule 38 (argument_expression -> assignment_expression .)


state 169

    (37) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (41) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 187
    COMMA           shift and go to state 143


state 170

    (21) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 21 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 21 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 171

    (80) identifier_list -> identifier_list COMMA identifier .

    COMMA           reduce using rule 80 (identifier_list -> identifier_list COMMA identifier .)
    RPAREN          reduce using rule 80 (identifier_list -> identifier_list COMMA identifier .)


state 172

    (28) initializer -> LBRACE initializer_list RBRACE .

    COMMA           reduce using rule 28 (initializer -> LBRACE initializer_list RBRACE .)
    SEMI            reduce using rule 28 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 28 (initializer -> LBRACE initializer_list RBRACE .)


state 173

    (29) initializer -> LBRACE initializer_list COMMA . RBRACE
    (31) initializer_list -> initializer_list COMMA . initializer
    (27) initializer -> . assignment_expression
    (28) initializer -> . LBRACE initializer_list RBRACE
    (29) initializer -> . LBRACE initializer_list COMMA RBRACE
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    RBRACE          shift and go to state 188
    LBRACE          shift and go to state 73
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    initializer                    shift and go to state 189
    assignment_expression          shift and go to state 72
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 174

    (48) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COMMA           reduce using rule 48 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 48 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 48 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 48 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 48 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 175

    (101) selection_statement -> IF LPAREN expression . RPAREN statement
    (102) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (41) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 190
    COMMA           shift and go to state 143


state 176

    (41) expression -> expression COMMA assignment_expression .

    COMMA           reduce using rule 41 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 41 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 41 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 41 (expression -> expression COMMA assignment_expression .)


state 177

    (103) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (41) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 191
    COMMA           shift and go to state 143


state 178

    (104) iteration_statement -> FOR LPAREN expression_opt . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 192


state 179

    (105) iteration_statement -> FOR LPAREN declaration . expression_opt SEMI expression_opt RPAREN statement
    (118) expression_opt -> . expression
    (119) expression_opt -> . empty
    (40) expression -> . assignment_expression
    (41) expression -> . expression COMMA assignment_expression
    (122) empty -> .
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    SEMI            reduce using rule 122 (empty -> .)
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    expression_opt                 shift and go to state 193
    expression                     shift and go to state 91
    empty                          shift and go to state 99
    assignment_expression          shift and go to state 100
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 180

    (95) jump_statement -> RETURN expression_opt SEMI .

    RBRACE          reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    IF              reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    LBRACE          reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    WHILE           reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    FOR             reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    BREAK           reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    RETURN          reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    ASSERT          reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    PRINT           reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    READ            reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    VOID            reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    CHAR            reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    INT             reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    FLOAT           reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    PLUSPLUS        reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    MINUSMINUS      reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    LPAREN          reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    ADDRESS         reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    TIMES           reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    PLUS            reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    MINUS           reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    UNARYDIFF       reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    ID              reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    INT_CONST       reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    FLOAT_CONST     reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    CHAR_CONST      reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    STRING          reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    SEMI            reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)
    ELSE            reduce using rule 95 (jump_statement -> RETURN expression_opt SEMI .)


state 181

    (107) assert_statement -> ASSERT expression SEMI .

    RBRACE          reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    IF              reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    LBRACE          reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    WHILE           reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    FOR             reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    BREAK           reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    RETURN          reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    ASSERT          reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    PRINT           reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    READ            reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    VOID            reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    CHAR            reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    INT             reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    FLOAT           reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    PLUSPLUS        reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    MINUSMINUS      reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    LPAREN          reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    ADDRESS         reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    TIMES           reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    PLUS            reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    MINUS           reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    UNARYDIFF       reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    ID              reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    INT_CONST       reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    FLOAT_CONST     reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    CHAR_CONST      reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    STRING          reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    SEMI            reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)
    ELSE            reduce using rule 107 (assert_statement -> ASSERT expression SEMI .)


state 182

    (108) print_statement -> PRINT LPAREN expression_opt . RPAREN SEMI

    RPAREN          shift and go to state 194


state 183

    (109) read_statement -> READ LPAREN argument_expression . RPAREN SEMI
    (39) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 195
    COMMA           shift and go to state 186


state 184

    (46) cast_expression -> LPAREN type_specifier RPAREN cast_expression .

    TIMES           reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDE          reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MOD             reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUS            reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS           reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LT              reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LE              reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    HT              reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    HE              reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQ              reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIFF            reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    AND             reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    OR              reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACKET        reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    COMMA           reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SEMI            reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RPAREN          reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQUALS          reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    TIMESASSIGN     reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDEASSIGN    reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MODASSIGN       reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUSASSIGN      reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUSASSIGN     reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACE          reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)


state 185

    (36) postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .

    PLUSPLUS        reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUSMINUS      reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LPAREN          reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LBRACKET        reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    TIMES           reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DIVIDE          reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MOD             reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PLUS            reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUS           reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LT              reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LE              reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    HT              reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    HE              reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQ              reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DIFF            reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    AND             reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    OR              reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RBRACKET        reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQUALS          reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    TIMESASSIGN     reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DIVIDEASSIGN    reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MODASSIGN       reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PLUSASSIGN      reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUSASSIGN     reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    COMMA           reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    SEMI            reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RPAREN          reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RBRACE          reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)


state 186

    (39) argument_expression -> argument_expression COMMA . assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    assignment_expression          shift and go to state 196
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 187

    (37) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    PLUSPLUS        reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    HT              reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    HE              reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIFF            reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMESASSIGN     reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDEASSIGN    reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODASSIGN       reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSASSIGN      reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSASSIGN     reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 37 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 188

    (29) initializer -> LBRACE initializer_list COMMA RBRACE .

    COMMA           reduce using rule 29 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    SEMI            reduce using rule 29 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 29 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 189

    (31) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 31 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 31 (initializer_list -> initializer_list COMMA initializer .)


state 190

    (101) selection_statement -> IF LPAREN expression RPAREN . statement
    (102) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (110) statement -> . expression_statement
    (111) statement -> . selection_statement
    (112) statement -> . compound_statement
    (113) statement -> . iteration_statement
    (114) statement -> . jump_statement
    (115) statement -> . assert_statement
    (116) statement -> . print_statement
    (117) statement -> . read_statement
    (106) expression_statement -> . expression_opt SEMI
    (101) selection_statement -> . IF LPAREN expression RPAREN statement
    (102) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) compound_statement -> . LBRACE block_item_list RBRACE
    (103) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (104) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (105) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (94) jump_statement -> . BREAK SEMI
    (95) jump_statement -> . RETURN expression_opt SEMI
    (107) assert_statement -> . ASSERT expression SEMI
    (108) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (109) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (118) expression_opt -> . expression
    (119) expression_opt -> . empty
    (40) expression -> . assignment_expression
    (41) expression -> . expression COMMA assignment_expression
    (122) empty -> .
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    IF              shift and go to state 90
    LBRACE          shift and go to state 36
    WHILE           shift and go to state 92
    FOR             shift and go to state 93
    BREAK           shift and go to state 94
    RETURN          shift and go to state 95
    ASSERT          shift and go to state 96
    PRINT           shift and go to state 97
    READ            shift and go to state 98
    SEMI            reduce using rule 122 (empty -> .)
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 91
    statement                      shift and go to state 197
    expression_statement           shift and go to state 81
    selection_statement            shift and go to state 82
    compound_statement             shift and go to state 83
    iteration_statement            shift and go to state 84
    jump_statement                 shift and go to state 85
    assert_statement               shift and go to state 86
    print_statement                shift and go to state 87
    read_statement                 shift and go to state 88
    expression_opt                 shift and go to state 89
    empty                          shift and go to state 99
    assignment_expression          shift and go to state 100
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 191

    (103) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (110) statement -> . expression_statement
    (111) statement -> . selection_statement
    (112) statement -> . compound_statement
    (113) statement -> . iteration_statement
    (114) statement -> . jump_statement
    (115) statement -> . assert_statement
    (116) statement -> . print_statement
    (117) statement -> . read_statement
    (106) expression_statement -> . expression_opt SEMI
    (101) selection_statement -> . IF LPAREN expression RPAREN statement
    (102) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) compound_statement -> . LBRACE block_item_list RBRACE
    (103) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (104) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (105) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (94) jump_statement -> . BREAK SEMI
    (95) jump_statement -> . RETURN expression_opt SEMI
    (107) assert_statement -> . ASSERT expression SEMI
    (108) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (109) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (118) expression_opt -> . expression
    (119) expression_opt -> . empty
    (40) expression -> . assignment_expression
    (41) expression -> . expression COMMA assignment_expression
    (122) empty -> .
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    IF              shift and go to state 90
    LBRACE          shift and go to state 36
    WHILE           shift and go to state 92
    FOR             shift and go to state 93
    BREAK           shift and go to state 94
    RETURN          shift and go to state 95
    ASSERT          shift and go to state 96
    PRINT           shift and go to state 97
    READ            shift and go to state 98
    SEMI            reduce using rule 122 (empty -> .)
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 91
    statement                      shift and go to state 198
    expression_statement           shift and go to state 81
    selection_statement            shift and go to state 82
    compound_statement             shift and go to state 83
    iteration_statement            shift and go to state 84
    jump_statement                 shift and go to state 85
    assert_statement               shift and go to state 86
    print_statement                shift and go to state 87
    read_statement                 shift and go to state 88
    expression_opt                 shift and go to state 89
    empty                          shift and go to state 99
    assignment_expression          shift and go to state 100
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 192

    (104) iteration_statement -> FOR LPAREN expression_opt SEMI . expression_opt SEMI expression_opt RPAREN statement
    (118) expression_opt -> . expression
    (119) expression_opt -> . empty
    (40) expression -> . assignment_expression
    (41) expression -> . expression COMMA assignment_expression
    (122) empty -> .
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    SEMI            reduce using rule 122 (empty -> .)
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    expression_opt                 shift and go to state 199
    expression                     shift and go to state 91
    empty                          shift and go to state 99
    assignment_expression          shift and go to state 100
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 193

    (105) iteration_statement -> FOR LPAREN declaration expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 200


state 194

    (108) print_statement -> PRINT LPAREN expression_opt RPAREN . SEMI

    SEMI            shift and go to state 201


state 195

    (109) read_statement -> READ LPAREN argument_expression RPAREN . SEMI

    SEMI            shift and go to state 202


state 196

    (39) argument_expression -> argument_expression COMMA assignment_expression .

    RPAREN          reduce using rule 39 (argument_expression -> argument_expression COMMA assignment_expression .)
    COMMA           reduce using rule 39 (argument_expression -> argument_expression COMMA assignment_expression .)


state 197

    (101) selection_statement -> IF LPAREN expression RPAREN statement .
    (102) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    READ            reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNARYDIFF       reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 203

  ! ELSE            [ reduce using rule 101 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 198

    (103) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    READ            reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNARYDIFF       reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 103 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 199

    (104) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 204


state 200

    (105) iteration_statement -> FOR LPAREN declaration expression_opt SEMI . expression_opt RPAREN statement
    (118) expression_opt -> . expression
    (119) expression_opt -> . empty
    (40) expression -> . assignment_expression
    (41) expression -> . expression COMMA assignment_expression
    (122) empty -> .
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    RPAREN          reduce using rule 122 (empty -> .)
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    expression_opt                 shift and go to state 205
    expression                     shift and go to state 91
    empty                          shift and go to state 99
    assignment_expression          shift and go to state 100
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 201

    (108) print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .

    RBRACE          reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    IF              reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    LBRACE          reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    WHILE           reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FOR             reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    BREAK           reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    RETURN          reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ASSERT          reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PRINT           reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    READ            reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    VOID            reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    CHAR            reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    INT             reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FLOAT           reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PLUSPLUS        reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    MINUSMINUS      reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    LPAREN          reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ADDRESS         reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    TIMES           reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PLUS            reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    MINUS           reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    UNARYDIFF       reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ID              reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    INT_CONST       reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    CHAR_CONST      reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    STRING          reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    SEMI            reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ELSE            reduce using rule 108 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)


state 202

    (109) read_statement -> READ LPAREN argument_expression RPAREN SEMI .

    RBRACE          reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    IF              reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LBRACE          reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    WHILE           reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FOR             reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    BREAK           reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RETURN          reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ASSERT          reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PRINT           reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    READ            reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    VOID            reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    CHAR            reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    INT             reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FLOAT           reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUSPLUS        reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MINUSMINUS      reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LPAREN          reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ADDRESS         reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    TIMES           reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUS            reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MINUS           reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    UNARYDIFF       reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ID              reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    INT_CONST       reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    STRING          reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    SEMI            reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ELSE            reduce using rule 109 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)


state 203

    (102) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (110) statement -> . expression_statement
    (111) statement -> . selection_statement
    (112) statement -> . compound_statement
    (113) statement -> . iteration_statement
    (114) statement -> . jump_statement
    (115) statement -> . assert_statement
    (116) statement -> . print_statement
    (117) statement -> . read_statement
    (106) expression_statement -> . expression_opt SEMI
    (101) selection_statement -> . IF LPAREN expression RPAREN statement
    (102) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) compound_statement -> . LBRACE block_item_list RBRACE
    (103) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (104) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (105) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (94) jump_statement -> . BREAK SEMI
    (95) jump_statement -> . RETURN expression_opt SEMI
    (107) assert_statement -> . ASSERT expression SEMI
    (108) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (109) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (118) expression_opt -> . expression
    (119) expression_opt -> . empty
    (40) expression -> . assignment_expression
    (41) expression -> . expression COMMA assignment_expression
    (122) empty -> .
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    IF              shift and go to state 90
    LBRACE          shift and go to state 36
    WHILE           shift and go to state 92
    FOR             shift and go to state 93
    BREAK           shift and go to state 94
    RETURN          shift and go to state 95
    ASSERT          shift and go to state 96
    PRINT           shift and go to state 97
    READ            shift and go to state 98
    SEMI            reduce using rule 122 (empty -> .)
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 91
    statement                      shift and go to state 206
    expression_statement           shift and go to state 81
    selection_statement            shift and go to state 82
    compound_statement             shift and go to state 83
    iteration_statement            shift and go to state 84
    jump_statement                 shift and go to state 85
    assert_statement               shift and go to state 86
    print_statement                shift and go to state 87
    read_statement                 shift and go to state 88
    expression_opt                 shift and go to state 89
    empty                          shift and go to state 99
    assignment_expression          shift and go to state 100
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 204

    (104) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI . expression_opt RPAREN statement
    (118) expression_opt -> . expression
    (119) expression_opt -> . empty
    (40) expression -> . assignment_expression
    (41) expression -> . expression COMMA assignment_expression
    (122) empty -> .
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    RPAREN          reduce using rule 122 (empty -> .)
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    expression_opt                 shift and go to state 207
    expression                     shift and go to state 91
    empty                          shift and go to state 99
    assignment_expression          shift and go to state 100
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 205

    (105) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 208


state 206

    (102) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASSERT          reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINT           reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    READ            reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ADDRESS         reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNARYDIFF       reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST       reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_CONST     reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_CONST      reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 102 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 207

    (104) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 209


state 208

    (105) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN . statement
    (110) statement -> . expression_statement
    (111) statement -> . selection_statement
    (112) statement -> . compound_statement
    (113) statement -> . iteration_statement
    (114) statement -> . jump_statement
    (115) statement -> . assert_statement
    (116) statement -> . print_statement
    (117) statement -> . read_statement
    (106) expression_statement -> . expression_opt SEMI
    (101) selection_statement -> . IF LPAREN expression RPAREN statement
    (102) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) compound_statement -> . LBRACE block_item_list RBRACE
    (103) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (104) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (105) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (94) jump_statement -> . BREAK SEMI
    (95) jump_statement -> . RETURN expression_opt SEMI
    (107) assert_statement -> . ASSERT expression SEMI
    (108) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (109) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (118) expression_opt -> . expression
    (119) expression_opt -> . empty
    (40) expression -> . assignment_expression
    (41) expression -> . expression COMMA assignment_expression
    (122) empty -> .
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    IF              shift and go to state 90
    LBRACE          shift and go to state 36
    WHILE           shift and go to state 92
    FOR             shift and go to state 93
    BREAK           shift and go to state 94
    RETURN          shift and go to state 95
    ASSERT          shift and go to state 96
    PRINT           shift and go to state 97
    READ            shift and go to state 98
    SEMI            reduce using rule 122 (empty -> .)
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    expression_opt                 shift and go to state 89
    statement                      shift and go to state 210
    expression_statement           shift and go to state 81
    selection_statement            shift and go to state 82
    compound_statement             shift and go to state 83
    iteration_statement            shift and go to state 84
    jump_statement                 shift and go to state 85
    assert_statement               shift and go to state 86
    print_statement                shift and go to state 87
    read_statement                 shift and go to state 88
    expression                     shift and go to state 91
    empty                          shift and go to state 99
    assignment_expression          shift and go to state 100
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 209

    (104) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN . statement
    (110) statement -> . expression_statement
    (111) statement -> . selection_statement
    (112) statement -> . compound_statement
    (113) statement -> . iteration_statement
    (114) statement -> . jump_statement
    (115) statement -> . assert_statement
    (116) statement -> . print_statement
    (117) statement -> . read_statement
    (106) expression_statement -> . expression_opt SEMI
    (101) selection_statement -> . IF LPAREN expression RPAREN statement
    (102) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) compound_statement -> . LBRACE block_item_list RBRACE
    (103) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (104) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (105) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (94) jump_statement -> . BREAK SEMI
    (95) jump_statement -> . RETURN expression_opt SEMI
    (107) assert_statement -> . ASSERT expression SEMI
    (108) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (109) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (118) expression_opt -> . expression
    (119) expression_opt -> . empty
    (40) expression -> . assignment_expression
    (41) expression -> . expression COMMA assignment_expression
    (122) empty -> .
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) binary_expression -> . cast_expression
    (60) binary_expression -> . binary_expression TIMES binary_expression
    (61) binary_expression -> . binary_expression DIVIDE binary_expression
    (62) binary_expression -> . binary_expression MOD binary_expression
    (63) binary_expression -> . binary_expression PLUS binary_expression
    (64) binary_expression -> . binary_expression MINUS binary_expression
    (65) binary_expression -> . binary_expression LT binary_expression
    (66) binary_expression -> . binary_expression LE binary_expression
    (67) binary_expression -> . binary_expression HT binary_expression
    (68) binary_expression -> . binary_expression HE binary_expression
    (69) binary_expression -> . binary_expression EQ binary_expression
    (70) binary_expression -> . binary_expression DIFF binary_expression
    (71) binary_expression -> . binary_expression AND binary_expression
    (72) binary_expression -> . binary_expression OR binary_expression
    (55) unary_expression -> . postfix_expression
    (56) unary_expression -> . PLUSPLUS unary_expression
    (57) unary_expression -> . MINUSMINUS unary_expression
    (58) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (32) postfix_expression -> . primary_expression
    (33) postfix_expression -> . postfix_expression PLUSPLUS
    (34) postfix_expression -> . postfix_expression MINUSMINUS
    (35) postfix_expression -> . postfix_expression LPAREN RPAREN
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (37) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . UNARYDIFF
    (42) primary_expression -> . identifier
    (43) primary_expression -> . constant
    (44) primary_expression -> . LPAREN expression RPAREN
    (76) identifier -> . ID
    (90) constant -> . INT_CONST
    (91) constant -> . FLOAT_CONST
    (92) constant -> . CHAR_CONST
    (93) constant -> . STRING

    IF              shift and go to state 90
    LBRACE          shift and go to state 36
    WHILE           shift and go to state 92
    FOR             shift and go to state 93
    BREAK           shift and go to state 94
    RETURN          shift and go to state 95
    ASSERT          shift and go to state 96
    PRINT           shift and go to state 97
    READ            shift and go to state 98
    SEMI            reduce using rule 122 (empty -> .)
    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    LPAREN          shift and go to state 48
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    UNARYDIFF       shift and go to state 55
    ID              shift and go to state 16
    INT_CONST       shift and go to state 58
    FLOAT_CONST     shift and go to state 59
    CHAR_CONST      shift and go to state 60
    STRING          shift and go to state 61

    expression_opt                 shift and go to state 89
    statement                      shift and go to state 211
    expression_statement           shift and go to state 81
    selection_statement            shift and go to state 82
    compound_statement             shift and go to state 83
    iteration_statement            shift and go to state 84
    jump_statement                 shift and go to state 85
    assert_statement               shift and go to state 86
    print_statement                shift and go to state 87
    read_statement                 shift and go to state 88
    expression                     shift and go to state 91
    empty                          shift and go to state 99
    assignment_expression          shift and go to state 100
    binary_expression              shift and go to state 74
    unary_expression               shift and go to state 75
    cast_expression                shift and go to state 43
    postfix_expression             shift and go to state 49
    unary_operator                 shift and go to state 52
    primary_expression             shift and go to state 53
    identifier                     shift and go to state 56
    constant                       shift and go to state 57

state 210

    (105) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .

    RBRACE          reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LBRACE          reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    VOID            reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CHAR            reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT             reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT           reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ADDRESS         reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    UNARYDIFF       reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST       reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STRING          reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 105 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)


state 211

    (104) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .

    RBRACE          reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LBRACE          reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    VOID            reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR            reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT             reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT           reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ADDRESS         reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    UNARYDIFF       reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST       reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STRING          reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 104 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 197 resolved as shift
