Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> global_declaration
Rule 2     global_declaration -> function_definition
Rule 3     global_declaration -> declaration
Rule 4     function_definition -> type_specifier direct_declarator compound_statement
Rule 5     function_definition -> direct_declarator declaration compound_statement
Rule 6     type_specifier -> VOID
Rule 7     type_specifier -> CHAR
Rule 8     type_specifier -> INT
Rule 9     type_specifier -> FLOAT
Rule 10    direct_declarator -> ID
Rule 11    direct_declarator -> LPAREN direct_declarator RPAREN
Rule 12    direct_declarator -> direct_declarator LBRACKET RBRACKET
Rule 13    direct_declarator -> direct_declarator LBRACKET binary_expression RBRACKET
Rule 14    direct_declarator -> direct_declarator LPAREN parameter_list RPAREN
Rule 15    direct_declarator -> direct_declarator LPAREN RPAREN
Rule 16    direct_declarator -> direct_declarator LPAREN ID RPAREN
Rule 17    binary_expression -> cast_expression
Rule 18    binary_expression -> binary_expression TIMES binary_expression
Rule 19    binary_expression -> binary_expression DIVIDE binary_expression
Rule 20    binary_expression -> binary_expression MOD binary_expression
Rule 21    binary_expression -> binary_expression PLUS binary_expression
Rule 22    binary_expression -> binary_expression MINUS binary_expression
Rule 23    binary_expression -> binary_expression LT binary_expression
Rule 24    binary_expression -> binary_expression LE binary_expression
Rule 25    binary_expression -> binary_expression HT binary_expression
Rule 26    binary_expression -> binary_expression HE binary_expression
Rule 27    binary_expression -> binary_expression EQ binary_expression
Rule 28    binary_expression -> binary_expression DIFF binary_expression
Rule 29    binary_expression -> binary_expression AND binary_expression
Rule 30    binary_expression -> binary_expression OR binary_expression
Rule 31    cast_expression -> unary_expression
Rule 32    cast_expression -> LPAREN type_specifier RPAREN cast_expression
Rule 33    unary_expression -> postfix_expression
Rule 34    unary_expression -> PLUSPLUS unary_expression
Rule 35    unary_expression -> MINUSMINUS unary_expression
Rule 36    unary_expression -> unary_operator cast_expression
Rule 37    postfix_expression -> primary_expression
Rule 38    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 39    postfix_expression -> postfix_expression LPAREN expression RPAREN
Rule 40    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 41    postfix_expression -> postfix_expression PLUSPLUS
Rule 42    postfix_expression -> postfix_expression MINUSMINUS
Rule 43    primary_expression -> ID
Rule 44    primary_expression -> constant
Rule 45    primary_expression -> LPAREN expression RPAREN
Rule 46    constant -> INT_CONST
Rule 47    constant -> STRING
Rule 48    constant -> FLOAT_CONST
Rule 49    expression -> assignment_expression
Rule 50    expression -> expression COMMA assignment_expression
Rule 51    assignment_expression -> binary_expression
Rule 52    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 53    assignment_operator -> EQUALS
Rule 54    assignment_operator -> TIMESASSIGN
Rule 55    assignment_operator -> DIVIDEASSIGN
Rule 56    assignment_operator -> MODASSIGN
Rule 57    assignment_operator -> PLUSASSIGN
Rule 58    assignment_operator -> MINUSASSIGN
Rule 59    unary_operator -> ADDRESS
Rule 60    unary_operator -> TIMES
Rule 61    unary_operator -> PLUS
Rule 62    unary_operator -> MINUS
Rule 63    unary_operator -> UNARYDIFF
Rule 64    parameter_list -> parameter_declaration
Rule 65    parameter_list -> parameter_list parameter_declaration
Rule 66    parameter_declaration -> type_specifier direct_declarator
Rule 67    declaration -> type_specifier init_declarator_list SEMI
Rule 68    declaration -> type_specifier SEMI
Rule 69    init_declarator_list -> init_declarator
Rule 70    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 71    init_declarator -> direct_declarator
Rule 72    init_declarator -> direct_declarator EQ initializer
Rule 73    init_declarator -> direct_declarator EQUALS initializer
Rule 74    initializer -> assignment_expression
Rule 75    initializer -> LBRACE initializer_list RBRACE
Rule 76    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 77    initializer_list -> initializer
Rule 78    initializer_list -> initializer_list COMMA initializer
Rule 79    compound_statement -> LBRACE declaration statement RBRACE
Rule 80    compound_statement -> LBRACE statement RBRACE
Rule 81    statement -> expression_statement
Rule 82    statement -> compound_statement
Rule 83    statement -> selection_statement
Rule 84    statement -> iteration_statement
Rule 85    statement -> jump_statement
Rule 86    statement -> assert_statement
Rule 87    statement -> print_statement
Rule 88    statement -> read_statement
Rule 89    expression_statement -> LBRACE expression RBRACE SEMI
Rule 90    selection_statement -> IF LPAREN expression RPAREN statement
Rule 91    selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 92    iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 93    iteration_statement -> FOR LPAREN LBRACE expression RBRACE SEMI LBRACE expression RBRACE SEMI LBRACE expression RBRACE RPAREN statement
Rule 94    jump_statement -> BREAK SEMI
Rule 95    jump_statement -> RETURN expression SEMI
Rule 96    jump_statement -> RETURN SEMI
Rule 97    assert_statement -> ASSERT expression SEMI
Rule 98    print_statement -> PRINT LPAREN LBRACE expression RBRACE RPAREN SEMI
Rule 99    read_statement -> READ LPAREN expression RPAREN SEMI

Terminals, with rules where they appear

ADDRESS              : 59
AND                  : 29
ASSERT               : 97
BREAK                : 94
CHAR                 : 7
COMMA                : 50 70 76 78
DIFF                 : 28
DIVIDE               : 19
DIVIDEASSIGN         : 55
ELSE                 : 91
EQ                   : 27 72
EQUALS               : 53 73
FLOAT                : 9
FLOAT_CONST          : 48
FOR                  : 93
HE                   : 26
HT                   : 25
ID                   : 10 16 43
IF                   : 90 91
INT                  : 8
INT_CONST            : 46
LBRACE               : 75 76 79 80 89 93 93 93 98
LBRACKET             : 12 13 38
LE                   : 24
LPAREN               : 11 14 15 16 32 39 40 45 90 91 92 93 98 99
LT                   : 23
MINUS                : 22 62
MINUSASSIGN          : 58
MINUSMINUS           : 35 42
MOD                  : 20
MODASSIGN            : 56
OR                   : 30
PLUS                 : 21 61
PLUSASSIGN           : 57
PLUSPLUS             : 34 41
PRINT                : 98
RBRACE               : 75 76 79 80 89 93 93 93 98
RBRACKET             : 12 13 38
READ                 : 99
RETURN               : 95 96
RPAREN               : 11 14 15 16 32 39 40 45 90 91 92 93 98 99
SEMI                 : 67 68 89 93 93 94 95 96 97 98 99
STRING               : 47
TIMES                : 18 60
TIMESASSIGN          : 54
UNARYDIFF            : 63
VOID                 : 6
WHILE                : 92
error                : 

Nonterminals, with rules where they appear

assert_statement     : 86
assignment_expression : 49 50 52 74
assignment_operator  : 52
binary_expression    : 13 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 51
cast_expression      : 17 32 36
compound_statement   : 4 5 82
constant             : 44
declaration          : 3 5 79
direct_declarator    : 4 5 11 12 13 14 15 16 66 71 72 73
expression           : 38 39 45 50 89 90 91 92 93 93 93 95 97 98 99
expression_statement : 81
function_definition  : 2
global_declaration   : 1
init_declarator      : 69 70
init_declarator_list : 67 70
initializer          : 72 73 77 78
initializer_list     : 75 76 78
iteration_statement  : 84
jump_statement       : 85
parameter_declaration : 64 65
parameter_list       : 14 65
postfix_expression   : 33 38 39 40 41 42
primary_expression   : 37
print_statement      : 87
program              : 0
read_statement       : 88
selection_statement  : 83
statement            : 79 80 90 91 91 92 93
type_specifier       : 4 32 66 67 68
unary_expression     : 31 34 35 52
unary_operator       : 36

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global_declaration
    (2) global_declaration -> . function_definition
    (3) global_declaration -> . declaration
    (4) function_definition -> . type_specifier direct_declarator compound_statement
    (5) function_definition -> . direct_declarator declaration compound_statement
    (67) declaration -> . type_specifier init_declarator_list SEMI
    (68) declaration -> . type_specifier SEMI
    (6) type_specifier -> . VOID
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) direct_declarator -> . ID
    (11) direct_declarator -> . LPAREN direct_declarator RPAREN
    (12) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (13) direct_declarator -> . direct_declarator LBRACKET binary_expression RBRACKET
    (14) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (15) direct_declarator -> . direct_declarator LPAREN RPAREN
    (16) direct_declarator -> . direct_declarator LPAREN ID RPAREN

    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    ID              shift and go to state 11
    LPAREN          shift and go to state 12

    program                        shift and go to state 1
    global_declaration             shift and go to state 2
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    type_specifier                 shift and go to state 5
    direct_declarator              shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> global_declaration .

    $end            reduce using rule 1 (program -> global_declaration .)


state 3

    (2) global_declaration -> function_definition .

    $end            reduce using rule 2 (global_declaration -> function_definition .)


state 4

    (3) global_declaration -> declaration .

    $end            reduce using rule 3 (global_declaration -> declaration .)


state 5

    (4) function_definition -> type_specifier . direct_declarator compound_statement
    (67) declaration -> type_specifier . init_declarator_list SEMI
    (68) declaration -> type_specifier . SEMI
    (10) direct_declarator -> . ID
    (11) direct_declarator -> . LPAREN direct_declarator RPAREN
    (12) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (13) direct_declarator -> . direct_declarator LBRACKET binary_expression RBRACKET
    (14) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (15) direct_declarator -> . direct_declarator LPAREN RPAREN
    (16) direct_declarator -> . direct_declarator LPAREN ID RPAREN
    (69) init_declarator_list -> . init_declarator
    (70) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (71) init_declarator -> . direct_declarator
    (72) init_declarator -> . direct_declarator EQ initializer
    (73) init_declarator -> . direct_declarator EQUALS initializer

    SEMI            shift and go to state 15
    ID              shift and go to state 11
    LPAREN          shift and go to state 12

    direct_declarator              shift and go to state 13
    init_declarator_list           shift and go to state 14
    init_declarator                shift and go to state 16

state 6

    (5) function_definition -> direct_declarator . declaration compound_statement
    (12) direct_declarator -> direct_declarator . LBRACKET RBRACKET
    (13) direct_declarator -> direct_declarator . LBRACKET binary_expression RBRACKET
    (14) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (15) direct_declarator -> direct_declarator . LPAREN RPAREN
    (16) direct_declarator -> direct_declarator . LPAREN ID RPAREN
    (67) declaration -> . type_specifier init_declarator_list SEMI
    (68) declaration -> . type_specifier SEMI
    (6) type_specifier -> . VOID
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT

    LBRACKET        shift and go to state 18
    LPAREN          shift and go to state 19
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10

    declaration                    shift and go to state 17
    type_specifier                 shift and go to state 20

state 7

    (6) type_specifier -> VOID .

    SEMI            reduce using rule 6 (type_specifier -> VOID .)
    ID              reduce using rule 6 (type_specifier -> VOID .)
    LPAREN          reduce using rule 6 (type_specifier -> VOID .)
    RPAREN          reduce using rule 6 (type_specifier -> VOID .)


state 8

    (7) type_specifier -> CHAR .

    SEMI            reduce using rule 7 (type_specifier -> CHAR .)
    ID              reduce using rule 7 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 7 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 7 (type_specifier -> CHAR .)


state 9

    (8) type_specifier -> INT .

    SEMI            reduce using rule 8 (type_specifier -> INT .)
    ID              reduce using rule 8 (type_specifier -> INT .)
    LPAREN          reduce using rule 8 (type_specifier -> INT .)
    RPAREN          reduce using rule 8 (type_specifier -> INT .)


state 10

    (9) type_specifier -> FLOAT .

    SEMI            reduce using rule 9 (type_specifier -> FLOAT .)
    ID              reduce using rule 9 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 9 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 9 (type_specifier -> FLOAT .)


state 11

    (10) direct_declarator -> ID .

    LBRACKET        reduce using rule 10 (direct_declarator -> ID .)
    LPAREN          reduce using rule 10 (direct_declarator -> ID .)
    VOID            reduce using rule 10 (direct_declarator -> ID .)
    CHAR            reduce using rule 10 (direct_declarator -> ID .)
    INT             reduce using rule 10 (direct_declarator -> ID .)
    FLOAT           reduce using rule 10 (direct_declarator -> ID .)
    EQ              reduce using rule 10 (direct_declarator -> ID .)
    EQUALS          reduce using rule 10 (direct_declarator -> ID .)
    LBRACE          reduce using rule 10 (direct_declarator -> ID .)
    SEMI            reduce using rule 10 (direct_declarator -> ID .)
    COMMA           reduce using rule 10 (direct_declarator -> ID .)
    RPAREN          reduce using rule 10 (direct_declarator -> ID .)


state 12

    (11) direct_declarator -> LPAREN . direct_declarator RPAREN
    (10) direct_declarator -> . ID
    (11) direct_declarator -> . LPAREN direct_declarator RPAREN
    (12) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (13) direct_declarator -> . direct_declarator LBRACKET binary_expression RBRACKET
    (14) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (15) direct_declarator -> . direct_declarator LPAREN RPAREN
    (16) direct_declarator -> . direct_declarator LPAREN ID RPAREN

    ID              shift and go to state 11
    LPAREN          shift and go to state 12

    direct_declarator              shift and go to state 21

state 13

    (4) function_definition -> type_specifier direct_declarator . compound_statement
    (12) direct_declarator -> direct_declarator . LBRACKET RBRACKET
    (13) direct_declarator -> direct_declarator . LBRACKET binary_expression RBRACKET
    (14) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (15) direct_declarator -> direct_declarator . LPAREN RPAREN
    (16) direct_declarator -> direct_declarator . LPAREN ID RPAREN
    (71) init_declarator -> direct_declarator .
    (72) init_declarator -> direct_declarator . EQ initializer
    (73) init_declarator -> direct_declarator . EQUALS initializer
    (79) compound_statement -> . LBRACE declaration statement RBRACE
    (80) compound_statement -> . LBRACE statement RBRACE

    LBRACKET        shift and go to state 18
    LPAREN          shift and go to state 19
    SEMI            reduce using rule 71 (init_declarator -> direct_declarator .)
    COMMA           reduce using rule 71 (init_declarator -> direct_declarator .)
    EQ              shift and go to state 23
    EQUALS          shift and go to state 24
    LBRACE          shift and go to state 25

    compound_statement             shift and go to state 22

state 14

    (67) declaration -> type_specifier init_declarator_list . SEMI
    (70) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 26
    COMMA           shift and go to state 27


state 15

    (68) declaration -> type_specifier SEMI .

    $end            reduce using rule 68 (declaration -> type_specifier SEMI .)
    LBRACE          reduce using rule 68 (declaration -> type_specifier SEMI .)
    IF              reduce using rule 68 (declaration -> type_specifier SEMI .)
    WHILE           reduce using rule 68 (declaration -> type_specifier SEMI .)
    FOR             reduce using rule 68 (declaration -> type_specifier SEMI .)
    BREAK           reduce using rule 68 (declaration -> type_specifier SEMI .)
    RETURN          reduce using rule 68 (declaration -> type_specifier SEMI .)
    ASSERT          reduce using rule 68 (declaration -> type_specifier SEMI .)
    PRINT           reduce using rule 68 (declaration -> type_specifier SEMI .)
    READ            reduce using rule 68 (declaration -> type_specifier SEMI .)


state 16

    (69) init_declarator_list -> init_declarator .

    SEMI            reduce using rule 69 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 69 (init_declarator_list -> init_declarator .)


state 17

    (5) function_definition -> direct_declarator declaration . compound_statement
    (79) compound_statement -> . LBRACE declaration statement RBRACE
    (80) compound_statement -> . LBRACE statement RBRACE

    LBRACE          shift and go to state 25

    compound_statement             shift and go to state 28

state 18

    (12) direct_declarator -> direct_declarator LBRACKET . RBRACKET
    (13) direct_declarator -> direct_declarator LBRACKET . binary_expression RBRACKET
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    RBRACKET        shift and go to state 29
    LPAREN          shift and go to state 36
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    binary_expression              shift and go to state 30
    cast_expression                shift and go to state 31
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 19

    (14) direct_declarator -> direct_declarator LPAREN . parameter_list RPAREN
    (15) direct_declarator -> direct_declarator LPAREN . RPAREN
    (16) direct_declarator -> direct_declarator LPAREN . ID RPAREN
    (64) parameter_list -> . parameter_declaration
    (65) parameter_list -> . parameter_list parameter_declaration
    (66) parameter_declaration -> . type_specifier direct_declarator
    (6) type_specifier -> . VOID
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT

    RPAREN          shift and go to state 50
    ID              shift and go to state 51
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10

    parameter_list                 shift and go to state 49
    parameter_declaration          shift and go to state 52
    type_specifier                 shift and go to state 53

state 20

    (67) declaration -> type_specifier . init_declarator_list SEMI
    (68) declaration -> type_specifier . SEMI
    (69) init_declarator_list -> . init_declarator
    (70) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (71) init_declarator -> . direct_declarator
    (72) init_declarator -> . direct_declarator EQ initializer
    (73) init_declarator -> . direct_declarator EQUALS initializer
    (10) direct_declarator -> . ID
    (11) direct_declarator -> . LPAREN direct_declarator RPAREN
    (12) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (13) direct_declarator -> . direct_declarator LBRACKET binary_expression RBRACKET
    (14) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (15) direct_declarator -> . direct_declarator LPAREN RPAREN
    (16) direct_declarator -> . direct_declarator LPAREN ID RPAREN

    SEMI            shift and go to state 15
    ID              shift and go to state 11
    LPAREN          shift and go to state 12

    init_declarator_list           shift and go to state 14
    init_declarator                shift and go to state 16
    direct_declarator              shift and go to state 54

state 21

    (11) direct_declarator -> LPAREN direct_declarator . RPAREN
    (12) direct_declarator -> direct_declarator . LBRACKET RBRACKET
    (13) direct_declarator -> direct_declarator . LBRACKET binary_expression RBRACKET
    (14) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (15) direct_declarator -> direct_declarator . LPAREN RPAREN
    (16) direct_declarator -> direct_declarator . LPAREN ID RPAREN

    RPAREN          shift and go to state 55
    LBRACKET        shift and go to state 18
    LPAREN          shift and go to state 19


state 22

    (4) function_definition -> type_specifier direct_declarator compound_statement .

    $end            reduce using rule 4 (function_definition -> type_specifier direct_declarator compound_statement .)


state 23

    (72) init_declarator -> direct_declarator EQ . initializer
    (74) initializer -> . assignment_expression
    (75) initializer -> . LBRACE initializer_list RBRACE
    (76) initializer -> . LBRACE initializer_list COMMA RBRACE
    (51) assignment_expression -> . binary_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    LBRACE          shift and go to state 58
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 36
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    initializer                    shift and go to state 56
    assignment_expression          shift and go to state 57
    binary_expression              shift and go to state 59
    unary_expression               shift and go to state 60
    cast_expression                shift and go to state 31
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 24

    (73) init_declarator -> direct_declarator EQUALS . initializer
    (74) initializer -> . assignment_expression
    (75) initializer -> . LBRACE initializer_list RBRACE
    (76) initializer -> . LBRACE initializer_list COMMA RBRACE
    (51) assignment_expression -> . binary_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    LBRACE          shift and go to state 58
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 36
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    initializer                    shift and go to state 61
    assignment_expression          shift and go to state 57
    binary_expression              shift and go to state 59
    unary_expression               shift and go to state 60
    cast_expression                shift and go to state 31
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 25

    (79) compound_statement -> LBRACE . declaration statement RBRACE
    (80) compound_statement -> LBRACE . statement RBRACE
    (67) declaration -> . type_specifier init_declarator_list SEMI
    (68) declaration -> . type_specifier SEMI
    (81) statement -> . expression_statement
    (82) statement -> . compound_statement
    (83) statement -> . selection_statement
    (84) statement -> . iteration_statement
    (85) statement -> . jump_statement
    (86) statement -> . assert_statement
    (87) statement -> . print_statement
    (88) statement -> . read_statement
    (6) type_specifier -> . VOID
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (89) expression_statement -> . LBRACE expression RBRACE SEMI
    (79) compound_statement -> . LBRACE declaration statement RBRACE
    (80) compound_statement -> . LBRACE statement RBRACE
    (90) selection_statement -> . IF LPAREN expression RPAREN statement
    (91) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (92) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (93) iteration_statement -> . FOR LPAREN LBRACE expression RBRACE SEMI LBRACE expression RBRACE SEMI LBRACE expression RBRACE RPAREN statement
    (94) jump_statement -> . BREAK SEMI
    (95) jump_statement -> . RETURN expression SEMI
    (96) jump_statement -> . RETURN SEMI
    (97) assert_statement -> . ASSERT expression SEMI
    (98) print_statement -> . PRINT LPAREN LBRACE expression RBRACE RPAREN SEMI
    (99) read_statement -> . READ LPAREN expression RPAREN SEMI

    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    LBRACE          shift and go to state 62
    IF              shift and go to state 73
    WHILE           shift and go to state 74
    FOR             shift and go to state 75
    BREAK           shift and go to state 76
    RETURN          shift and go to state 77
    ASSERT          shift and go to state 78
    PRINT           shift and go to state 79
    READ            shift and go to state 80

    declaration                    shift and go to state 63
    statement                      shift and go to state 64
    type_specifier                 shift and go to state 20
    expression_statement           shift and go to state 65
    compound_statement             shift and go to state 66
    selection_statement            shift and go to state 67
    iteration_statement            shift and go to state 68
    jump_statement                 shift and go to state 69
    assert_statement               shift and go to state 70
    print_statement                shift and go to state 71
    read_statement                 shift and go to state 72

state 26

    (67) declaration -> type_specifier init_declarator_list SEMI .

    $end            reduce using rule 67 (declaration -> type_specifier init_declarator_list SEMI .)
    LBRACE          reduce using rule 67 (declaration -> type_specifier init_declarator_list SEMI .)
    IF              reduce using rule 67 (declaration -> type_specifier init_declarator_list SEMI .)
    WHILE           reduce using rule 67 (declaration -> type_specifier init_declarator_list SEMI .)
    FOR             reduce using rule 67 (declaration -> type_specifier init_declarator_list SEMI .)
    BREAK           reduce using rule 67 (declaration -> type_specifier init_declarator_list SEMI .)
    RETURN          reduce using rule 67 (declaration -> type_specifier init_declarator_list SEMI .)
    ASSERT          reduce using rule 67 (declaration -> type_specifier init_declarator_list SEMI .)
    PRINT           reduce using rule 67 (declaration -> type_specifier init_declarator_list SEMI .)
    READ            reduce using rule 67 (declaration -> type_specifier init_declarator_list SEMI .)


state 27

    (70) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (71) init_declarator -> . direct_declarator
    (72) init_declarator -> . direct_declarator EQ initializer
    (73) init_declarator -> . direct_declarator EQUALS initializer
    (10) direct_declarator -> . ID
    (11) direct_declarator -> . LPAREN direct_declarator RPAREN
    (12) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (13) direct_declarator -> . direct_declarator LBRACKET binary_expression RBRACKET
    (14) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (15) direct_declarator -> . direct_declarator LPAREN RPAREN
    (16) direct_declarator -> . direct_declarator LPAREN ID RPAREN

    ID              shift and go to state 11
    LPAREN          shift and go to state 12

    init_declarator                shift and go to state 81
    direct_declarator              shift and go to state 54

state 28

    (5) function_definition -> direct_declarator declaration compound_statement .

    $end            reduce using rule 5 (function_definition -> direct_declarator declaration compound_statement .)


state 29

    (12) direct_declarator -> direct_declarator LBRACKET RBRACKET .

    LBRACKET        reduce using rule 12 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    LPAREN          reduce using rule 12 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    VOID            reduce using rule 12 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    CHAR            reduce using rule 12 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    INT             reduce using rule 12 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    FLOAT           reduce using rule 12 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    EQ              reduce using rule 12 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    EQUALS          reduce using rule 12 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    LBRACE          reduce using rule 12 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    SEMI            reduce using rule 12 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    COMMA           reduce using rule 12 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    RPAREN          reduce using rule 12 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)


state 30

    (13) direct_declarator -> direct_declarator LBRACKET binary_expression . RBRACKET
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . HT binary_expression
    (26) binary_expression -> binary_expression . HE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . DIFF binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    LT              shift and go to state 88
    LE              shift and go to state 89
    HT              shift and go to state 90
    HE              shift and go to state 91
    EQ              shift and go to state 92
    DIFF            shift and go to state 93
    AND             shift and go to state 94
    OR              shift and go to state 95


state 31

    (17) binary_expression -> cast_expression .

    RBRACKET        reduce using rule 17 (binary_expression -> cast_expression .)
    TIMES           reduce using rule 17 (binary_expression -> cast_expression .)
    DIVIDE          reduce using rule 17 (binary_expression -> cast_expression .)
    MOD             reduce using rule 17 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 17 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 17 (binary_expression -> cast_expression .)
    LT              reduce using rule 17 (binary_expression -> cast_expression .)
    LE              reduce using rule 17 (binary_expression -> cast_expression .)
    HT              reduce using rule 17 (binary_expression -> cast_expression .)
    HE              reduce using rule 17 (binary_expression -> cast_expression .)
    EQ              reduce using rule 17 (binary_expression -> cast_expression .)
    DIFF            reduce using rule 17 (binary_expression -> cast_expression .)
    AND             reduce using rule 17 (binary_expression -> cast_expression .)
    OR              reduce using rule 17 (binary_expression -> cast_expression .)
    SEMI            reduce using rule 17 (binary_expression -> cast_expression .)
    COMMA           reduce using rule 17 (binary_expression -> cast_expression .)
    RPAREN          reduce using rule 17 (binary_expression -> cast_expression .)
    RBRACE          reduce using rule 17 (binary_expression -> cast_expression .)


state 32

    (60) unary_operator -> TIMES .

    LPAREN          reduce using rule 60 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 60 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 60 (unary_operator -> TIMES .)
    ADDRESS         reduce using rule 60 (unary_operator -> TIMES .)
    TIMES           reduce using rule 60 (unary_operator -> TIMES .)
    PLUS            reduce using rule 60 (unary_operator -> TIMES .)
    MINUS           reduce using rule 60 (unary_operator -> TIMES .)
    UNARYDIFF       reduce using rule 60 (unary_operator -> TIMES .)
    ID              reduce using rule 60 (unary_operator -> TIMES .)
    INT_CONST       reduce using rule 60 (unary_operator -> TIMES .)
    STRING          reduce using rule 60 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 60 (unary_operator -> TIMES .)


state 33

    (61) unary_operator -> PLUS .

    LPAREN          reduce using rule 61 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 61 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 61 (unary_operator -> PLUS .)
    ADDRESS         reduce using rule 61 (unary_operator -> PLUS .)
    TIMES           reduce using rule 61 (unary_operator -> PLUS .)
    PLUS            reduce using rule 61 (unary_operator -> PLUS .)
    MINUS           reduce using rule 61 (unary_operator -> PLUS .)
    UNARYDIFF       reduce using rule 61 (unary_operator -> PLUS .)
    ID              reduce using rule 61 (unary_operator -> PLUS .)
    INT_CONST       reduce using rule 61 (unary_operator -> PLUS .)
    STRING          reduce using rule 61 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 61 (unary_operator -> PLUS .)


state 34

    (62) unary_operator -> MINUS .

    LPAREN          reduce using rule 62 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 62 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 62 (unary_operator -> MINUS .)
    ADDRESS         reduce using rule 62 (unary_operator -> MINUS .)
    TIMES           reduce using rule 62 (unary_operator -> MINUS .)
    PLUS            reduce using rule 62 (unary_operator -> MINUS .)
    MINUS           reduce using rule 62 (unary_operator -> MINUS .)
    UNARYDIFF       reduce using rule 62 (unary_operator -> MINUS .)
    ID              reduce using rule 62 (unary_operator -> MINUS .)
    INT_CONST       reduce using rule 62 (unary_operator -> MINUS .)
    STRING          reduce using rule 62 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 62 (unary_operator -> MINUS .)


state 35

    (31) cast_expression -> unary_expression .

    RBRACKET        reduce using rule 31 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 31 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 31 (cast_expression -> unary_expression .)
    MOD             reduce using rule 31 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 31 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 31 (cast_expression -> unary_expression .)
    LT              reduce using rule 31 (cast_expression -> unary_expression .)
    LE              reduce using rule 31 (cast_expression -> unary_expression .)
    HT              reduce using rule 31 (cast_expression -> unary_expression .)
    HE              reduce using rule 31 (cast_expression -> unary_expression .)
    EQ              reduce using rule 31 (cast_expression -> unary_expression .)
    DIFF            reduce using rule 31 (cast_expression -> unary_expression .)
    AND             reduce using rule 31 (cast_expression -> unary_expression .)
    OR              reduce using rule 31 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 31 (cast_expression -> unary_expression .)
    TIMESASSIGN     reduce using rule 31 (cast_expression -> unary_expression .)
    DIVIDEASSIGN    reduce using rule 31 (cast_expression -> unary_expression .)
    MODASSIGN       reduce using rule 31 (cast_expression -> unary_expression .)
    PLUSASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    MINUSASSIGN     reduce using rule 31 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 31 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 31 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 31 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 31 (cast_expression -> unary_expression .)


state 36

    (32) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (45) primary_expression -> LPAREN . expression RPAREN
    (6) type_specifier -> . VOID
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (49) expression -> . assignment_expression
    (50) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . binary_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 36
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    type_specifier                 shift and go to state 96
    cast_expression                shift and go to state 31
    expression                     shift and go to state 97
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 59
    unary_expression               shift and go to state 60
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 37

    (33) unary_expression -> postfix_expression .
    (38) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (39) postfix_expression -> postfix_expression . LPAREN expression RPAREN
    (40) postfix_expression -> postfix_expression . LPAREN RPAREN
    (41) postfix_expression -> postfix_expression . PLUSPLUS
    (42) postfix_expression -> postfix_expression . MINUSMINUS

    RBRACKET        reduce using rule 33 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 33 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 33 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 33 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 33 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 33 (unary_expression -> postfix_expression .)
    LT              reduce using rule 33 (unary_expression -> postfix_expression .)
    LE              reduce using rule 33 (unary_expression -> postfix_expression .)
    HT              reduce using rule 33 (unary_expression -> postfix_expression .)
    HE              reduce using rule 33 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 33 (unary_expression -> postfix_expression .)
    DIFF            reduce using rule 33 (unary_expression -> postfix_expression .)
    AND             reduce using rule 33 (unary_expression -> postfix_expression .)
    OR              reduce using rule 33 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 33 (unary_expression -> postfix_expression .)
    TIMESASSIGN     reduce using rule 33 (unary_expression -> postfix_expression .)
    DIVIDEASSIGN    reduce using rule 33 (unary_expression -> postfix_expression .)
    MODASSIGN       reduce using rule 33 (unary_expression -> postfix_expression .)
    PLUSASSIGN      reduce using rule 33 (unary_expression -> postfix_expression .)
    MINUSASSIGN     reduce using rule 33 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 33 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 33 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 33 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 33 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 99
    LPAREN          shift and go to state 100
    PLUSPLUS        shift and go to state 101
    MINUSMINUS      shift and go to state 102


state 38

    (34) unary_expression -> PLUSPLUS . unary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    LPAREN          shift and go to state 104
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 39

    (35) unary_expression -> MINUSMINUS . unary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    LPAREN          shift and go to state 104
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    unary_expression               shift and go to state 105
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 40

    (36) unary_expression -> unary_operator . cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    LPAREN          shift and go to state 36
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    unary_operator                 shift and go to state 40
    cast_expression                shift and go to state 106
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 37
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 41

    (37) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 37 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 37 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 37 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 37 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 37 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 37 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 37 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 37 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 37 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 37 (postfix_expression -> primary_expression .)
    LT              reduce using rule 37 (postfix_expression -> primary_expression .)
    LE              reduce using rule 37 (postfix_expression -> primary_expression .)
    HT              reduce using rule 37 (postfix_expression -> primary_expression .)
    HE              reduce using rule 37 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 37 (postfix_expression -> primary_expression .)
    DIFF            reduce using rule 37 (postfix_expression -> primary_expression .)
    AND             reduce using rule 37 (postfix_expression -> primary_expression .)
    OR              reduce using rule 37 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 37 (postfix_expression -> primary_expression .)
    TIMESASSIGN     reduce using rule 37 (postfix_expression -> primary_expression .)
    DIVIDEASSIGN    reduce using rule 37 (postfix_expression -> primary_expression .)
    MODASSIGN       reduce using rule 37 (postfix_expression -> primary_expression .)
    PLUSASSIGN      reduce using rule 37 (postfix_expression -> primary_expression .)
    MINUSASSIGN     reduce using rule 37 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 37 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 37 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 37 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 37 (postfix_expression -> primary_expression .)


state 42

    (59) unary_operator -> ADDRESS .

    LPAREN          reduce using rule 59 (unary_operator -> ADDRESS .)
    PLUSPLUS        reduce using rule 59 (unary_operator -> ADDRESS .)
    MINUSMINUS      reduce using rule 59 (unary_operator -> ADDRESS .)
    ADDRESS         reduce using rule 59 (unary_operator -> ADDRESS .)
    TIMES           reduce using rule 59 (unary_operator -> ADDRESS .)
    PLUS            reduce using rule 59 (unary_operator -> ADDRESS .)
    MINUS           reduce using rule 59 (unary_operator -> ADDRESS .)
    UNARYDIFF       reduce using rule 59 (unary_operator -> ADDRESS .)
    ID              reduce using rule 59 (unary_operator -> ADDRESS .)
    INT_CONST       reduce using rule 59 (unary_operator -> ADDRESS .)
    STRING          reduce using rule 59 (unary_operator -> ADDRESS .)
    FLOAT_CONST     reduce using rule 59 (unary_operator -> ADDRESS .)


state 43

    (63) unary_operator -> UNARYDIFF .

    LPAREN          reduce using rule 63 (unary_operator -> UNARYDIFF .)
    PLUSPLUS        reduce using rule 63 (unary_operator -> UNARYDIFF .)
    MINUSMINUS      reduce using rule 63 (unary_operator -> UNARYDIFF .)
    ADDRESS         reduce using rule 63 (unary_operator -> UNARYDIFF .)
    TIMES           reduce using rule 63 (unary_operator -> UNARYDIFF .)
    PLUS            reduce using rule 63 (unary_operator -> UNARYDIFF .)
    MINUS           reduce using rule 63 (unary_operator -> UNARYDIFF .)
    UNARYDIFF       reduce using rule 63 (unary_operator -> UNARYDIFF .)
    ID              reduce using rule 63 (unary_operator -> UNARYDIFF .)
    INT_CONST       reduce using rule 63 (unary_operator -> UNARYDIFF .)
    STRING          reduce using rule 63 (unary_operator -> UNARYDIFF .)
    FLOAT_CONST     reduce using rule 63 (unary_operator -> UNARYDIFF .)


state 44

    (43) primary_expression -> ID .

    LBRACKET        reduce using rule 43 (primary_expression -> ID .)
    LPAREN          reduce using rule 43 (primary_expression -> ID .)
    PLUSPLUS        reduce using rule 43 (primary_expression -> ID .)
    MINUSMINUS      reduce using rule 43 (primary_expression -> ID .)
    RBRACKET        reduce using rule 43 (primary_expression -> ID .)
    TIMES           reduce using rule 43 (primary_expression -> ID .)
    DIVIDE          reduce using rule 43 (primary_expression -> ID .)
    MOD             reduce using rule 43 (primary_expression -> ID .)
    PLUS            reduce using rule 43 (primary_expression -> ID .)
    MINUS           reduce using rule 43 (primary_expression -> ID .)
    LT              reduce using rule 43 (primary_expression -> ID .)
    LE              reduce using rule 43 (primary_expression -> ID .)
    HT              reduce using rule 43 (primary_expression -> ID .)
    HE              reduce using rule 43 (primary_expression -> ID .)
    EQ              reduce using rule 43 (primary_expression -> ID .)
    DIFF            reduce using rule 43 (primary_expression -> ID .)
    AND             reduce using rule 43 (primary_expression -> ID .)
    OR              reduce using rule 43 (primary_expression -> ID .)
    EQUALS          reduce using rule 43 (primary_expression -> ID .)
    TIMESASSIGN     reduce using rule 43 (primary_expression -> ID .)
    DIVIDEASSIGN    reduce using rule 43 (primary_expression -> ID .)
    MODASSIGN       reduce using rule 43 (primary_expression -> ID .)
    PLUSASSIGN      reduce using rule 43 (primary_expression -> ID .)
    MINUSASSIGN     reduce using rule 43 (primary_expression -> ID .)
    SEMI            reduce using rule 43 (primary_expression -> ID .)
    COMMA           reduce using rule 43 (primary_expression -> ID .)
    RPAREN          reduce using rule 43 (primary_expression -> ID .)
    RBRACE          reduce using rule 43 (primary_expression -> ID .)


state 45

    (44) primary_expression -> constant .

    LBRACKET        reduce using rule 44 (primary_expression -> constant .)
    LPAREN          reduce using rule 44 (primary_expression -> constant .)
    PLUSPLUS        reduce using rule 44 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 44 (primary_expression -> constant .)
    RBRACKET        reduce using rule 44 (primary_expression -> constant .)
    TIMES           reduce using rule 44 (primary_expression -> constant .)
    DIVIDE          reduce using rule 44 (primary_expression -> constant .)
    MOD             reduce using rule 44 (primary_expression -> constant .)
    PLUS            reduce using rule 44 (primary_expression -> constant .)
    MINUS           reduce using rule 44 (primary_expression -> constant .)
    LT              reduce using rule 44 (primary_expression -> constant .)
    LE              reduce using rule 44 (primary_expression -> constant .)
    HT              reduce using rule 44 (primary_expression -> constant .)
    HE              reduce using rule 44 (primary_expression -> constant .)
    EQ              reduce using rule 44 (primary_expression -> constant .)
    DIFF            reduce using rule 44 (primary_expression -> constant .)
    AND             reduce using rule 44 (primary_expression -> constant .)
    OR              reduce using rule 44 (primary_expression -> constant .)
    EQUALS          reduce using rule 44 (primary_expression -> constant .)
    TIMESASSIGN     reduce using rule 44 (primary_expression -> constant .)
    DIVIDEASSIGN    reduce using rule 44 (primary_expression -> constant .)
    MODASSIGN       reduce using rule 44 (primary_expression -> constant .)
    PLUSASSIGN      reduce using rule 44 (primary_expression -> constant .)
    MINUSASSIGN     reduce using rule 44 (primary_expression -> constant .)
    SEMI            reduce using rule 44 (primary_expression -> constant .)
    COMMA           reduce using rule 44 (primary_expression -> constant .)
    RPAREN          reduce using rule 44 (primary_expression -> constant .)
    RBRACE          reduce using rule 44 (primary_expression -> constant .)


state 46

    (46) constant -> INT_CONST .

    LBRACKET        reduce using rule 46 (constant -> INT_CONST .)
    LPAREN          reduce using rule 46 (constant -> INT_CONST .)
    PLUSPLUS        reduce using rule 46 (constant -> INT_CONST .)
    MINUSMINUS      reduce using rule 46 (constant -> INT_CONST .)
    RBRACKET        reduce using rule 46 (constant -> INT_CONST .)
    TIMES           reduce using rule 46 (constant -> INT_CONST .)
    DIVIDE          reduce using rule 46 (constant -> INT_CONST .)
    MOD             reduce using rule 46 (constant -> INT_CONST .)
    PLUS            reduce using rule 46 (constant -> INT_CONST .)
    MINUS           reduce using rule 46 (constant -> INT_CONST .)
    LT              reduce using rule 46 (constant -> INT_CONST .)
    LE              reduce using rule 46 (constant -> INT_CONST .)
    HT              reduce using rule 46 (constant -> INT_CONST .)
    HE              reduce using rule 46 (constant -> INT_CONST .)
    EQ              reduce using rule 46 (constant -> INT_CONST .)
    DIFF            reduce using rule 46 (constant -> INT_CONST .)
    AND             reduce using rule 46 (constant -> INT_CONST .)
    OR              reduce using rule 46 (constant -> INT_CONST .)
    EQUALS          reduce using rule 46 (constant -> INT_CONST .)
    TIMESASSIGN     reduce using rule 46 (constant -> INT_CONST .)
    DIVIDEASSIGN    reduce using rule 46 (constant -> INT_CONST .)
    MODASSIGN       reduce using rule 46 (constant -> INT_CONST .)
    PLUSASSIGN      reduce using rule 46 (constant -> INT_CONST .)
    MINUSASSIGN     reduce using rule 46 (constant -> INT_CONST .)
    SEMI            reduce using rule 46 (constant -> INT_CONST .)
    COMMA           reduce using rule 46 (constant -> INT_CONST .)
    RPAREN          reduce using rule 46 (constant -> INT_CONST .)
    RBRACE          reduce using rule 46 (constant -> INT_CONST .)


state 47

    (47) constant -> STRING .

    LBRACKET        reduce using rule 47 (constant -> STRING .)
    LPAREN          reduce using rule 47 (constant -> STRING .)
    PLUSPLUS        reduce using rule 47 (constant -> STRING .)
    MINUSMINUS      reduce using rule 47 (constant -> STRING .)
    RBRACKET        reduce using rule 47 (constant -> STRING .)
    TIMES           reduce using rule 47 (constant -> STRING .)
    DIVIDE          reduce using rule 47 (constant -> STRING .)
    MOD             reduce using rule 47 (constant -> STRING .)
    PLUS            reduce using rule 47 (constant -> STRING .)
    MINUS           reduce using rule 47 (constant -> STRING .)
    LT              reduce using rule 47 (constant -> STRING .)
    LE              reduce using rule 47 (constant -> STRING .)
    HT              reduce using rule 47 (constant -> STRING .)
    HE              reduce using rule 47 (constant -> STRING .)
    EQ              reduce using rule 47 (constant -> STRING .)
    DIFF            reduce using rule 47 (constant -> STRING .)
    AND             reduce using rule 47 (constant -> STRING .)
    OR              reduce using rule 47 (constant -> STRING .)
    EQUALS          reduce using rule 47 (constant -> STRING .)
    TIMESASSIGN     reduce using rule 47 (constant -> STRING .)
    DIVIDEASSIGN    reduce using rule 47 (constant -> STRING .)
    MODASSIGN       reduce using rule 47 (constant -> STRING .)
    PLUSASSIGN      reduce using rule 47 (constant -> STRING .)
    MINUSASSIGN     reduce using rule 47 (constant -> STRING .)
    SEMI            reduce using rule 47 (constant -> STRING .)
    COMMA           reduce using rule 47 (constant -> STRING .)
    RPAREN          reduce using rule 47 (constant -> STRING .)
    RBRACE          reduce using rule 47 (constant -> STRING .)


state 48

    (48) constant -> FLOAT_CONST .

    LBRACKET        reduce using rule 48 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 48 (constant -> FLOAT_CONST .)
    PLUSPLUS        reduce using rule 48 (constant -> FLOAT_CONST .)
    MINUSMINUS      reduce using rule 48 (constant -> FLOAT_CONST .)
    RBRACKET        reduce using rule 48 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 48 (constant -> FLOAT_CONST .)
    DIVIDE          reduce using rule 48 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 48 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 48 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 48 (constant -> FLOAT_CONST .)
    LT              reduce using rule 48 (constant -> FLOAT_CONST .)
    LE              reduce using rule 48 (constant -> FLOAT_CONST .)
    HT              reduce using rule 48 (constant -> FLOAT_CONST .)
    HE              reduce using rule 48 (constant -> FLOAT_CONST .)
    EQ              reduce using rule 48 (constant -> FLOAT_CONST .)
    DIFF            reduce using rule 48 (constant -> FLOAT_CONST .)
    AND             reduce using rule 48 (constant -> FLOAT_CONST .)
    OR              reduce using rule 48 (constant -> FLOAT_CONST .)
    EQUALS          reduce using rule 48 (constant -> FLOAT_CONST .)
    TIMESASSIGN     reduce using rule 48 (constant -> FLOAT_CONST .)
    DIVIDEASSIGN    reduce using rule 48 (constant -> FLOAT_CONST .)
    MODASSIGN       reduce using rule 48 (constant -> FLOAT_CONST .)
    PLUSASSIGN      reduce using rule 48 (constant -> FLOAT_CONST .)
    MINUSASSIGN     reduce using rule 48 (constant -> FLOAT_CONST .)
    SEMI            reduce using rule 48 (constant -> FLOAT_CONST .)
    COMMA           reduce using rule 48 (constant -> FLOAT_CONST .)
    RPAREN          reduce using rule 48 (constant -> FLOAT_CONST .)
    RBRACE          reduce using rule 48 (constant -> FLOAT_CONST .)


state 49

    (14) direct_declarator -> direct_declarator LPAREN parameter_list . RPAREN
    (65) parameter_list -> parameter_list . parameter_declaration
    (66) parameter_declaration -> . type_specifier direct_declarator
    (6) type_specifier -> . VOID
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT

    RPAREN          shift and go to state 107
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10

    parameter_declaration          shift and go to state 108
    type_specifier                 shift and go to state 53

state 50

    (15) direct_declarator -> direct_declarator LPAREN RPAREN .

    LBRACKET        reduce using rule 15 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 15 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOID            reduce using rule 15 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CHAR            reduce using rule 15 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    INT             reduce using rule 15 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    FLOAT           reduce using rule 15 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EQ              reduce using rule 15 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EQUALS          reduce using rule 15 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LBRACE          reduce using rule 15 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SEMI            reduce using rule 15 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 15 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 15 (direct_declarator -> direct_declarator LPAREN RPAREN .)


state 51

    (16) direct_declarator -> direct_declarator LPAREN ID . RPAREN

    RPAREN          shift and go to state 109


state 52

    (64) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 64 (parameter_list -> parameter_declaration .)
    VOID            reduce using rule 64 (parameter_list -> parameter_declaration .)
    CHAR            reduce using rule 64 (parameter_list -> parameter_declaration .)
    INT             reduce using rule 64 (parameter_list -> parameter_declaration .)
    FLOAT           reduce using rule 64 (parameter_list -> parameter_declaration .)


state 53

    (66) parameter_declaration -> type_specifier . direct_declarator
    (10) direct_declarator -> . ID
    (11) direct_declarator -> . LPAREN direct_declarator RPAREN
    (12) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (13) direct_declarator -> . direct_declarator LBRACKET binary_expression RBRACKET
    (14) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (15) direct_declarator -> . direct_declarator LPAREN RPAREN
    (16) direct_declarator -> . direct_declarator LPAREN ID RPAREN

    ID              shift and go to state 11
    LPAREN          shift and go to state 12

    direct_declarator              shift and go to state 110

state 54

    (71) init_declarator -> direct_declarator .
    (72) init_declarator -> direct_declarator . EQ initializer
    (73) init_declarator -> direct_declarator . EQUALS initializer
    (12) direct_declarator -> direct_declarator . LBRACKET RBRACKET
    (13) direct_declarator -> direct_declarator . LBRACKET binary_expression RBRACKET
    (14) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (15) direct_declarator -> direct_declarator . LPAREN RPAREN
    (16) direct_declarator -> direct_declarator . LPAREN ID RPAREN

    SEMI            reduce using rule 71 (init_declarator -> direct_declarator .)
    COMMA           reduce using rule 71 (init_declarator -> direct_declarator .)
    EQ              shift and go to state 23
    EQUALS          shift and go to state 24
    LBRACKET        shift and go to state 18
    LPAREN          shift and go to state 19


state 55

    (11) direct_declarator -> LPAREN direct_declarator RPAREN .

    LBRACKET        reduce using rule 11 (direct_declarator -> LPAREN direct_declarator RPAREN .)
    LPAREN          reduce using rule 11 (direct_declarator -> LPAREN direct_declarator RPAREN .)
    VOID            reduce using rule 11 (direct_declarator -> LPAREN direct_declarator RPAREN .)
    CHAR            reduce using rule 11 (direct_declarator -> LPAREN direct_declarator RPAREN .)
    INT             reduce using rule 11 (direct_declarator -> LPAREN direct_declarator RPAREN .)
    FLOAT           reduce using rule 11 (direct_declarator -> LPAREN direct_declarator RPAREN .)
    EQ              reduce using rule 11 (direct_declarator -> LPAREN direct_declarator RPAREN .)
    EQUALS          reduce using rule 11 (direct_declarator -> LPAREN direct_declarator RPAREN .)
    LBRACE          reduce using rule 11 (direct_declarator -> LPAREN direct_declarator RPAREN .)
    SEMI            reduce using rule 11 (direct_declarator -> LPAREN direct_declarator RPAREN .)
    COMMA           reduce using rule 11 (direct_declarator -> LPAREN direct_declarator RPAREN .)
    RPAREN          reduce using rule 11 (direct_declarator -> LPAREN direct_declarator RPAREN .)


state 56

    (72) init_declarator -> direct_declarator EQ initializer .

    SEMI            reduce using rule 72 (init_declarator -> direct_declarator EQ initializer .)
    COMMA           reduce using rule 72 (init_declarator -> direct_declarator EQ initializer .)


state 57

    (74) initializer -> assignment_expression .

    SEMI            reduce using rule 74 (initializer -> assignment_expression .)
    COMMA           reduce using rule 74 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 74 (initializer -> assignment_expression .)


state 58

    (75) initializer -> LBRACE . initializer_list RBRACE
    (76) initializer -> LBRACE . initializer_list COMMA RBRACE
    (77) initializer_list -> . initializer
    (78) initializer_list -> . initializer_list COMMA initializer
    (74) initializer -> . assignment_expression
    (75) initializer -> . LBRACE initializer_list RBRACE
    (76) initializer -> . LBRACE initializer_list COMMA RBRACE
    (51) assignment_expression -> . binary_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    LBRACE          shift and go to state 58
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 36
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    initializer_list               shift and go to state 111
    initializer                    shift and go to state 112
    assignment_expression          shift and go to state 57
    binary_expression              shift and go to state 59
    unary_expression               shift and go to state 60
    cast_expression                shift and go to state 31
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 59

    (51) assignment_expression -> binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . HT binary_expression
    (26) binary_expression -> binary_expression . HE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . DIFF binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    SEMI            reduce using rule 51 (assignment_expression -> binary_expression .)
    COMMA           reduce using rule 51 (assignment_expression -> binary_expression .)
    RPAREN          reduce using rule 51 (assignment_expression -> binary_expression .)
    RBRACE          reduce using rule 51 (assignment_expression -> binary_expression .)
    RBRACKET        reduce using rule 51 (assignment_expression -> binary_expression .)
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    LT              shift and go to state 88
    LE              shift and go to state 89
    HT              shift and go to state 90
    HE              shift and go to state 91
    EQ              shift and go to state 92
    DIFF            shift and go to state 93
    AND             shift and go to state 94
    OR              shift and go to state 95


state 60

    (52) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (31) cast_expression -> unary_expression .
    (53) assignment_operator -> . EQUALS
    (54) assignment_operator -> . TIMESASSIGN
    (55) assignment_operator -> . DIVIDEASSIGN
    (56) assignment_operator -> . MODASSIGN
    (57) assignment_operator -> . PLUSASSIGN
    (58) assignment_operator -> . MINUSASSIGN

    TIMES           reduce using rule 31 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 31 (cast_expression -> unary_expression .)
    MOD             reduce using rule 31 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 31 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 31 (cast_expression -> unary_expression .)
    LT              reduce using rule 31 (cast_expression -> unary_expression .)
    LE              reduce using rule 31 (cast_expression -> unary_expression .)
    HT              reduce using rule 31 (cast_expression -> unary_expression .)
    HE              reduce using rule 31 (cast_expression -> unary_expression .)
    EQ              reduce using rule 31 (cast_expression -> unary_expression .)
    DIFF            reduce using rule 31 (cast_expression -> unary_expression .)
    AND             reduce using rule 31 (cast_expression -> unary_expression .)
    OR              reduce using rule 31 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 31 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 31 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 31 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 31 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 31 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 114
    TIMESASSIGN     shift and go to state 115
    DIVIDEASSIGN    shift and go to state 116
    MODASSIGN       shift and go to state 117
    PLUSASSIGN      shift and go to state 118
    MINUSASSIGN     shift and go to state 119

    assignment_operator            shift and go to state 113

state 61

    (73) init_declarator -> direct_declarator EQUALS initializer .

    SEMI            reduce using rule 73 (init_declarator -> direct_declarator EQUALS initializer .)
    COMMA           reduce using rule 73 (init_declarator -> direct_declarator EQUALS initializer .)


state 62

    (89) expression_statement -> LBRACE . expression RBRACE SEMI
    (79) compound_statement -> LBRACE . declaration statement RBRACE
    (80) compound_statement -> LBRACE . statement RBRACE
    (49) expression -> . assignment_expression
    (50) expression -> . expression COMMA assignment_expression
    (67) declaration -> . type_specifier init_declarator_list SEMI
    (68) declaration -> . type_specifier SEMI
    (81) statement -> . expression_statement
    (82) statement -> . compound_statement
    (83) statement -> . selection_statement
    (84) statement -> . iteration_statement
    (85) statement -> . jump_statement
    (86) statement -> . assert_statement
    (87) statement -> . print_statement
    (88) statement -> . read_statement
    (51) assignment_expression -> . binary_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (6) type_specifier -> . VOID
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (89) expression_statement -> . LBRACE expression RBRACE SEMI
    (79) compound_statement -> . LBRACE declaration statement RBRACE
    (80) compound_statement -> . LBRACE statement RBRACE
    (90) selection_statement -> . IF LPAREN expression RPAREN statement
    (91) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (92) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (93) iteration_statement -> . FOR LPAREN LBRACE expression RBRACE SEMI LBRACE expression RBRACE SEMI LBRACE expression RBRACE RPAREN statement
    (94) jump_statement -> . BREAK SEMI
    (95) jump_statement -> . RETURN expression SEMI
    (96) jump_statement -> . RETURN SEMI
    (97) assert_statement -> . ASSERT expression SEMI
    (98) print_statement -> . PRINT LPAREN LBRACE expression RBRACE RPAREN SEMI
    (99) read_statement -> . READ LPAREN expression RPAREN SEMI
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    LBRACE          shift and go to state 62
    IF              shift and go to state 73
    WHILE           shift and go to state 74
    FOR             shift and go to state 75
    BREAK           shift and go to state 76
    RETURN          shift and go to state 77
    ASSERT          shift and go to state 78
    PRINT           shift and go to state 79
    READ            shift and go to state 80
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 36
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    expression                     shift and go to state 120
    declaration                    shift and go to state 63
    statement                      shift and go to state 64
    assignment_expression          shift and go to state 98
    type_specifier                 shift and go to state 20
    expression_statement           shift and go to state 65
    compound_statement             shift and go to state 66
    selection_statement            shift and go to state 67
    iteration_statement            shift and go to state 68
    jump_statement                 shift and go to state 69
    assert_statement               shift and go to state 70
    print_statement                shift and go to state 71
    read_statement                 shift and go to state 72
    binary_expression              shift and go to state 59
    unary_expression               shift and go to state 60
    cast_expression                shift and go to state 31
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 63

    (79) compound_statement -> LBRACE declaration . statement RBRACE
    (81) statement -> . expression_statement
    (82) statement -> . compound_statement
    (83) statement -> . selection_statement
    (84) statement -> . iteration_statement
    (85) statement -> . jump_statement
    (86) statement -> . assert_statement
    (87) statement -> . print_statement
    (88) statement -> . read_statement
    (89) expression_statement -> . LBRACE expression RBRACE SEMI
    (79) compound_statement -> . LBRACE declaration statement RBRACE
    (80) compound_statement -> . LBRACE statement RBRACE
    (90) selection_statement -> . IF LPAREN expression RPAREN statement
    (91) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (92) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (93) iteration_statement -> . FOR LPAREN LBRACE expression RBRACE SEMI LBRACE expression RBRACE SEMI LBRACE expression RBRACE RPAREN statement
    (94) jump_statement -> . BREAK SEMI
    (95) jump_statement -> . RETURN expression SEMI
    (96) jump_statement -> . RETURN SEMI
    (97) assert_statement -> . ASSERT expression SEMI
    (98) print_statement -> . PRINT LPAREN LBRACE expression RBRACE RPAREN SEMI
    (99) read_statement -> . READ LPAREN expression RPAREN SEMI

    LBRACE          shift and go to state 62
    IF              shift and go to state 73
    WHILE           shift and go to state 74
    FOR             shift and go to state 75
    BREAK           shift and go to state 76
    RETURN          shift and go to state 77
    ASSERT          shift and go to state 78
    PRINT           shift and go to state 79
    READ            shift and go to state 80

    statement                      shift and go to state 121
    expression_statement           shift and go to state 65
    compound_statement             shift and go to state 66
    selection_statement            shift and go to state 67
    iteration_statement            shift and go to state 68
    jump_statement                 shift and go to state 69
    assert_statement               shift and go to state 70
    print_statement                shift and go to state 71
    read_statement                 shift and go to state 72

state 64

    (80) compound_statement -> LBRACE statement . RBRACE

    RBRACE          shift and go to state 122


state 65

    (81) statement -> expression_statement .

    RBRACE          reduce using rule 81 (statement -> expression_statement .)
    ELSE            reduce using rule 81 (statement -> expression_statement .)


state 66

    (82) statement -> compound_statement .

    RBRACE          reduce using rule 82 (statement -> compound_statement .)
    ELSE            reduce using rule 82 (statement -> compound_statement .)


state 67

    (83) statement -> selection_statement .

    RBRACE          reduce using rule 83 (statement -> selection_statement .)
    ELSE            reduce using rule 83 (statement -> selection_statement .)


state 68

    (84) statement -> iteration_statement .

    RBRACE          reduce using rule 84 (statement -> iteration_statement .)
    ELSE            reduce using rule 84 (statement -> iteration_statement .)


state 69

    (85) statement -> jump_statement .

    RBRACE          reduce using rule 85 (statement -> jump_statement .)
    ELSE            reduce using rule 85 (statement -> jump_statement .)


state 70

    (86) statement -> assert_statement .

    RBRACE          reduce using rule 86 (statement -> assert_statement .)
    ELSE            reduce using rule 86 (statement -> assert_statement .)


state 71

    (87) statement -> print_statement .

    RBRACE          reduce using rule 87 (statement -> print_statement .)
    ELSE            reduce using rule 87 (statement -> print_statement .)


state 72

    (88) statement -> read_statement .

    RBRACE          reduce using rule 88 (statement -> read_statement .)
    ELSE            reduce using rule 88 (statement -> read_statement .)


state 73

    (90) selection_statement -> IF . LPAREN expression RPAREN statement
    (91) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 123


state 74

    (92) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 124


state 75

    (93) iteration_statement -> FOR . LPAREN LBRACE expression RBRACE SEMI LBRACE expression RBRACE SEMI LBRACE expression RBRACE RPAREN statement

    LPAREN          shift and go to state 125


state 76

    (94) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 126


state 77

    (95) jump_statement -> RETURN . expression SEMI
    (96) jump_statement -> RETURN . SEMI
    (49) expression -> . assignment_expression
    (50) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . binary_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    SEMI            shift and go to state 128
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 36
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    expression                     shift and go to state 127
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 59
    unary_expression               shift and go to state 60
    cast_expression                shift and go to state 31
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 78

    (97) assert_statement -> ASSERT . expression SEMI
    (49) expression -> . assignment_expression
    (50) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . binary_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 36
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    expression                     shift and go to state 129
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 59
    unary_expression               shift and go to state 60
    cast_expression                shift and go to state 31
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 79

    (98) print_statement -> PRINT . LPAREN LBRACE expression RBRACE RPAREN SEMI

    LPAREN          shift and go to state 130


state 80

    (99) read_statement -> READ . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 131


state 81

    (70) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI            reduce using rule 70 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 70 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 82

    (13) direct_declarator -> direct_declarator LBRACKET binary_expression RBRACKET .

    LBRACKET        reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET binary_expression RBRACKET .)
    LPAREN          reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET binary_expression RBRACKET .)
    VOID            reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET binary_expression RBRACKET .)
    CHAR            reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET binary_expression RBRACKET .)
    INT             reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET binary_expression RBRACKET .)
    FLOAT           reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET binary_expression RBRACKET .)
    EQ              reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET binary_expression RBRACKET .)
    EQUALS          reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET binary_expression RBRACKET .)
    LBRACE          reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET binary_expression RBRACKET .)
    SEMI            reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET binary_expression RBRACKET .)
    COMMA           reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET binary_expression RBRACKET .)
    RPAREN          reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET binary_expression RBRACKET .)


state 83

    (18) binary_expression -> binary_expression TIMES . binary_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    LPAREN          shift and go to state 36
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    binary_expression              shift and go to state 132
    cast_expression                shift and go to state 31
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 84

    (19) binary_expression -> binary_expression DIVIDE . binary_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    LPAREN          shift and go to state 36
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    binary_expression              shift and go to state 133
    cast_expression                shift and go to state 31
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 85

    (20) binary_expression -> binary_expression MOD . binary_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    LPAREN          shift and go to state 36
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    binary_expression              shift and go to state 134
    cast_expression                shift and go to state 31
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 86

    (21) binary_expression -> binary_expression PLUS . binary_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    LPAREN          shift and go to state 36
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    binary_expression              shift and go to state 135
    cast_expression                shift and go to state 31
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 87

    (22) binary_expression -> binary_expression MINUS . binary_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    LPAREN          shift and go to state 36
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    binary_expression              shift and go to state 136
    cast_expression                shift and go to state 31
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 88

    (23) binary_expression -> binary_expression LT . binary_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    LPAREN          shift and go to state 36
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    binary_expression              shift and go to state 137
    cast_expression                shift and go to state 31
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 89

    (24) binary_expression -> binary_expression LE . binary_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    LPAREN          shift and go to state 36
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    binary_expression              shift and go to state 138
    cast_expression                shift and go to state 31
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 90

    (25) binary_expression -> binary_expression HT . binary_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    LPAREN          shift and go to state 36
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    binary_expression              shift and go to state 139
    cast_expression                shift and go to state 31
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 91

    (26) binary_expression -> binary_expression HE . binary_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    LPAREN          shift and go to state 36
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    binary_expression              shift and go to state 140
    cast_expression                shift and go to state 31
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 92

    (27) binary_expression -> binary_expression EQ . binary_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    LPAREN          shift and go to state 36
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    binary_expression              shift and go to state 141
    cast_expression                shift and go to state 31
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 93

    (28) binary_expression -> binary_expression DIFF . binary_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    LPAREN          shift and go to state 36
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    binary_expression              shift and go to state 142
    cast_expression                shift and go to state 31
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 94

    (29) binary_expression -> binary_expression AND . binary_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    LPAREN          shift and go to state 36
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    binary_expression              shift and go to state 143
    cast_expression                shift and go to state 31
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 95

    (30) binary_expression -> binary_expression OR . binary_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    LPAREN          shift and go to state 36
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    binary_expression              shift and go to state 144
    cast_expression                shift and go to state 31
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 96

    (32) cast_expression -> LPAREN type_specifier . RPAREN cast_expression

    RPAREN          shift and go to state 145


state 97

    (45) primary_expression -> LPAREN expression . RPAREN
    (50) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 146
    COMMA           shift and go to state 147


state 98

    (49) expression -> assignment_expression .

    RPAREN          reduce using rule 49 (expression -> assignment_expression .)
    COMMA           reduce using rule 49 (expression -> assignment_expression .)
    RBRACE          reduce using rule 49 (expression -> assignment_expression .)
    SEMI            reduce using rule 49 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 49 (expression -> assignment_expression .)


state 99

    (38) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (49) expression -> . assignment_expression
    (50) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . binary_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 36
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    postfix_expression             shift and go to state 37
    expression                     shift and go to state 148
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 59
    unary_expression               shift and go to state 60
    cast_expression                shift and go to state 31
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 100

    (39) postfix_expression -> postfix_expression LPAREN . expression RPAREN
    (40) postfix_expression -> postfix_expression LPAREN . RPAREN
    (49) expression -> . assignment_expression
    (50) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . binary_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    RPAREN          shift and go to state 150
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 36
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    postfix_expression             shift and go to state 37
    expression                     shift and go to state 149
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 59
    unary_expression               shift and go to state 60
    cast_expression                shift and go to state 31
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 101

    (41) postfix_expression -> postfix_expression PLUSPLUS .

    LBRACKET        reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    LE              reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    HT              reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    HE              reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIFF            reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMESASSIGN     reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDEASSIGN    reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    MODASSIGN       reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSASSIGN      reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSASSIGN     reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 41 (postfix_expression -> postfix_expression PLUSPLUS .)


state 102

    (42) postfix_expression -> postfix_expression MINUSMINUS .

    LBRACKET        reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    LE              reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    HT              reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    HE              reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIFF            reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMESASSIGN     reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDEASSIGN    reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    MODASSIGN       reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSASSIGN      reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSASSIGN     reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 42 (postfix_expression -> postfix_expression MINUSMINUS .)


state 103

    (34) unary_expression -> PLUSPLUS unary_expression .

    RBRACKET        reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    TIMES           reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    LE              reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    HT              reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    HE              reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    DIFF            reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    EQUALS          reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    TIMESASSIGN     reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDEASSIGN    reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    MODASSIGN       reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    PLUSASSIGN      reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    MINUSASSIGN     reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 34 (unary_expression -> PLUSPLUS unary_expression .)


state 104

    (45) primary_expression -> LPAREN . expression RPAREN
    (49) expression -> . assignment_expression
    (50) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . binary_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 36
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    expression                     shift and go to state 97
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 59
    unary_expression               shift and go to state 60
    cast_expression                shift and go to state 31
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 105

    (35) unary_expression -> MINUSMINUS unary_expression .

    RBRACKET        reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    TIMES           reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    LE              reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    HT              reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    HE              reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    DIFF            reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    EQUALS          reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    TIMESASSIGN     reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDEASSIGN    reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    MODASSIGN       reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    PLUSASSIGN      reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    MINUSASSIGN     reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 35 (unary_expression -> MINUSMINUS unary_expression .)


state 106

    (36) unary_expression -> unary_operator cast_expression .

    RBRACKET        reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    HT              reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    HE              reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    DIFF            reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    EQUALS          reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    TIMESASSIGN     reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    DIVIDEASSIGN    reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    MODASSIGN       reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    PLUSASSIGN      reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    MINUSASSIGN     reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 36 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 36 (unary_expression -> unary_operator cast_expression .)


state 107

    (14) direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .

    LBRACKET        reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LPAREN          reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    VOID            reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    CHAR            reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    INT             reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    FLOAT           reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    EQ              reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    EQUALS          reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LBRACE          reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)


state 108

    (65) parameter_list -> parameter_list parameter_declaration .

    RPAREN          reduce using rule 65 (parameter_list -> parameter_list parameter_declaration .)
    VOID            reduce using rule 65 (parameter_list -> parameter_list parameter_declaration .)
    CHAR            reduce using rule 65 (parameter_list -> parameter_list parameter_declaration .)
    INT             reduce using rule 65 (parameter_list -> parameter_list parameter_declaration .)
    FLOAT           reduce using rule 65 (parameter_list -> parameter_list parameter_declaration .)


state 109

    (16) direct_declarator -> direct_declarator LPAREN ID RPAREN .

    LBRACKET        reduce using rule 16 (direct_declarator -> direct_declarator LPAREN ID RPAREN .)
    LPAREN          reduce using rule 16 (direct_declarator -> direct_declarator LPAREN ID RPAREN .)
    VOID            reduce using rule 16 (direct_declarator -> direct_declarator LPAREN ID RPAREN .)
    CHAR            reduce using rule 16 (direct_declarator -> direct_declarator LPAREN ID RPAREN .)
    INT             reduce using rule 16 (direct_declarator -> direct_declarator LPAREN ID RPAREN .)
    FLOAT           reduce using rule 16 (direct_declarator -> direct_declarator LPAREN ID RPAREN .)
    EQ              reduce using rule 16 (direct_declarator -> direct_declarator LPAREN ID RPAREN .)
    EQUALS          reduce using rule 16 (direct_declarator -> direct_declarator LPAREN ID RPAREN .)
    LBRACE          reduce using rule 16 (direct_declarator -> direct_declarator LPAREN ID RPAREN .)
    SEMI            reduce using rule 16 (direct_declarator -> direct_declarator LPAREN ID RPAREN .)
    COMMA           reduce using rule 16 (direct_declarator -> direct_declarator LPAREN ID RPAREN .)
    RPAREN          reduce using rule 16 (direct_declarator -> direct_declarator LPAREN ID RPAREN .)


state 110

    (66) parameter_declaration -> type_specifier direct_declarator .
    (12) direct_declarator -> direct_declarator . LBRACKET RBRACKET
    (13) direct_declarator -> direct_declarator . LBRACKET binary_expression RBRACKET
    (14) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (15) direct_declarator -> direct_declarator . LPAREN RPAREN
    (16) direct_declarator -> direct_declarator . LPAREN ID RPAREN

    RPAREN          reduce using rule 66 (parameter_declaration -> type_specifier direct_declarator .)
    VOID            reduce using rule 66 (parameter_declaration -> type_specifier direct_declarator .)
    CHAR            reduce using rule 66 (parameter_declaration -> type_specifier direct_declarator .)
    INT             reduce using rule 66 (parameter_declaration -> type_specifier direct_declarator .)
    FLOAT           reduce using rule 66 (parameter_declaration -> type_specifier direct_declarator .)
    LBRACKET        shift and go to state 18
    LPAREN          shift and go to state 19


state 111

    (75) initializer -> LBRACE initializer_list . RBRACE
    (76) initializer -> LBRACE initializer_list . COMMA RBRACE
    (78) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 151
    COMMA           shift and go to state 152


state 112

    (77) initializer_list -> initializer .

    RBRACE          reduce using rule 77 (initializer_list -> initializer .)
    COMMA           reduce using rule 77 (initializer_list -> initializer .)


state 113

    (52) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (51) assignment_expression -> . binary_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 36
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    unary_expression               shift and go to state 60
    assignment_expression          shift and go to state 153
    binary_expression              shift and go to state 59
    cast_expression                shift and go to state 31
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 114

    (53) assignment_operator -> EQUALS .

    PLUSPLUS        reduce using rule 53 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 53 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 53 (assignment_operator -> EQUALS .)
    ADDRESS         reduce using rule 53 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 53 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 53 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 53 (assignment_operator -> EQUALS .)
    UNARYDIFF       reduce using rule 53 (assignment_operator -> EQUALS .)
    ID              reduce using rule 53 (assignment_operator -> EQUALS .)
    INT_CONST       reduce using rule 53 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 53 (assignment_operator -> EQUALS .)
    FLOAT_CONST     reduce using rule 53 (assignment_operator -> EQUALS .)


state 115

    (54) assignment_operator -> TIMESASSIGN .

    PLUSPLUS        reduce using rule 54 (assignment_operator -> TIMESASSIGN .)
    MINUSMINUS      reduce using rule 54 (assignment_operator -> TIMESASSIGN .)
    LPAREN          reduce using rule 54 (assignment_operator -> TIMESASSIGN .)
    ADDRESS         reduce using rule 54 (assignment_operator -> TIMESASSIGN .)
    TIMES           reduce using rule 54 (assignment_operator -> TIMESASSIGN .)
    PLUS            reduce using rule 54 (assignment_operator -> TIMESASSIGN .)
    MINUS           reduce using rule 54 (assignment_operator -> TIMESASSIGN .)
    UNARYDIFF       reduce using rule 54 (assignment_operator -> TIMESASSIGN .)
    ID              reduce using rule 54 (assignment_operator -> TIMESASSIGN .)
    INT_CONST       reduce using rule 54 (assignment_operator -> TIMESASSIGN .)
    STRING          reduce using rule 54 (assignment_operator -> TIMESASSIGN .)
    FLOAT_CONST     reduce using rule 54 (assignment_operator -> TIMESASSIGN .)


state 116

    (55) assignment_operator -> DIVIDEASSIGN .

    PLUSPLUS        reduce using rule 55 (assignment_operator -> DIVIDEASSIGN .)
    MINUSMINUS      reduce using rule 55 (assignment_operator -> DIVIDEASSIGN .)
    LPAREN          reduce using rule 55 (assignment_operator -> DIVIDEASSIGN .)
    ADDRESS         reduce using rule 55 (assignment_operator -> DIVIDEASSIGN .)
    TIMES           reduce using rule 55 (assignment_operator -> DIVIDEASSIGN .)
    PLUS            reduce using rule 55 (assignment_operator -> DIVIDEASSIGN .)
    MINUS           reduce using rule 55 (assignment_operator -> DIVIDEASSIGN .)
    UNARYDIFF       reduce using rule 55 (assignment_operator -> DIVIDEASSIGN .)
    ID              reduce using rule 55 (assignment_operator -> DIVIDEASSIGN .)
    INT_CONST       reduce using rule 55 (assignment_operator -> DIVIDEASSIGN .)
    STRING          reduce using rule 55 (assignment_operator -> DIVIDEASSIGN .)
    FLOAT_CONST     reduce using rule 55 (assignment_operator -> DIVIDEASSIGN .)


state 117

    (56) assignment_operator -> MODASSIGN .

    PLUSPLUS        reduce using rule 56 (assignment_operator -> MODASSIGN .)
    MINUSMINUS      reduce using rule 56 (assignment_operator -> MODASSIGN .)
    LPAREN          reduce using rule 56 (assignment_operator -> MODASSIGN .)
    ADDRESS         reduce using rule 56 (assignment_operator -> MODASSIGN .)
    TIMES           reduce using rule 56 (assignment_operator -> MODASSIGN .)
    PLUS            reduce using rule 56 (assignment_operator -> MODASSIGN .)
    MINUS           reduce using rule 56 (assignment_operator -> MODASSIGN .)
    UNARYDIFF       reduce using rule 56 (assignment_operator -> MODASSIGN .)
    ID              reduce using rule 56 (assignment_operator -> MODASSIGN .)
    INT_CONST       reduce using rule 56 (assignment_operator -> MODASSIGN .)
    STRING          reduce using rule 56 (assignment_operator -> MODASSIGN .)
    FLOAT_CONST     reduce using rule 56 (assignment_operator -> MODASSIGN .)


state 118

    (57) assignment_operator -> PLUSASSIGN .

    PLUSPLUS        reduce using rule 57 (assignment_operator -> PLUSASSIGN .)
    MINUSMINUS      reduce using rule 57 (assignment_operator -> PLUSASSIGN .)
    LPAREN          reduce using rule 57 (assignment_operator -> PLUSASSIGN .)
    ADDRESS         reduce using rule 57 (assignment_operator -> PLUSASSIGN .)
    TIMES           reduce using rule 57 (assignment_operator -> PLUSASSIGN .)
    PLUS            reduce using rule 57 (assignment_operator -> PLUSASSIGN .)
    MINUS           reduce using rule 57 (assignment_operator -> PLUSASSIGN .)
    UNARYDIFF       reduce using rule 57 (assignment_operator -> PLUSASSIGN .)
    ID              reduce using rule 57 (assignment_operator -> PLUSASSIGN .)
    INT_CONST       reduce using rule 57 (assignment_operator -> PLUSASSIGN .)
    STRING          reduce using rule 57 (assignment_operator -> PLUSASSIGN .)
    FLOAT_CONST     reduce using rule 57 (assignment_operator -> PLUSASSIGN .)


state 119

    (58) assignment_operator -> MINUSASSIGN .

    PLUSPLUS        reduce using rule 58 (assignment_operator -> MINUSASSIGN .)
    MINUSMINUS      reduce using rule 58 (assignment_operator -> MINUSASSIGN .)
    LPAREN          reduce using rule 58 (assignment_operator -> MINUSASSIGN .)
    ADDRESS         reduce using rule 58 (assignment_operator -> MINUSASSIGN .)
    TIMES           reduce using rule 58 (assignment_operator -> MINUSASSIGN .)
    PLUS            reduce using rule 58 (assignment_operator -> MINUSASSIGN .)
    MINUS           reduce using rule 58 (assignment_operator -> MINUSASSIGN .)
    UNARYDIFF       reduce using rule 58 (assignment_operator -> MINUSASSIGN .)
    ID              reduce using rule 58 (assignment_operator -> MINUSASSIGN .)
    INT_CONST       reduce using rule 58 (assignment_operator -> MINUSASSIGN .)
    STRING          reduce using rule 58 (assignment_operator -> MINUSASSIGN .)
    FLOAT_CONST     reduce using rule 58 (assignment_operator -> MINUSASSIGN .)


state 120

    (89) expression_statement -> LBRACE expression . RBRACE SEMI
    (50) expression -> expression . COMMA assignment_expression

    RBRACE          shift and go to state 154
    COMMA           shift and go to state 147


state 121

    (79) compound_statement -> LBRACE declaration statement . RBRACE

    RBRACE          shift and go to state 155


state 122

    (80) compound_statement -> LBRACE statement RBRACE .

    $end            reduce using rule 80 (compound_statement -> LBRACE statement RBRACE .)
    RBRACE          reduce using rule 80 (compound_statement -> LBRACE statement RBRACE .)
    ELSE            reduce using rule 80 (compound_statement -> LBRACE statement RBRACE .)


state 123

    (90) selection_statement -> IF LPAREN . expression RPAREN statement
    (91) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (49) expression -> . assignment_expression
    (50) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . binary_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 36
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    expression                     shift and go to state 156
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 59
    unary_expression               shift and go to state 60
    cast_expression                shift and go to state 31
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 124

    (92) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (49) expression -> . assignment_expression
    (50) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . binary_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 36
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    expression                     shift and go to state 157
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 59
    unary_expression               shift and go to state 60
    cast_expression                shift and go to state 31
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 125

    (93) iteration_statement -> FOR LPAREN . LBRACE expression RBRACE SEMI LBRACE expression RBRACE SEMI LBRACE expression RBRACE RPAREN statement

    LBRACE          shift and go to state 158


state 126

    (94) jump_statement -> BREAK SEMI .

    RBRACE          reduce using rule 94 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 94 (jump_statement -> BREAK SEMI .)


state 127

    (95) jump_statement -> RETURN expression . SEMI
    (50) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 159
    COMMA           shift and go to state 147


state 128

    (96) jump_statement -> RETURN SEMI .

    RBRACE          reduce using rule 96 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 96 (jump_statement -> RETURN SEMI .)


state 129

    (97) assert_statement -> ASSERT expression . SEMI
    (50) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 160
    COMMA           shift and go to state 147


state 130

    (98) print_statement -> PRINT LPAREN . LBRACE expression RBRACE RPAREN SEMI

    LBRACE          shift and go to state 161


state 131

    (99) read_statement -> READ LPAREN . expression RPAREN SEMI
    (49) expression -> . assignment_expression
    (50) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . binary_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 36
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    expression                     shift and go to state 162
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 59
    unary_expression               shift and go to state 60
    cast_expression                shift and go to state 31
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 132

    (18) binary_expression -> binary_expression TIMES binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . HT binary_expression
    (26) binary_expression -> binary_expression . HE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . DIFF binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    TIMES           reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    LE              reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    HT              reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    HE              reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    EQ              reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    DIFF            reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)

  ! TIMES           [ shift and go to state 83 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! MOD             [ shift and go to state 85 ]
  ! PLUS            [ shift and go to state 86 ]
  ! MINUS           [ shift and go to state 87 ]
  ! LT              [ shift and go to state 88 ]
  ! LE              [ shift and go to state 89 ]
  ! HT              [ shift and go to state 90 ]
  ! HE              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 92 ]
  ! DIFF            [ shift and go to state 93 ]
  ! AND             [ shift and go to state 94 ]
  ! OR              [ shift and go to state 95 ]


state 133

    (19) binary_expression -> binary_expression DIVIDE binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . HT binary_expression
    (26) binary_expression -> binary_expression . HE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . DIFF binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    TIMES           reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LT              reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LE              reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    HT              reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    HE              reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQ              reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIFF            reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SEMI            reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COMMA           reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACE          reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)

  ! TIMES           [ shift and go to state 83 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! MOD             [ shift and go to state 85 ]
  ! PLUS            [ shift and go to state 86 ]
  ! MINUS           [ shift and go to state 87 ]
  ! LT              [ shift and go to state 88 ]
  ! LE              [ shift and go to state 89 ]
  ! HT              [ shift and go to state 90 ]
  ! HE              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 92 ]
  ! DIFF            [ shift and go to state 93 ]
  ! AND             [ shift and go to state 94 ]
  ! OR              [ shift and go to state 95 ]


state 134

    (20) binary_expression -> binary_expression MOD binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . HT binary_expression
    (26) binary_expression -> binary_expression . HE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . DIFF binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    TIMES           reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    LE              reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    HT              reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    HE              reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    EQ              reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    DIFF            reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 83 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! MOD             [ shift and go to state 85 ]
  ! PLUS            [ shift and go to state 86 ]
  ! MINUS           [ shift and go to state 87 ]
  ! LT              [ shift and go to state 88 ]
  ! LE              [ shift and go to state 89 ]
  ! HT              [ shift and go to state 90 ]
  ! HE              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 92 ]
  ! DIFF            [ shift and go to state 93 ]
  ! AND             [ shift and go to state 94 ]
  ! OR              [ shift and go to state 95 ]


state 135

    (21) binary_expression -> binary_expression PLUS binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . HT binary_expression
    (26) binary_expression -> binary_expression . HE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . DIFF binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    PLUS            reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    LE              reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    HT              reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    HE              reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    DIFF            reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 85

  ! TIMES           [ reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 86 ]
  ! MINUS           [ shift and go to state 87 ]
  ! LT              [ shift and go to state 88 ]
  ! LE              [ shift and go to state 89 ]
  ! HT              [ shift and go to state 90 ]
  ! HE              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 92 ]
  ! DIFF            [ shift and go to state 93 ]
  ! AND             [ shift and go to state 94 ]
  ! OR              [ shift and go to state 95 ]


state 136

    (22) binary_expression -> binary_expression MINUS binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . HT binary_expression
    (26) binary_expression -> binary_expression . HE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . DIFF binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    PLUS            reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    LE              reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    HT              reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    HE              reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    DIFF            reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 85

  ! TIMES           [ reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 86 ]
  ! MINUS           [ shift and go to state 87 ]
  ! LT              [ shift and go to state 88 ]
  ! LE              [ shift and go to state 89 ]
  ! HT              [ shift and go to state 90 ]
  ! HE              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 92 ]
  ! DIFF            [ shift and go to state 93 ]
  ! AND             [ shift and go to state 94 ]
  ! OR              [ shift and go to state 95 ]


state 137

    (23) binary_expression -> binary_expression LT binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . HT binary_expression
    (26) binary_expression -> binary_expression . HE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . DIFF binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    LT              reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    LE              reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    HT              reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    HE              reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    DIFF            reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    OR              reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    SEMI            reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87

  ! TIMES           [ reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MOD             [ reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .) ]
  ! PLUS            [ reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LT              [ shift and go to state 88 ]
  ! LE              [ shift and go to state 89 ]
  ! HT              [ shift and go to state 90 ]
  ! HE              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 92 ]
  ! DIFF            [ shift and go to state 93 ]
  ! AND             [ shift and go to state 94 ]
  ! OR              [ shift and go to state 95 ]


state 138

    (24) binary_expression -> binary_expression LE binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . HT binary_expression
    (26) binary_expression -> binary_expression . HE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . DIFF binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    LT              reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    LE              reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    HT              reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    HE              reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    EQ              reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    DIFF            reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    AND             reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    OR              reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    SEMI            reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    COMMA           reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    RPAREN          reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    RBRACE          reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87

  ! TIMES           [ reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MOD             [ reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .) ]
  ! PLUS            [ reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MINUS           [ reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LT              [ shift and go to state 88 ]
  ! LE              [ shift and go to state 89 ]
  ! HT              [ shift and go to state 90 ]
  ! HE              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 92 ]
  ! DIFF            [ shift and go to state 93 ]
  ! AND             [ shift and go to state 94 ]
  ! OR              [ shift and go to state 95 ]


state 139

    (25) binary_expression -> binary_expression HT binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . HT binary_expression
    (26) binary_expression -> binary_expression . HE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . DIFF binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 25 (binary_expression -> binary_expression HT binary_expression .)
    LT              reduce using rule 25 (binary_expression -> binary_expression HT binary_expression .)
    LE              reduce using rule 25 (binary_expression -> binary_expression HT binary_expression .)
    HT              reduce using rule 25 (binary_expression -> binary_expression HT binary_expression .)
    HE              reduce using rule 25 (binary_expression -> binary_expression HT binary_expression .)
    EQ              reduce using rule 25 (binary_expression -> binary_expression HT binary_expression .)
    DIFF            reduce using rule 25 (binary_expression -> binary_expression HT binary_expression .)
    AND             reduce using rule 25 (binary_expression -> binary_expression HT binary_expression .)
    OR              reduce using rule 25 (binary_expression -> binary_expression HT binary_expression .)
    SEMI            reduce using rule 25 (binary_expression -> binary_expression HT binary_expression .)
    COMMA           reduce using rule 25 (binary_expression -> binary_expression HT binary_expression .)
    RPAREN          reduce using rule 25 (binary_expression -> binary_expression HT binary_expression .)
    RBRACE          reduce using rule 25 (binary_expression -> binary_expression HT binary_expression .)
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87

  ! TIMES           [ reduce using rule 25 (binary_expression -> binary_expression HT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 25 (binary_expression -> binary_expression HT binary_expression .) ]
  ! MOD             [ reduce using rule 25 (binary_expression -> binary_expression HT binary_expression .) ]
  ! PLUS            [ reduce using rule 25 (binary_expression -> binary_expression HT binary_expression .) ]
  ! MINUS           [ reduce using rule 25 (binary_expression -> binary_expression HT binary_expression .) ]
  ! LT              [ shift and go to state 88 ]
  ! LE              [ shift and go to state 89 ]
  ! HT              [ shift and go to state 90 ]
  ! HE              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 92 ]
  ! DIFF            [ shift and go to state 93 ]
  ! AND             [ shift and go to state 94 ]
  ! OR              [ shift and go to state 95 ]


state 140

    (26) binary_expression -> binary_expression HE binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . HT binary_expression
    (26) binary_expression -> binary_expression . HE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . DIFF binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 26 (binary_expression -> binary_expression HE binary_expression .)
    LT              reduce using rule 26 (binary_expression -> binary_expression HE binary_expression .)
    LE              reduce using rule 26 (binary_expression -> binary_expression HE binary_expression .)
    HT              reduce using rule 26 (binary_expression -> binary_expression HE binary_expression .)
    HE              reduce using rule 26 (binary_expression -> binary_expression HE binary_expression .)
    EQ              reduce using rule 26 (binary_expression -> binary_expression HE binary_expression .)
    DIFF            reduce using rule 26 (binary_expression -> binary_expression HE binary_expression .)
    AND             reduce using rule 26 (binary_expression -> binary_expression HE binary_expression .)
    OR              reduce using rule 26 (binary_expression -> binary_expression HE binary_expression .)
    SEMI            reduce using rule 26 (binary_expression -> binary_expression HE binary_expression .)
    COMMA           reduce using rule 26 (binary_expression -> binary_expression HE binary_expression .)
    RPAREN          reduce using rule 26 (binary_expression -> binary_expression HE binary_expression .)
    RBRACE          reduce using rule 26 (binary_expression -> binary_expression HE binary_expression .)
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87

  ! TIMES           [ reduce using rule 26 (binary_expression -> binary_expression HE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 26 (binary_expression -> binary_expression HE binary_expression .) ]
  ! MOD             [ reduce using rule 26 (binary_expression -> binary_expression HE binary_expression .) ]
  ! PLUS            [ reduce using rule 26 (binary_expression -> binary_expression HE binary_expression .) ]
  ! MINUS           [ reduce using rule 26 (binary_expression -> binary_expression HE binary_expression .) ]
  ! LT              [ shift and go to state 88 ]
  ! LE              [ shift and go to state 89 ]
  ! HT              [ shift and go to state 90 ]
  ! HE              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 92 ]
  ! DIFF            [ shift and go to state 93 ]
  ! AND             [ shift and go to state 94 ]
  ! OR              [ shift and go to state 95 ]


state 141

    (27) binary_expression -> binary_expression EQ binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . HT binary_expression
    (26) binary_expression -> binary_expression . HE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . DIFF binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .)
    EQ              reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .)
    DIFF            reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .)
    AND             reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .)
    OR              reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .)
    SEMI            reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .)
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    LT              shift and go to state 88
    LE              shift and go to state 89
    HT              shift and go to state 90
    HE              shift and go to state 91

  ! TIMES           [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MOD             [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! PLUS            [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MINUS           [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LT              [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LE              [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! HT              [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! HE              [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! EQ              [ shift and go to state 92 ]
  ! DIFF            [ shift and go to state 93 ]
  ! AND             [ shift and go to state 94 ]
  ! OR              [ shift and go to state 95 ]


state 142

    (28) binary_expression -> binary_expression DIFF binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . HT binary_expression
    (26) binary_expression -> binary_expression . HE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . DIFF binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 28 (binary_expression -> binary_expression DIFF binary_expression .)
    EQ              reduce using rule 28 (binary_expression -> binary_expression DIFF binary_expression .)
    DIFF            reduce using rule 28 (binary_expression -> binary_expression DIFF binary_expression .)
    AND             reduce using rule 28 (binary_expression -> binary_expression DIFF binary_expression .)
    OR              reduce using rule 28 (binary_expression -> binary_expression DIFF binary_expression .)
    SEMI            reduce using rule 28 (binary_expression -> binary_expression DIFF binary_expression .)
    COMMA           reduce using rule 28 (binary_expression -> binary_expression DIFF binary_expression .)
    RPAREN          reduce using rule 28 (binary_expression -> binary_expression DIFF binary_expression .)
    RBRACE          reduce using rule 28 (binary_expression -> binary_expression DIFF binary_expression .)
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    LT              shift and go to state 88
    LE              shift and go to state 89
    HT              shift and go to state 90
    HE              shift and go to state 91

  ! TIMES           [ reduce using rule 28 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! DIVIDE          [ reduce using rule 28 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! MOD             [ reduce using rule 28 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! PLUS            [ reduce using rule 28 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! MINUS           [ reduce using rule 28 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! LT              [ reduce using rule 28 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! LE              [ reduce using rule 28 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! HT              [ reduce using rule 28 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! HE              [ reduce using rule 28 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! EQ              [ shift and go to state 92 ]
  ! DIFF            [ shift and go to state 93 ]
  ! AND             [ shift and go to state 94 ]
  ! OR              [ shift and go to state 95 ]


state 143

    (29) binary_expression -> binary_expression AND binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . HT binary_expression
    (26) binary_expression -> binary_expression . HE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . DIFF binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .)
    AND             reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    LT              shift and go to state 88
    LE              shift and go to state 89
    HT              shift and go to state 90
    HE              shift and go to state 91
    EQ              shift and go to state 92
    DIFF            shift and go to state 93

  ! TIMES           [ reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LT              [ reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LE              [ reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .) ]
  ! HT              [ reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .) ]
  ! HE              [ reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQ              [ reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIFF            [ reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .) ]
  ! AND             [ shift and go to state 94 ]
  ! OR              [ shift and go to state 95 ]


state 144

    (30) binary_expression -> binary_expression OR binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . HT binary_expression
    (26) binary_expression -> binary_expression . HE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . DIFF binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .)
    OR              reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    LT              shift and go to state 88
    LE              shift and go to state 89
    HT              shift and go to state 90
    HE              shift and go to state 91
    EQ              shift and go to state 92
    DIFF            shift and go to state 93
    AND             shift and go to state 94

  ! TIMES           [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LT              [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LE              [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! HT              [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! HE              [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQ              [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIFF            [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! OR              [ shift and go to state 95 ]


state 145

    (32) cast_expression -> LPAREN type_specifier RPAREN . cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    LPAREN          shift and go to state 36
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    cast_expression                shift and go to state 163
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 146

    (45) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    HT              reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    HE              reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    DIFF            reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    TIMESASSIGN     reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDEASSIGN    reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    MODASSIGN       reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    PLUSASSIGN      reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    MINUSASSIGN     reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)


state 147

    (50) expression -> expression COMMA . assignment_expression
    (51) assignment_expression -> . binary_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 36
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    assignment_expression          shift and go to state 164
    binary_expression              shift and go to state 59
    unary_expression               shift and go to state 60
    cast_expression                shift and go to state 31
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 148

    (38) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (50) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 165
    COMMA           shift and go to state 147


state 149

    (39) postfix_expression -> postfix_expression LPAREN expression . RPAREN
    (50) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 166
    COMMA           shift and go to state 147


state 150

    (40) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE              reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    HT              reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    HE              reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIFF            reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMESASSIGN     reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDEASSIGN    reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODASSIGN       reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSASSIGN      reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSASSIGN     reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 40 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 151

    (75) initializer -> LBRACE initializer_list RBRACE .

    SEMI            reduce using rule 75 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 75 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 75 (initializer -> LBRACE initializer_list RBRACE .)


state 152

    (76) initializer -> LBRACE initializer_list COMMA . RBRACE
    (78) initializer_list -> initializer_list COMMA . initializer
    (74) initializer -> . assignment_expression
    (75) initializer -> . LBRACE initializer_list RBRACE
    (76) initializer -> . LBRACE initializer_list COMMA RBRACE
    (51) assignment_expression -> . binary_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    RBRACE          shift and go to state 167
    LBRACE          shift and go to state 58
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 36
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    initializer                    shift and go to state 168
    assignment_expression          shift and go to state 57
    binary_expression              shift and go to state 59
    unary_expression               shift and go to state 60
    cast_expression                shift and go to state 31
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 153

    (52) assignment_expression -> unary_expression assignment_operator assignment_expression .

    SEMI            reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 154

    (89) expression_statement -> LBRACE expression RBRACE . SEMI

    SEMI            shift and go to state 169


state 155

    (79) compound_statement -> LBRACE declaration statement RBRACE .

    $end            reduce using rule 79 (compound_statement -> LBRACE declaration statement RBRACE .)
    RBRACE          reduce using rule 79 (compound_statement -> LBRACE declaration statement RBRACE .)
    ELSE            reduce using rule 79 (compound_statement -> LBRACE declaration statement RBRACE .)


state 156

    (90) selection_statement -> IF LPAREN expression . RPAREN statement
    (91) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (50) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 170
    COMMA           shift and go to state 147


state 157

    (92) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (50) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 171
    COMMA           shift and go to state 147


state 158

    (93) iteration_statement -> FOR LPAREN LBRACE . expression RBRACE SEMI LBRACE expression RBRACE SEMI LBRACE expression RBRACE RPAREN statement
    (49) expression -> . assignment_expression
    (50) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . binary_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 36
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    expression                     shift and go to state 172
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 59
    unary_expression               shift and go to state 60
    cast_expression                shift and go to state 31
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 159

    (95) jump_statement -> RETURN expression SEMI .

    RBRACE          reduce using rule 95 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 95 (jump_statement -> RETURN expression SEMI .)


state 160

    (97) assert_statement -> ASSERT expression SEMI .

    RBRACE          reduce using rule 97 (assert_statement -> ASSERT expression SEMI .)
    ELSE            reduce using rule 97 (assert_statement -> ASSERT expression SEMI .)


state 161

    (98) print_statement -> PRINT LPAREN LBRACE . expression RBRACE RPAREN SEMI
    (49) expression -> . assignment_expression
    (50) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . binary_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 36
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    expression                     shift and go to state 173
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 59
    unary_expression               shift and go to state 60
    cast_expression                shift and go to state 31
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 162

    (99) read_statement -> READ LPAREN expression . RPAREN SEMI
    (50) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 174
    COMMA           shift and go to state 147


state 163

    (32) cast_expression -> LPAREN type_specifier RPAREN cast_expression .

    RBRACKET        reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    TIMES           reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDE          reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MOD             reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUS            reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS           reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LT              reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LE              reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    HT              reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    HE              reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQ              reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIFF            reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    AND             reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    OR              reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SEMI            reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    COMMA           reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RPAREN          reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQUALS          reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    TIMESASSIGN     reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDEASSIGN    reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MODASSIGN       reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUSASSIGN      reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUSASSIGN     reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACE          reduce using rule 32 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)


state 164

    (50) expression -> expression COMMA assignment_expression .

    RPAREN          reduce using rule 50 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 50 (expression -> expression COMMA assignment_expression .)
    RBRACE          reduce using rule 50 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 50 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 50 (expression -> expression COMMA assignment_expression .)


state 165

    (38) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    HT              reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    HE              reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIFF            reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMESASSIGN     reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDEASSIGN    reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODASSIGN       reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSASSIGN      reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSASSIGN     reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 166

    (39) postfix_expression -> postfix_expression LPAREN expression RPAREN .

    LBRACKET        reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    LPAREN          reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    TIMES           reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    MOD             reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    PLUS            reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    MINUS           reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    LT              reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    LE              reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    HT              reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    HE              reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    EQ              reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    DIFF            reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    AND             reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    OR              reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    EQUALS          reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    TIMESASSIGN     reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    DIVIDEASSIGN    reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    MODASSIGN       reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    PLUSASSIGN      reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    MINUSASSIGN     reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    SEMI            reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    COMMA           reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    RPAREN          reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)
    RBRACE          reduce using rule 39 (postfix_expression -> postfix_expression LPAREN expression RPAREN .)


state 167

    (76) initializer -> LBRACE initializer_list COMMA RBRACE .

    SEMI            reduce using rule 76 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 76 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 76 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 168

    (78) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 78 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 78 (initializer_list -> initializer_list COMMA initializer .)


state 169

    (89) expression_statement -> LBRACE expression RBRACE SEMI .

    RBRACE          reduce using rule 89 (expression_statement -> LBRACE expression RBRACE SEMI .)
    ELSE            reduce using rule 89 (expression_statement -> LBRACE expression RBRACE SEMI .)


state 170

    (90) selection_statement -> IF LPAREN expression RPAREN . statement
    (91) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (81) statement -> . expression_statement
    (82) statement -> . compound_statement
    (83) statement -> . selection_statement
    (84) statement -> . iteration_statement
    (85) statement -> . jump_statement
    (86) statement -> . assert_statement
    (87) statement -> . print_statement
    (88) statement -> . read_statement
    (89) expression_statement -> . LBRACE expression RBRACE SEMI
    (79) compound_statement -> . LBRACE declaration statement RBRACE
    (80) compound_statement -> . LBRACE statement RBRACE
    (90) selection_statement -> . IF LPAREN expression RPAREN statement
    (91) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (92) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (93) iteration_statement -> . FOR LPAREN LBRACE expression RBRACE SEMI LBRACE expression RBRACE SEMI LBRACE expression RBRACE RPAREN statement
    (94) jump_statement -> . BREAK SEMI
    (95) jump_statement -> . RETURN expression SEMI
    (96) jump_statement -> . RETURN SEMI
    (97) assert_statement -> . ASSERT expression SEMI
    (98) print_statement -> . PRINT LPAREN LBRACE expression RBRACE RPAREN SEMI
    (99) read_statement -> . READ LPAREN expression RPAREN SEMI

    LBRACE          shift and go to state 62
    IF              shift and go to state 73
    WHILE           shift and go to state 74
    FOR             shift and go to state 75
    BREAK           shift and go to state 76
    RETURN          shift and go to state 77
    ASSERT          shift and go to state 78
    PRINT           shift and go to state 79
    READ            shift and go to state 80

    statement                      shift and go to state 175
    expression_statement           shift and go to state 65
    compound_statement             shift and go to state 66
    selection_statement            shift and go to state 67
    iteration_statement            shift and go to state 68
    jump_statement                 shift and go to state 69
    assert_statement               shift and go to state 70
    print_statement                shift and go to state 71
    read_statement                 shift and go to state 72

state 171

    (92) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (81) statement -> . expression_statement
    (82) statement -> . compound_statement
    (83) statement -> . selection_statement
    (84) statement -> . iteration_statement
    (85) statement -> . jump_statement
    (86) statement -> . assert_statement
    (87) statement -> . print_statement
    (88) statement -> . read_statement
    (89) expression_statement -> . LBRACE expression RBRACE SEMI
    (79) compound_statement -> . LBRACE declaration statement RBRACE
    (80) compound_statement -> . LBRACE statement RBRACE
    (90) selection_statement -> . IF LPAREN expression RPAREN statement
    (91) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (92) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (93) iteration_statement -> . FOR LPAREN LBRACE expression RBRACE SEMI LBRACE expression RBRACE SEMI LBRACE expression RBRACE RPAREN statement
    (94) jump_statement -> . BREAK SEMI
    (95) jump_statement -> . RETURN expression SEMI
    (96) jump_statement -> . RETURN SEMI
    (97) assert_statement -> . ASSERT expression SEMI
    (98) print_statement -> . PRINT LPAREN LBRACE expression RBRACE RPAREN SEMI
    (99) read_statement -> . READ LPAREN expression RPAREN SEMI

    LBRACE          shift and go to state 62
    IF              shift and go to state 73
    WHILE           shift and go to state 74
    FOR             shift and go to state 75
    BREAK           shift and go to state 76
    RETURN          shift and go to state 77
    ASSERT          shift and go to state 78
    PRINT           shift and go to state 79
    READ            shift and go to state 80

    statement                      shift and go to state 176
    expression_statement           shift and go to state 65
    compound_statement             shift and go to state 66
    selection_statement            shift and go to state 67
    iteration_statement            shift and go to state 68
    jump_statement                 shift and go to state 69
    assert_statement               shift and go to state 70
    print_statement                shift and go to state 71
    read_statement                 shift and go to state 72

state 172

    (93) iteration_statement -> FOR LPAREN LBRACE expression . RBRACE SEMI LBRACE expression RBRACE SEMI LBRACE expression RBRACE RPAREN statement
    (50) expression -> expression . COMMA assignment_expression

    RBRACE          shift and go to state 177
    COMMA           shift and go to state 147


state 173

    (98) print_statement -> PRINT LPAREN LBRACE expression . RBRACE RPAREN SEMI
    (50) expression -> expression . COMMA assignment_expression

    RBRACE          shift and go to state 178
    COMMA           shift and go to state 147


state 174

    (99) read_statement -> READ LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 179


state 175

    (90) selection_statement -> IF LPAREN expression RPAREN statement .
    (91) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 90 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 180

  ! ELSE            [ reduce using rule 90 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 176

    (92) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 92 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 92 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 177

    (93) iteration_statement -> FOR LPAREN LBRACE expression RBRACE . SEMI LBRACE expression RBRACE SEMI LBRACE expression RBRACE RPAREN statement

    SEMI            shift and go to state 181


state 178

    (98) print_statement -> PRINT LPAREN LBRACE expression RBRACE . RPAREN SEMI

    RPAREN          shift and go to state 182


state 179

    (99) read_statement -> READ LPAREN expression RPAREN SEMI .

    RBRACE          reduce using rule 99 (read_statement -> READ LPAREN expression RPAREN SEMI .)
    ELSE            reduce using rule 99 (read_statement -> READ LPAREN expression RPAREN SEMI .)


state 180

    (91) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (81) statement -> . expression_statement
    (82) statement -> . compound_statement
    (83) statement -> . selection_statement
    (84) statement -> . iteration_statement
    (85) statement -> . jump_statement
    (86) statement -> . assert_statement
    (87) statement -> . print_statement
    (88) statement -> . read_statement
    (89) expression_statement -> . LBRACE expression RBRACE SEMI
    (79) compound_statement -> . LBRACE declaration statement RBRACE
    (80) compound_statement -> . LBRACE statement RBRACE
    (90) selection_statement -> . IF LPAREN expression RPAREN statement
    (91) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (92) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (93) iteration_statement -> . FOR LPAREN LBRACE expression RBRACE SEMI LBRACE expression RBRACE SEMI LBRACE expression RBRACE RPAREN statement
    (94) jump_statement -> . BREAK SEMI
    (95) jump_statement -> . RETURN expression SEMI
    (96) jump_statement -> . RETURN SEMI
    (97) assert_statement -> . ASSERT expression SEMI
    (98) print_statement -> . PRINT LPAREN LBRACE expression RBRACE RPAREN SEMI
    (99) read_statement -> . READ LPAREN expression RPAREN SEMI

    LBRACE          shift and go to state 62
    IF              shift and go to state 73
    WHILE           shift and go to state 74
    FOR             shift and go to state 75
    BREAK           shift and go to state 76
    RETURN          shift and go to state 77
    ASSERT          shift and go to state 78
    PRINT           shift and go to state 79
    READ            shift and go to state 80

    statement                      shift and go to state 183
    expression_statement           shift and go to state 65
    compound_statement             shift and go to state 66
    selection_statement            shift and go to state 67
    iteration_statement            shift and go to state 68
    jump_statement                 shift and go to state 69
    assert_statement               shift and go to state 70
    print_statement                shift and go to state 71
    read_statement                 shift and go to state 72

state 181

    (93) iteration_statement -> FOR LPAREN LBRACE expression RBRACE SEMI . LBRACE expression RBRACE SEMI LBRACE expression RBRACE RPAREN statement

    LBRACE          shift and go to state 184


state 182

    (98) print_statement -> PRINT LPAREN LBRACE expression RBRACE RPAREN . SEMI

    SEMI            shift and go to state 185


state 183

    (91) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 91 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 91 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 184

    (93) iteration_statement -> FOR LPAREN LBRACE expression RBRACE SEMI LBRACE . expression RBRACE SEMI LBRACE expression RBRACE RPAREN statement
    (49) expression -> . assignment_expression
    (50) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . binary_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 36
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    expression                     shift and go to state 186
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 59
    unary_expression               shift and go to state 60
    cast_expression                shift and go to state 31
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 185

    (98) print_statement -> PRINT LPAREN LBRACE expression RBRACE RPAREN SEMI .

    RBRACE          reduce using rule 98 (print_statement -> PRINT LPAREN LBRACE expression RBRACE RPAREN SEMI .)
    ELSE            reduce using rule 98 (print_statement -> PRINT LPAREN LBRACE expression RBRACE RPAREN SEMI .)


state 186

    (93) iteration_statement -> FOR LPAREN LBRACE expression RBRACE SEMI LBRACE expression . RBRACE SEMI LBRACE expression RBRACE RPAREN statement
    (50) expression -> expression . COMMA assignment_expression

    RBRACE          shift and go to state 187
    COMMA           shift and go to state 147


state 187

    (93) iteration_statement -> FOR LPAREN LBRACE expression RBRACE SEMI LBRACE expression RBRACE . SEMI LBRACE expression RBRACE RPAREN statement

    SEMI            shift and go to state 188


state 188

    (93) iteration_statement -> FOR LPAREN LBRACE expression RBRACE SEMI LBRACE expression RBRACE SEMI . LBRACE expression RBRACE RPAREN statement

    LBRACE          shift and go to state 189


state 189

    (93) iteration_statement -> FOR LPAREN LBRACE expression RBRACE SEMI LBRACE expression RBRACE SEMI LBRACE . expression RBRACE RPAREN statement
    (49) expression -> . assignment_expression
    (50) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . binary_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) binary_expression -> . cast_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression HT binary_expression
    (26) binary_expression -> . binary_expression HE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression DIFF binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (33) unary_expression -> . postfix_expression
    (34) unary_expression -> . PLUSPLUS unary_expression
    (35) unary_expression -> . MINUSMINUS unary_expression
    (36) unary_expression -> . unary_operator cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (37) postfix_expression -> . primary_expression
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . postfix_expression LPAREN expression RPAREN
    (40) postfix_expression -> . postfix_expression LPAREN RPAREN
    (41) postfix_expression -> . postfix_expression PLUSPLUS
    (42) postfix_expression -> . postfix_expression MINUSMINUS
    (59) unary_operator -> . ADDRESS
    (60) unary_operator -> . TIMES
    (61) unary_operator -> . PLUS
    (62) unary_operator -> . MINUS
    (63) unary_operator -> . UNARYDIFF
    (43) primary_expression -> . ID
    (44) primary_expression -> . constant
    (45) primary_expression -> . LPAREN expression RPAREN
    (46) constant -> . INT_CONST
    (47) constant -> . STRING
    (48) constant -> . FLOAT_CONST

    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 36
    ADDRESS         shift and go to state 42
    TIMES           shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    UNARYDIFF       shift and go to state 43
    ID              shift and go to state 44
    INT_CONST       shift and go to state 46
    STRING          shift and go to state 47
    FLOAT_CONST     shift and go to state 48

    expression                     shift and go to state 190
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 59
    unary_expression               shift and go to state 60
    cast_expression                shift and go to state 31
    postfix_expression             shift and go to state 37
    unary_operator                 shift and go to state 40
    primary_expression             shift and go to state 41
    constant                       shift and go to state 45

state 190

    (93) iteration_statement -> FOR LPAREN LBRACE expression RBRACE SEMI LBRACE expression RBRACE SEMI LBRACE expression . RBRACE RPAREN statement
    (50) expression -> expression . COMMA assignment_expression

    RBRACE          shift and go to state 191
    COMMA           shift and go to state 147


state 191

    (93) iteration_statement -> FOR LPAREN LBRACE expression RBRACE SEMI LBRACE expression RBRACE SEMI LBRACE expression RBRACE . RPAREN statement

    RPAREN          shift and go to state 192


state 192

    (93) iteration_statement -> FOR LPAREN LBRACE expression RBRACE SEMI LBRACE expression RBRACE SEMI LBRACE expression RBRACE RPAREN . statement
    (81) statement -> . expression_statement
    (82) statement -> . compound_statement
    (83) statement -> . selection_statement
    (84) statement -> . iteration_statement
    (85) statement -> . jump_statement
    (86) statement -> . assert_statement
    (87) statement -> . print_statement
    (88) statement -> . read_statement
    (89) expression_statement -> . LBRACE expression RBRACE SEMI
    (79) compound_statement -> . LBRACE declaration statement RBRACE
    (80) compound_statement -> . LBRACE statement RBRACE
    (90) selection_statement -> . IF LPAREN expression RPAREN statement
    (91) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (92) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (93) iteration_statement -> . FOR LPAREN LBRACE expression RBRACE SEMI LBRACE expression RBRACE SEMI LBRACE expression RBRACE RPAREN statement
    (94) jump_statement -> . BREAK SEMI
    (95) jump_statement -> . RETURN expression SEMI
    (96) jump_statement -> . RETURN SEMI
    (97) assert_statement -> . ASSERT expression SEMI
    (98) print_statement -> . PRINT LPAREN LBRACE expression RBRACE RPAREN SEMI
    (99) read_statement -> . READ LPAREN expression RPAREN SEMI

    LBRACE          shift and go to state 62
    IF              shift and go to state 73
    WHILE           shift and go to state 74
    FOR             shift and go to state 75
    BREAK           shift and go to state 76
    RETURN          shift and go to state 77
    ASSERT          shift and go to state 78
    PRINT           shift and go to state 79
    READ            shift and go to state 80

    statement                      shift and go to state 193
    expression_statement           shift and go to state 65
    compound_statement             shift and go to state 66
    selection_statement            shift and go to state 67
    iteration_statement            shift and go to state 68
    jump_statement                 shift and go to state 69
    assert_statement               shift and go to state 70
    print_statement                shift and go to state 71
    read_statement                 shift and go to state 72

state 193

    (93) iteration_statement -> FOR LPAREN LBRACE expression RBRACE SEMI LBRACE expression RBRACE SEMI LBRACE expression RBRACE RPAREN statement .

    RBRACE          reduce using rule 93 (iteration_statement -> FOR LPAREN LBRACE expression RBRACE SEMI LBRACE expression RBRACE SEMI LBRACE expression RBRACE RPAREN statement .)
    ELSE            reduce using rule 93 (iteration_statement -> FOR LPAREN LBRACE expression RBRACE SEMI LBRACE expression RBRACE SEMI LBRACE expression RBRACE RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 175 resolved as shift
