Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> global_declaration_list_opt
Rule 2     global_declaration_list_opt -> global_declaration global_declaration_list_opt
Rule 3     global_declaration_list_opt -> global_declaration
Rule 4     global_declaration -> function_definition
Rule 5     global_declaration -> declaration
Rule 6     function_definition -> type_specifier declarator compound_statement
Rule 7     function_definition -> declarator declaration_list_opt compound_statement
Rule 8     declaration_list_opt -> declaration declaration_list_opt
Rule 9     declaration_list_opt -> empty
Rule 10    declarator -> direct_declarator
Rule 11    direct_declarator -> ID
Rule 12    direct_declarator -> LPAREN declarator RPAREN
Rule 13    direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET
Rule 14    direct_declarator -> direct_declarator LPAREN parameter_list RPAREN
Rule 15    direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN
Rule 16    constant_expression_opt -> constant_expression
Rule 17    constant_expression_opt -> empty
Rule 18    identifier_list_opt -> ID identifier_list_opt
Rule 19    identifier_list_opt -> empty
Rule 20    constant_expression -> binary_expression
Rule 21    binary_expression -> cast_expression
Rule 22    binary_expression -> binary_expression TIMES binary_expression
Rule 23    binary_expression -> binary_expression DIVIDE binary_expression
Rule 24    binary_expression -> binary_expression MOD binary_expression
Rule 25    binary_expression -> binary_expression PLUS binary_expression
Rule 26    binary_expression -> binary_expression MINUS binary_expression
Rule 27    binary_expression -> binary_expression LT binary_expression
Rule 28    binary_expression -> binary_expression EQUALS binary_expression
Rule 29    binary_expression -> binary_expression EQ binary_expression
Rule 30    binary_expression -> binary_expression LE binary_expression
Rule 31    binary_expression -> binary_expression HT binary_expression
Rule 32    binary_expression -> binary_expression HE binary_expression
Rule 33    binary_expression -> binary_expression DIFF binary_expression
Rule 34    binary_expression -> binary_expression AND binary_expression
Rule 35    binary_expression -> binary_expression OR binary_expression
Rule 36    cast_expression -> unary_expression
Rule 37    cast_expression -> LPAREN type_specifier RPAREN cast_expression
Rule 38    unary_expression -> postfix_expression
Rule 39    unary_expression -> PLUSPLUS unary_expression
Rule 40    unary_expression -> MINUSMINUS unary_expression
Rule 41    unary_expression -> unary_operator cast_expression
Rule 42    postfix_expression -> primary_expression
Rule 43    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 44    postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN
Rule 45    postfix_expression -> postfix_expression PLUSPLUS
Rule 46    postfix_expression -> postfix_expression MINUSMINUS
Rule 47    argument_expression_opt -> argument_expression
Rule 48    argument_expression_opt -> empty
Rule 49    primary_expression -> ID
Rule 50    primary_expression -> constant
Rule 51    primary_expression -> STRING
Rule 52    primary_expression -> LPAREN expression RPAREN
Rule 53    constant -> INT_CONST
Rule 54    constant -> FLOAT_CONST
Rule 55    constant -> CHAR_CONST
Rule 56    expression -> assignment_expression
Rule 57    expression -> expression COMMA assignment_expression
Rule 58    argument_expression -> assignment_expression
Rule 59    argument_expression -> argument_expression COMMA assignment_expression
Rule 60    assignment_expression -> binary_expression
Rule 61    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 62    assignment_operator -> TIMESASSIGN
Rule 63    assignment_operator -> DIVIDEASSIGN
Rule 64    assignment_operator -> MODASSIGN
Rule 65    assignment_operator -> PLUSASSIGN
Rule 66    assignment_operator -> MINUSASSIGN
Rule 67    unary_operator -> ADDRESS
Rule 68    unary_operator -> TIMES
Rule 69    unary_operator -> PLUS
Rule 70    unary_operator -> MINUS
Rule 71    unary_operator -> UNARYDIFF
Rule 72    type_specifier -> VOID
Rule 73    type_specifier -> CHAR
Rule 74    type_specifier -> INT
Rule 75    type_specifier -> FLOAT
Rule 76    parameter_list -> parameter_declaration
Rule 77    parameter_list -> parameter_list COMMA parameter_declaration
Rule 78    parameter_declaration -> type_specifier declarator
Rule 79    declaration -> declaration_body SEMI
Rule 80    declaration_body -> type_specifier init_declarator_list_opt
Rule 81    init_declarator_list_opt -> init_declarator_list
Rule 82    init_declarator_list_opt -> empty
Rule 83    init_declarator_list -> init_declarator
Rule 84    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 85    init_declarator -> declarator
Rule 86    init_declarator -> declarator EQUALS initializer
Rule 87    initializer -> assignment_expression
Rule 88    initializer -> LBRACE initializer_list RBRACE
Rule 89    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 90    initializer_list -> initializer
Rule 91    initializer_list -> initializer_list COMMA initializer
Rule 92    compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE
Rule 93    statement_list_opt -> statement statement_list_opt
Rule 94    statement_list_opt -> empty
Rule 95    statement -> expression_statement
Rule 96    statement -> compound_statement
Rule 97    statement -> selection_statement
Rule 98    statement -> iteration_statement
Rule 99    statement -> jump_statement
Rule 100   statement -> assert_statement
Rule 101   statement -> print_statement
Rule 102   statement -> read_statement
Rule 103   expression_statement -> expression_opt SEMI
Rule 104   expression_opt -> expression
Rule 105   expression_opt -> empty
Rule 106   selection_statement -> IF LPAREN expression RPAREN statement
Rule 107   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 108   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 109   iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 110   iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 111   jump_statement -> BREAK SEMI
Rule 112   jump_statement -> RETURN SEMI
Rule 113   jump_statement -> RETURN expression SEMI
Rule 114   assert_statement -> ASSERT expression SEMI
Rule 115   print_statement -> PRINT LPAREN expression_opt RPAREN SEMI
Rule 116   read_statement -> READ LPAREN argument_expression RPAREN SEMI
Rule 117   empty -> <empty>

Terminals, with rules where they appear

ADDRESS              : 67
AND                  : 34
ASSERT               : 114
BREAK                : 111
CHAR                 : 73
CHAR_CONST           : 55
COMMA                : 57 59 77 84 89 91
DIFF                 : 33
DIVIDE               : 23
DIVIDEASSIGN         : 63
ELSE                 : 107
EQ                   : 29
EQUALS               : 28 86
FLOAT                : 75
FLOAT_CONST          : 54
FOR                  : 109 110
HE                   : 32
HT                   : 31
ID                   : 11 18 49
IF                   : 106 107
INT                  : 74
INT_CONST            : 53
LBRACE               : 88 89 92
LBRACKET             : 13 43
LE                   : 30
LPAREN               : 12 14 15 37 44 52 106 107 108 109 110 115 116
LT                   : 27
MINUS                : 26 70
MINUSASSIGN          : 66
MINUSMINUS           : 40 46
MOD                  : 24
MODASSIGN            : 64
OR                   : 35
PLUS                 : 25 69
PLUSASSIGN           : 65
PLUSPLUS             : 39 45
PRINT                : 115
RBRACE               : 88 89 92
RBRACKET             : 13 43
READ                 : 116
RETURN               : 112 113
RPAREN               : 12 14 15 37 44 52 106 107 108 109 110 115 116
SEMI                 : 79 103 109 109 110 110 111 112 113 114 115 116
STRING               : 51
TIMES                : 22 68
TIMESASSIGN          : 62
UNARYDIFF            : 71
VOID                 : 72
WHILE                : 108
error                : 

Nonterminals, with rules where they appear

argument_expression  : 47 59 116
argument_expression_opt : 44
assert_statement     : 100
assignment_expression : 56 57 58 59 61 87
assignment_operator  : 61
binary_expression    : 20 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 60
cast_expression      : 21 37 41
compound_statement   : 6 7 96
constant             : 50
constant_expression  : 16
constant_expression_opt : 13
declaration          : 5 8
declaration_body     : 79
declaration_list_opt : 7 8 92
declarator           : 6 7 12 78 85 86
direct_declarator    : 10 13 14 15
empty                : 9 17 19 48 82 94 105
expression           : 43 52 57 104 106 107 108 113 114
expression_opt       : 103 109 109 110 110 115
expression_statement : 95
function_definition  : 4
global_declaration   : 2 3
global_declaration_list_opt : 1 2
identifier_list_opt  : 15 18
init_declarator      : 83 84 109 110
init_declarator_list : 81 84
init_declarator_list_opt : 80
initializer          : 86 90 91
initializer_list     : 88 89 91
iteration_statement  : 98
jump_statement       : 99
parameter_declaration : 76 77
parameter_list       : 14 77
postfix_expression   : 38 43 44 45 46
primary_expression   : 42
print_statement      : 101
program              : 0
read_statement       : 102
selection_statement  : 97
statement            : 93 106 107 107 108 109 110
statement_list_opt   : 92 93
type_specifier       : 6 37 78 80 110
unary_expression     : 36 39 40 61
unary_operator       : 41

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global_declaration_list_opt
    (2) global_declaration_list_opt -> . global_declaration global_declaration_list_opt
    (3) global_declaration_list_opt -> . global_declaration
    (4) global_declaration -> . function_definition
    (5) global_declaration -> . declaration
    (6) function_definition -> . type_specifier declarator compound_statement
    (7) function_definition -> . declarator declaration_list_opt compound_statement
    (79) declaration -> . declaration_body SEMI
    (72) type_specifier -> . VOID
    (73) type_specifier -> . CHAR
    (74) type_specifier -> . INT
    (75) type_specifier -> . FLOAT
    (10) declarator -> . direct_declarator
    (80) declaration_body -> . type_specifier init_declarator_list_opt
    (11) direct_declarator -> . ID
    (12) direct_declarator -> . LPAREN declarator RPAREN
    (13) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (14) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (15) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 14
    LPAREN          shift and go to state 15

    program                        shift and go to state 1
    global_declaration_list_opt    shift and go to state 2
    global_declaration             shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    type_specifier                 shift and go to state 6
    declarator                     shift and go to state 7
    declaration_body               shift and go to state 8
    direct_declarator              shift and go to state 13

state 1

    (0) S' -> program .



state 2

    (1) program -> global_declaration_list_opt .

    $end            reduce using rule 1 (program -> global_declaration_list_opt .)


state 3

    (2) global_declaration_list_opt -> global_declaration . global_declaration_list_opt
    (3) global_declaration_list_opt -> global_declaration .
    (2) global_declaration_list_opt -> . global_declaration global_declaration_list_opt
    (3) global_declaration_list_opt -> . global_declaration
    (4) global_declaration -> . function_definition
    (5) global_declaration -> . declaration
    (6) function_definition -> . type_specifier declarator compound_statement
    (7) function_definition -> . declarator declaration_list_opt compound_statement
    (79) declaration -> . declaration_body SEMI
    (72) type_specifier -> . VOID
    (73) type_specifier -> . CHAR
    (74) type_specifier -> . INT
    (75) type_specifier -> . FLOAT
    (10) declarator -> . direct_declarator
    (80) declaration_body -> . type_specifier init_declarator_list_opt
    (11) direct_declarator -> . ID
    (12) direct_declarator -> . LPAREN declarator RPAREN
    (13) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (14) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (15) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    $end            reduce using rule 3 (global_declaration_list_opt -> global_declaration .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 14
    LPAREN          shift and go to state 15

    global_declaration             shift and go to state 3
    global_declaration_list_opt    shift and go to state 16
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    type_specifier                 shift and go to state 6
    declarator                     shift and go to state 7
    declaration_body               shift and go to state 8
    direct_declarator              shift and go to state 13

state 4

    (4) global_declaration -> function_definition .

    VOID            reduce using rule 4 (global_declaration -> function_definition .)
    CHAR            reduce using rule 4 (global_declaration -> function_definition .)
    INT             reduce using rule 4 (global_declaration -> function_definition .)
    FLOAT           reduce using rule 4 (global_declaration -> function_definition .)
    ID              reduce using rule 4 (global_declaration -> function_definition .)
    LPAREN          reduce using rule 4 (global_declaration -> function_definition .)
    $end            reduce using rule 4 (global_declaration -> function_definition .)


state 5

    (5) global_declaration -> declaration .

    VOID            reduce using rule 5 (global_declaration -> declaration .)
    CHAR            reduce using rule 5 (global_declaration -> declaration .)
    INT             reduce using rule 5 (global_declaration -> declaration .)
    FLOAT           reduce using rule 5 (global_declaration -> declaration .)
    ID              reduce using rule 5 (global_declaration -> declaration .)
    LPAREN          reduce using rule 5 (global_declaration -> declaration .)
    $end            reduce using rule 5 (global_declaration -> declaration .)


state 6

    (6) function_definition -> type_specifier . declarator compound_statement
    (80) declaration_body -> type_specifier . init_declarator_list_opt
    (10) declarator -> . direct_declarator
    (81) init_declarator_list_opt -> . init_declarator_list
    (82) init_declarator_list_opt -> . empty
    (11) direct_declarator -> . ID
    (12) direct_declarator -> . LPAREN declarator RPAREN
    (13) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (14) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (15) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (83) init_declarator_list -> . init_declarator
    (84) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (117) empty -> .
    (85) init_declarator -> . declarator
    (86) init_declarator -> . declarator EQUALS initializer

    ID              shift and go to state 14
    LPAREN          shift and go to state 15
    SEMI            reduce using rule 117 (empty -> .)

    declarator                     shift and go to state 17
    init_declarator_list_opt       shift and go to state 18
    direct_declarator              shift and go to state 13
    init_declarator_list           shift and go to state 19
    empty                          shift and go to state 20
    init_declarator                shift and go to state 21

state 7

    (7) function_definition -> declarator . declaration_list_opt compound_statement
    (8) declaration_list_opt -> . declaration declaration_list_opt
    (9) declaration_list_opt -> . empty
    (79) declaration -> . declaration_body SEMI
    (117) empty -> .
    (80) declaration_body -> . type_specifier init_declarator_list_opt
    (72) type_specifier -> . VOID
    (73) type_specifier -> . CHAR
    (74) type_specifier -> . INT
    (75) type_specifier -> . FLOAT

    LBRACE          reduce using rule 117 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    declaration_list_opt           shift and go to state 22
    declaration                    shift and go to state 23
    empty                          shift and go to state 24
    declaration_body               shift and go to state 8
    type_specifier                 shift and go to state 25

state 8

    (79) declaration -> declaration_body . SEMI

    SEMI            shift and go to state 26


state 9

    (72) type_specifier -> VOID .

    ID              reduce using rule 72 (type_specifier -> VOID .)
    LPAREN          reduce using rule 72 (type_specifier -> VOID .)
    SEMI            reduce using rule 72 (type_specifier -> VOID .)
    RPAREN          reduce using rule 72 (type_specifier -> VOID .)


state 10

    (73) type_specifier -> CHAR .

    ID              reduce using rule 73 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 73 (type_specifier -> CHAR .)
    SEMI            reduce using rule 73 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 73 (type_specifier -> CHAR .)


state 11

    (74) type_specifier -> INT .

    ID              reduce using rule 74 (type_specifier -> INT .)
    LPAREN          reduce using rule 74 (type_specifier -> INT .)
    SEMI            reduce using rule 74 (type_specifier -> INT .)
    RPAREN          reduce using rule 74 (type_specifier -> INT .)


state 12

    (75) type_specifier -> FLOAT .

    ID              reduce using rule 75 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 75 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 75 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 75 (type_specifier -> FLOAT .)


state 13

    (10) declarator -> direct_declarator .
    (13) direct_declarator -> direct_declarator . LBRACKET constant_expression_opt RBRACKET
    (14) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (15) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN

    VOID            reduce using rule 10 (declarator -> direct_declarator .)
    CHAR            reduce using rule 10 (declarator -> direct_declarator .)
    INT             reduce using rule 10 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 10 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 10 (declarator -> direct_declarator .)
    EQUALS          reduce using rule 10 (declarator -> direct_declarator .)
    COMMA           reduce using rule 10 (declarator -> direct_declarator .)
    SEMI            reduce using rule 10 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 10 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 27
    LPAREN          shift and go to state 28


state 14

    (11) direct_declarator -> ID .

    LBRACKET        reduce using rule 11 (direct_declarator -> ID .)
    LPAREN          reduce using rule 11 (direct_declarator -> ID .)
    VOID            reduce using rule 11 (direct_declarator -> ID .)
    CHAR            reduce using rule 11 (direct_declarator -> ID .)
    INT             reduce using rule 11 (direct_declarator -> ID .)
    FLOAT           reduce using rule 11 (direct_declarator -> ID .)
    LBRACE          reduce using rule 11 (direct_declarator -> ID .)
    EQUALS          reduce using rule 11 (direct_declarator -> ID .)
    COMMA           reduce using rule 11 (direct_declarator -> ID .)
    SEMI            reduce using rule 11 (direct_declarator -> ID .)
    RPAREN          reduce using rule 11 (direct_declarator -> ID .)


state 15

    (12) direct_declarator -> LPAREN . declarator RPAREN
    (10) declarator -> . direct_declarator
    (11) direct_declarator -> . ID
    (12) direct_declarator -> . LPAREN declarator RPAREN
    (13) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (14) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (15) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    ID              shift and go to state 14
    LPAREN          shift and go to state 15

    declarator                     shift and go to state 29
    direct_declarator              shift and go to state 13

state 16

    (2) global_declaration_list_opt -> global_declaration global_declaration_list_opt .

    $end            reduce using rule 2 (global_declaration_list_opt -> global_declaration global_declaration_list_opt .)


state 17

    (6) function_definition -> type_specifier declarator . compound_statement
    (85) init_declarator -> declarator .
    (86) init_declarator -> declarator . EQUALS initializer
    (92) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE

    COMMA           reduce using rule 85 (init_declarator -> declarator .)
    SEMI            reduce using rule 85 (init_declarator -> declarator .)
    EQUALS          shift and go to state 31
    LBRACE          shift and go to state 32

    compound_statement             shift and go to state 30

state 18

    (80) declaration_body -> type_specifier init_declarator_list_opt .

    SEMI            reduce using rule 80 (declaration_body -> type_specifier init_declarator_list_opt .)


state 19

    (81) init_declarator_list_opt -> init_declarator_list .
    (84) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            reduce using rule 81 (init_declarator_list_opt -> init_declarator_list .)
    COMMA           shift and go to state 33


state 20

    (82) init_declarator_list_opt -> empty .

    SEMI            reduce using rule 82 (init_declarator_list_opt -> empty .)


state 21

    (83) init_declarator_list -> init_declarator .

    COMMA           reduce using rule 83 (init_declarator_list -> init_declarator .)
    SEMI            reduce using rule 83 (init_declarator_list -> init_declarator .)


state 22

    (7) function_definition -> declarator declaration_list_opt . compound_statement
    (92) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE

    LBRACE          shift and go to state 32

    compound_statement             shift and go to state 34

state 23

    (8) declaration_list_opt -> declaration . declaration_list_opt
    (8) declaration_list_opt -> . declaration declaration_list_opt
    (9) declaration_list_opt -> . empty
    (79) declaration -> . declaration_body SEMI
    (117) empty -> .
    (80) declaration_body -> . type_specifier init_declarator_list_opt
    (72) type_specifier -> . VOID
    (73) type_specifier -> . CHAR
    (74) type_specifier -> . INT
    (75) type_specifier -> . FLOAT

    LBRACE          reduce using rule 117 (empty -> .)
    IF              reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    BREAK           reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    ASSERT          reduce using rule 117 (empty -> .)
    PRINT           reduce using rule 117 (empty -> .)
    READ            reduce using rule 117 (empty -> .)
    PLUSPLUS        reduce using rule 117 (empty -> .)
    MINUSMINUS      reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ADDRESS         reduce using rule 117 (empty -> .)
    TIMES           reduce using rule 117 (empty -> .)
    PLUS            reduce using rule 117 (empty -> .)
    MINUS           reduce using rule 117 (empty -> .)
    UNARYDIFF       reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)
    INT_CONST       reduce using rule 117 (empty -> .)
    FLOAT_CONST     reduce using rule 117 (empty -> .)
    CHAR_CONST      reduce using rule 117 (empty -> .)
    RBRACE          reduce using rule 117 (empty -> .)
    SEMI            reduce using rule 117 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    declaration                    shift and go to state 23
    declaration_list_opt           shift and go to state 35
    empty                          shift and go to state 24
    declaration_body               shift and go to state 8
    type_specifier                 shift and go to state 25

state 24

    (9) declaration_list_opt -> empty .

    LBRACE          reduce using rule 9 (declaration_list_opt -> empty .)
    IF              reduce using rule 9 (declaration_list_opt -> empty .)
    WHILE           reduce using rule 9 (declaration_list_opt -> empty .)
    FOR             reduce using rule 9 (declaration_list_opt -> empty .)
    BREAK           reduce using rule 9 (declaration_list_opt -> empty .)
    RETURN          reduce using rule 9 (declaration_list_opt -> empty .)
    ASSERT          reduce using rule 9 (declaration_list_opt -> empty .)
    PRINT           reduce using rule 9 (declaration_list_opt -> empty .)
    READ            reduce using rule 9 (declaration_list_opt -> empty .)
    PLUSPLUS        reduce using rule 9 (declaration_list_opt -> empty .)
    MINUSMINUS      reduce using rule 9 (declaration_list_opt -> empty .)
    LPAREN          reduce using rule 9 (declaration_list_opt -> empty .)
    ADDRESS         reduce using rule 9 (declaration_list_opt -> empty .)
    TIMES           reduce using rule 9 (declaration_list_opt -> empty .)
    PLUS            reduce using rule 9 (declaration_list_opt -> empty .)
    MINUS           reduce using rule 9 (declaration_list_opt -> empty .)
    UNARYDIFF       reduce using rule 9 (declaration_list_opt -> empty .)
    ID              reduce using rule 9 (declaration_list_opt -> empty .)
    STRING          reduce using rule 9 (declaration_list_opt -> empty .)
    INT_CONST       reduce using rule 9 (declaration_list_opt -> empty .)
    FLOAT_CONST     reduce using rule 9 (declaration_list_opt -> empty .)
    CHAR_CONST      reduce using rule 9 (declaration_list_opt -> empty .)
    RBRACE          reduce using rule 9 (declaration_list_opt -> empty .)
    SEMI            reduce using rule 9 (declaration_list_opt -> empty .)


state 25

    (80) declaration_body -> type_specifier . init_declarator_list_opt
    (81) init_declarator_list_opt -> . init_declarator_list
    (82) init_declarator_list_opt -> . empty
    (83) init_declarator_list -> . init_declarator
    (84) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (117) empty -> .
    (85) init_declarator -> . declarator
    (86) init_declarator -> . declarator EQUALS initializer
    (10) declarator -> . direct_declarator
    (11) direct_declarator -> . ID
    (12) direct_declarator -> . LPAREN declarator RPAREN
    (13) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (14) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (15) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    SEMI            reduce using rule 117 (empty -> .)
    ID              shift and go to state 14
    LPAREN          shift and go to state 15

    init_declarator_list_opt       shift and go to state 18
    init_declarator_list           shift and go to state 19
    empty                          shift and go to state 20
    init_declarator                shift and go to state 21
    declarator                     shift and go to state 36
    direct_declarator              shift and go to state 13

state 26

    (79) declaration -> declaration_body SEMI .

    VOID            reduce using rule 79 (declaration -> declaration_body SEMI .)
    CHAR            reduce using rule 79 (declaration -> declaration_body SEMI .)
    INT             reduce using rule 79 (declaration -> declaration_body SEMI .)
    FLOAT           reduce using rule 79 (declaration -> declaration_body SEMI .)
    ID              reduce using rule 79 (declaration -> declaration_body SEMI .)
    LPAREN          reduce using rule 79 (declaration -> declaration_body SEMI .)
    $end            reduce using rule 79 (declaration -> declaration_body SEMI .)
    LBRACE          reduce using rule 79 (declaration -> declaration_body SEMI .)
    IF              reduce using rule 79 (declaration -> declaration_body SEMI .)
    WHILE           reduce using rule 79 (declaration -> declaration_body SEMI .)
    FOR             reduce using rule 79 (declaration -> declaration_body SEMI .)
    BREAK           reduce using rule 79 (declaration -> declaration_body SEMI .)
    RETURN          reduce using rule 79 (declaration -> declaration_body SEMI .)
    ASSERT          reduce using rule 79 (declaration -> declaration_body SEMI .)
    PRINT           reduce using rule 79 (declaration -> declaration_body SEMI .)
    READ            reduce using rule 79 (declaration -> declaration_body SEMI .)
    PLUSPLUS        reduce using rule 79 (declaration -> declaration_body SEMI .)
    MINUSMINUS      reduce using rule 79 (declaration -> declaration_body SEMI .)
    ADDRESS         reduce using rule 79 (declaration -> declaration_body SEMI .)
    TIMES           reduce using rule 79 (declaration -> declaration_body SEMI .)
    PLUS            reduce using rule 79 (declaration -> declaration_body SEMI .)
    MINUS           reduce using rule 79 (declaration -> declaration_body SEMI .)
    UNARYDIFF       reduce using rule 79 (declaration -> declaration_body SEMI .)
    STRING          reduce using rule 79 (declaration -> declaration_body SEMI .)
    INT_CONST       reduce using rule 79 (declaration -> declaration_body SEMI .)
    FLOAT_CONST     reduce using rule 79 (declaration -> declaration_body SEMI .)
    CHAR_CONST      reduce using rule 79 (declaration -> declaration_body SEMI .)
    RBRACE          reduce using rule 79 (declaration -> declaration_body SEMI .)
    SEMI            reduce using rule 79 (declaration -> declaration_body SEMI .)


state 27

    (13) direct_declarator -> direct_declarator LBRACKET . constant_expression_opt RBRACKET
    (16) constant_expression_opt -> . constant_expression
    (17) constant_expression_opt -> . empty
    (20) constant_expression -> . binary_expression
    (117) empty -> .
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    RBRACKET        reduce using rule 117 (empty -> .)
    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    constant_expression_opt        shift and go to state 37
    constant_expression            shift and go to state 38
    empty                          shift and go to state 39
    binary_expression              shift and go to state 40
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 28

    (14) direct_declarator -> direct_declarator LPAREN . parameter_list RPAREN
    (15) direct_declarator -> direct_declarator LPAREN . identifier_list_opt RPAREN
    (76) parameter_list -> . parameter_declaration
    (77) parameter_list -> . parameter_list COMMA parameter_declaration
    (18) identifier_list_opt -> . ID identifier_list_opt
    (19) identifier_list_opt -> . empty
    (78) parameter_declaration -> . type_specifier declarator
    (117) empty -> .
    (72) type_specifier -> . VOID
    (73) type_specifier -> . CHAR
    (74) type_specifier -> . INT
    (75) type_specifier -> . FLOAT

    ID              shift and go to state 63
    RPAREN          reduce using rule 117 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    parameter_list                 shift and go to state 60
    identifier_list_opt            shift and go to state 61
    parameter_declaration          shift and go to state 62
    empty                          shift and go to state 64
    type_specifier                 shift and go to state 65

state 29

    (12) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 66


state 30

    (6) function_definition -> type_specifier declarator compound_statement .

    VOID            reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    CHAR            reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    INT             reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    FLOAT           reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    ID              reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    LPAREN          reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    $end            reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)


state 31

    (86) init_declarator -> declarator EQUALS . initializer
    (87) initializer -> . assignment_expression
    (88) initializer -> . LBRACE initializer_list RBRACE
    (89) initializer -> . LBRACE initializer_list COMMA RBRACE
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LBRACE          shift and go to state 69
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    initializer                    shift and go to state 67
    assignment_expression          shift and go to state 68
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 32

    (92) compound_statement -> LBRACE . declaration_list_opt statement_list_opt RBRACE
    (8) declaration_list_opt -> . declaration declaration_list_opt
    (9) declaration_list_opt -> . empty
    (79) declaration -> . declaration_body SEMI
    (117) empty -> .
    (80) declaration_body -> . type_specifier init_declarator_list_opt
    (72) type_specifier -> . VOID
    (73) type_specifier -> . CHAR
    (74) type_specifier -> . INT
    (75) type_specifier -> . FLOAT

    LBRACE          reduce using rule 117 (empty -> .)
    IF              reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    BREAK           reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    ASSERT          reduce using rule 117 (empty -> .)
    PRINT           reduce using rule 117 (empty -> .)
    READ            reduce using rule 117 (empty -> .)
    PLUSPLUS        reduce using rule 117 (empty -> .)
    MINUSMINUS      reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ADDRESS         reduce using rule 117 (empty -> .)
    TIMES           reduce using rule 117 (empty -> .)
    PLUS            reduce using rule 117 (empty -> .)
    MINUS           reduce using rule 117 (empty -> .)
    UNARYDIFF       reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)
    INT_CONST       reduce using rule 117 (empty -> .)
    FLOAT_CONST     reduce using rule 117 (empty -> .)
    CHAR_CONST      reduce using rule 117 (empty -> .)
    RBRACE          reduce using rule 117 (empty -> .)
    SEMI            reduce using rule 117 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    declaration_list_opt           shift and go to state 72
    declaration                    shift and go to state 23
    empty                          shift and go to state 24
    declaration_body               shift and go to state 8
    type_specifier                 shift and go to state 25

state 33

    (84) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (85) init_declarator -> . declarator
    (86) init_declarator -> . declarator EQUALS initializer
    (10) declarator -> . direct_declarator
    (11) direct_declarator -> . ID
    (12) direct_declarator -> . LPAREN declarator RPAREN
    (13) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (14) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (15) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    ID              shift and go to state 14
    LPAREN          shift and go to state 15

    init_declarator                shift and go to state 73
    declarator                     shift and go to state 36
    direct_declarator              shift and go to state 13

state 34

    (7) function_definition -> declarator declaration_list_opt compound_statement .

    VOID            reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)


state 35

    (8) declaration_list_opt -> declaration declaration_list_opt .

    LBRACE          reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    IF              reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    WHILE           reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    FOR             reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    BREAK           reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    RETURN          reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    ASSERT          reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    PRINT           reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    READ            reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    PLUSPLUS        reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    MINUSMINUS      reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    LPAREN          reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    ADDRESS         reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    TIMES           reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    PLUS            reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    MINUS           reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    UNARYDIFF       reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    ID              reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    STRING          reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    INT_CONST       reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    FLOAT_CONST     reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    CHAR_CONST      reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    RBRACE          reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)
    SEMI            reduce using rule 8 (declaration_list_opt -> declaration declaration_list_opt .)


state 36

    (85) init_declarator -> declarator .
    (86) init_declarator -> declarator . EQUALS initializer

    COMMA           reduce using rule 85 (init_declarator -> declarator .)
    SEMI            reduce using rule 85 (init_declarator -> declarator .)
    EQUALS          shift and go to state 31


state 37

    (13) direct_declarator -> direct_declarator LBRACKET constant_expression_opt . RBRACKET

    RBRACKET        shift and go to state 74


state 38

    (16) constant_expression_opt -> constant_expression .

    RBRACKET        reduce using rule 16 (constant_expression_opt -> constant_expression .)


state 39

    (17) constant_expression_opt -> empty .

    RBRACKET        reduce using rule 17 (constant_expression_opt -> empty .)


state 40

    (20) constant_expression -> binary_expression .
    (22) binary_expression -> binary_expression . TIMES binary_expression
    (23) binary_expression -> binary_expression . DIVIDE binary_expression
    (24) binary_expression -> binary_expression . MOD binary_expression
    (25) binary_expression -> binary_expression . PLUS binary_expression
    (26) binary_expression -> binary_expression . MINUS binary_expression
    (27) binary_expression -> binary_expression . LT binary_expression
    (28) binary_expression -> binary_expression . EQUALS binary_expression
    (29) binary_expression -> binary_expression . EQ binary_expression
    (30) binary_expression -> binary_expression . LE binary_expression
    (31) binary_expression -> binary_expression . HT binary_expression
    (32) binary_expression -> binary_expression . HE binary_expression
    (33) binary_expression -> binary_expression . DIFF binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 20 (constant_expression -> binary_expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    LT              shift and go to state 80
    EQUALS          shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    HT              shift and go to state 84
    HE              shift and go to state 85
    DIFF            shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88


state 41

    (21) binary_expression -> cast_expression .

    TIMES           reduce using rule 21 (binary_expression -> cast_expression .)
    DIVIDE          reduce using rule 21 (binary_expression -> cast_expression .)
    MOD             reduce using rule 21 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 21 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 21 (binary_expression -> cast_expression .)
    LT              reduce using rule 21 (binary_expression -> cast_expression .)
    EQUALS          reduce using rule 21 (binary_expression -> cast_expression .)
    EQ              reduce using rule 21 (binary_expression -> cast_expression .)
    LE              reduce using rule 21 (binary_expression -> cast_expression .)
    HT              reduce using rule 21 (binary_expression -> cast_expression .)
    HE              reduce using rule 21 (binary_expression -> cast_expression .)
    DIFF            reduce using rule 21 (binary_expression -> cast_expression .)
    AND             reduce using rule 21 (binary_expression -> cast_expression .)
    OR              reduce using rule 21 (binary_expression -> cast_expression .)
    RBRACKET        reduce using rule 21 (binary_expression -> cast_expression .)
    COMMA           reduce using rule 21 (binary_expression -> cast_expression .)
    SEMI            reduce using rule 21 (binary_expression -> cast_expression .)
    RPAREN          reduce using rule 21 (binary_expression -> cast_expression .)
    RBRACE          reduce using rule 21 (binary_expression -> cast_expression .)


state 42

    (68) unary_operator -> TIMES .

    LPAREN          reduce using rule 68 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 68 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 68 (unary_operator -> TIMES .)
    ADDRESS         reduce using rule 68 (unary_operator -> TIMES .)
    TIMES           reduce using rule 68 (unary_operator -> TIMES .)
    PLUS            reduce using rule 68 (unary_operator -> TIMES .)
    MINUS           reduce using rule 68 (unary_operator -> TIMES .)
    UNARYDIFF       reduce using rule 68 (unary_operator -> TIMES .)
    ID              reduce using rule 68 (unary_operator -> TIMES .)
    STRING          reduce using rule 68 (unary_operator -> TIMES .)
    INT_CONST       reduce using rule 68 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 68 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 68 (unary_operator -> TIMES .)


state 43

    (69) unary_operator -> PLUS .

    LPAREN          reduce using rule 69 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 69 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 69 (unary_operator -> PLUS .)
    ADDRESS         reduce using rule 69 (unary_operator -> PLUS .)
    TIMES           reduce using rule 69 (unary_operator -> PLUS .)
    PLUS            reduce using rule 69 (unary_operator -> PLUS .)
    MINUS           reduce using rule 69 (unary_operator -> PLUS .)
    UNARYDIFF       reduce using rule 69 (unary_operator -> PLUS .)
    ID              reduce using rule 69 (unary_operator -> PLUS .)
    STRING          reduce using rule 69 (unary_operator -> PLUS .)
    INT_CONST       reduce using rule 69 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 69 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 69 (unary_operator -> PLUS .)


state 44

    (70) unary_operator -> MINUS .

    LPAREN          reduce using rule 70 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 70 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 70 (unary_operator -> MINUS .)
    ADDRESS         reduce using rule 70 (unary_operator -> MINUS .)
    TIMES           reduce using rule 70 (unary_operator -> MINUS .)
    PLUS            reduce using rule 70 (unary_operator -> MINUS .)
    MINUS           reduce using rule 70 (unary_operator -> MINUS .)
    UNARYDIFF       reduce using rule 70 (unary_operator -> MINUS .)
    ID              reduce using rule 70 (unary_operator -> MINUS .)
    STRING          reduce using rule 70 (unary_operator -> MINUS .)
    INT_CONST       reduce using rule 70 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 70 (unary_operator -> MINUS .)
    CHAR_CONST      reduce using rule 70 (unary_operator -> MINUS .)


state 45

    (36) cast_expression -> unary_expression .

    TIMES           reduce using rule 36 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 36 (cast_expression -> unary_expression .)
    MOD             reduce using rule 36 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 36 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 36 (cast_expression -> unary_expression .)
    LT              reduce using rule 36 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 36 (cast_expression -> unary_expression .)
    EQ              reduce using rule 36 (cast_expression -> unary_expression .)
    LE              reduce using rule 36 (cast_expression -> unary_expression .)
    HT              reduce using rule 36 (cast_expression -> unary_expression .)
    HE              reduce using rule 36 (cast_expression -> unary_expression .)
    DIFF            reduce using rule 36 (cast_expression -> unary_expression .)
    AND             reduce using rule 36 (cast_expression -> unary_expression .)
    OR              reduce using rule 36 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 36 (cast_expression -> unary_expression .)
    TIMESASSIGN     reduce using rule 36 (cast_expression -> unary_expression .)
    DIVIDEASSIGN    reduce using rule 36 (cast_expression -> unary_expression .)
    MODASSIGN       reduce using rule 36 (cast_expression -> unary_expression .)
    PLUSASSIGN      reduce using rule 36 (cast_expression -> unary_expression .)
    MINUSASSIGN     reduce using rule 36 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 36 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 36 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 36 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 36 (cast_expression -> unary_expression .)


state 46

    (37) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (52) primary_expression -> LPAREN . expression RPAREN
    (72) type_specifier -> . VOID
    (73) type_specifier -> . CHAR
    (74) type_specifier -> . INT
    (75) type_specifier -> . FLOAT
    (56) expression -> . assignment_expression
    (57) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    type_specifier                 shift and go to state 89
    cast_expression                shift and go to state 41
    expression                     shift and go to state 90
    assignment_expression          shift and go to state 91
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 47

    (38) unary_expression -> postfix_expression .
    (43) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (44) postfix_expression -> postfix_expression . LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> postfix_expression . PLUSPLUS
    (46) postfix_expression -> postfix_expression . MINUSMINUS

    TIMES           reduce using rule 38 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 38 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 38 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 38 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 38 (unary_expression -> postfix_expression .)
    LT              reduce using rule 38 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 38 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 38 (unary_expression -> postfix_expression .)
    LE              reduce using rule 38 (unary_expression -> postfix_expression .)
    HT              reduce using rule 38 (unary_expression -> postfix_expression .)
    HE              reduce using rule 38 (unary_expression -> postfix_expression .)
    DIFF            reduce using rule 38 (unary_expression -> postfix_expression .)
    AND             reduce using rule 38 (unary_expression -> postfix_expression .)
    OR              reduce using rule 38 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 38 (unary_expression -> postfix_expression .)
    TIMESASSIGN     reduce using rule 38 (unary_expression -> postfix_expression .)
    DIVIDEASSIGN    reduce using rule 38 (unary_expression -> postfix_expression .)
    MODASSIGN       reduce using rule 38 (unary_expression -> postfix_expression .)
    PLUSASSIGN      reduce using rule 38 (unary_expression -> postfix_expression .)
    MINUSASSIGN     reduce using rule 38 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 38 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 38 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 38 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 38 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 92
    LPAREN          shift and go to state 93
    PLUSPLUS        shift and go to state 94
    MINUSMINUS      shift and go to state 95


state 48

    (39) unary_expression -> PLUSPLUS . unary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    LPAREN          shift and go to state 97
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    unary_expression               shift and go to state 96
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 49

    (40) unary_expression -> MINUSMINUS . unary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    LPAREN          shift and go to state 97
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    unary_expression               shift and go to state 98
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 50

    (41) unary_expression -> unary_operator . cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    unary_operator                 shift and go to state 50
    cast_expression                shift and go to state 99
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 51

    (42) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 42 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 42 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 42 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 42 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 42 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 42 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 42 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 42 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 42 (postfix_expression -> primary_expression .)
    LT              reduce using rule 42 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 42 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 42 (postfix_expression -> primary_expression .)
    LE              reduce using rule 42 (postfix_expression -> primary_expression .)
    HT              reduce using rule 42 (postfix_expression -> primary_expression .)
    HE              reduce using rule 42 (postfix_expression -> primary_expression .)
    DIFF            reduce using rule 42 (postfix_expression -> primary_expression .)
    AND             reduce using rule 42 (postfix_expression -> primary_expression .)
    OR              reduce using rule 42 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 42 (postfix_expression -> primary_expression .)
    TIMESASSIGN     reduce using rule 42 (postfix_expression -> primary_expression .)
    DIVIDEASSIGN    reduce using rule 42 (postfix_expression -> primary_expression .)
    MODASSIGN       reduce using rule 42 (postfix_expression -> primary_expression .)
    PLUSASSIGN      reduce using rule 42 (postfix_expression -> primary_expression .)
    MINUSASSIGN     reduce using rule 42 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 42 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 42 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 42 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 42 (postfix_expression -> primary_expression .)


state 52

    (67) unary_operator -> ADDRESS .

    LPAREN          reduce using rule 67 (unary_operator -> ADDRESS .)
    PLUSPLUS        reduce using rule 67 (unary_operator -> ADDRESS .)
    MINUSMINUS      reduce using rule 67 (unary_operator -> ADDRESS .)
    ADDRESS         reduce using rule 67 (unary_operator -> ADDRESS .)
    TIMES           reduce using rule 67 (unary_operator -> ADDRESS .)
    PLUS            reduce using rule 67 (unary_operator -> ADDRESS .)
    MINUS           reduce using rule 67 (unary_operator -> ADDRESS .)
    UNARYDIFF       reduce using rule 67 (unary_operator -> ADDRESS .)
    ID              reduce using rule 67 (unary_operator -> ADDRESS .)
    STRING          reduce using rule 67 (unary_operator -> ADDRESS .)
    INT_CONST       reduce using rule 67 (unary_operator -> ADDRESS .)
    FLOAT_CONST     reduce using rule 67 (unary_operator -> ADDRESS .)
    CHAR_CONST      reduce using rule 67 (unary_operator -> ADDRESS .)


state 53

    (71) unary_operator -> UNARYDIFF .

    LPAREN          reduce using rule 71 (unary_operator -> UNARYDIFF .)
    PLUSPLUS        reduce using rule 71 (unary_operator -> UNARYDIFF .)
    MINUSMINUS      reduce using rule 71 (unary_operator -> UNARYDIFF .)
    ADDRESS         reduce using rule 71 (unary_operator -> UNARYDIFF .)
    TIMES           reduce using rule 71 (unary_operator -> UNARYDIFF .)
    PLUS            reduce using rule 71 (unary_operator -> UNARYDIFF .)
    MINUS           reduce using rule 71 (unary_operator -> UNARYDIFF .)
    UNARYDIFF       reduce using rule 71 (unary_operator -> UNARYDIFF .)
    ID              reduce using rule 71 (unary_operator -> UNARYDIFF .)
    STRING          reduce using rule 71 (unary_operator -> UNARYDIFF .)
    INT_CONST       reduce using rule 71 (unary_operator -> UNARYDIFF .)
    FLOAT_CONST     reduce using rule 71 (unary_operator -> UNARYDIFF .)
    CHAR_CONST      reduce using rule 71 (unary_operator -> UNARYDIFF .)


state 54

    (49) primary_expression -> ID .

    LBRACKET        reduce using rule 49 (primary_expression -> ID .)
    LPAREN          reduce using rule 49 (primary_expression -> ID .)
    PLUSPLUS        reduce using rule 49 (primary_expression -> ID .)
    MINUSMINUS      reduce using rule 49 (primary_expression -> ID .)
    TIMES           reduce using rule 49 (primary_expression -> ID .)
    DIVIDE          reduce using rule 49 (primary_expression -> ID .)
    MOD             reduce using rule 49 (primary_expression -> ID .)
    PLUS            reduce using rule 49 (primary_expression -> ID .)
    MINUS           reduce using rule 49 (primary_expression -> ID .)
    LT              reduce using rule 49 (primary_expression -> ID .)
    EQUALS          reduce using rule 49 (primary_expression -> ID .)
    EQ              reduce using rule 49 (primary_expression -> ID .)
    LE              reduce using rule 49 (primary_expression -> ID .)
    HT              reduce using rule 49 (primary_expression -> ID .)
    HE              reduce using rule 49 (primary_expression -> ID .)
    DIFF            reduce using rule 49 (primary_expression -> ID .)
    AND             reduce using rule 49 (primary_expression -> ID .)
    OR              reduce using rule 49 (primary_expression -> ID .)
    RBRACKET        reduce using rule 49 (primary_expression -> ID .)
    TIMESASSIGN     reduce using rule 49 (primary_expression -> ID .)
    DIVIDEASSIGN    reduce using rule 49 (primary_expression -> ID .)
    MODASSIGN       reduce using rule 49 (primary_expression -> ID .)
    PLUSASSIGN      reduce using rule 49 (primary_expression -> ID .)
    MINUSASSIGN     reduce using rule 49 (primary_expression -> ID .)
    COMMA           reduce using rule 49 (primary_expression -> ID .)
    SEMI            reduce using rule 49 (primary_expression -> ID .)
    RPAREN          reduce using rule 49 (primary_expression -> ID .)
    RBRACE          reduce using rule 49 (primary_expression -> ID .)


state 55

    (50) primary_expression -> constant .

    LBRACKET        reduce using rule 50 (primary_expression -> constant .)
    LPAREN          reduce using rule 50 (primary_expression -> constant .)
    PLUSPLUS        reduce using rule 50 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 50 (primary_expression -> constant .)
    TIMES           reduce using rule 50 (primary_expression -> constant .)
    DIVIDE          reduce using rule 50 (primary_expression -> constant .)
    MOD             reduce using rule 50 (primary_expression -> constant .)
    PLUS            reduce using rule 50 (primary_expression -> constant .)
    MINUS           reduce using rule 50 (primary_expression -> constant .)
    LT              reduce using rule 50 (primary_expression -> constant .)
    EQUALS          reduce using rule 50 (primary_expression -> constant .)
    EQ              reduce using rule 50 (primary_expression -> constant .)
    LE              reduce using rule 50 (primary_expression -> constant .)
    HT              reduce using rule 50 (primary_expression -> constant .)
    HE              reduce using rule 50 (primary_expression -> constant .)
    DIFF            reduce using rule 50 (primary_expression -> constant .)
    AND             reduce using rule 50 (primary_expression -> constant .)
    OR              reduce using rule 50 (primary_expression -> constant .)
    RBRACKET        reduce using rule 50 (primary_expression -> constant .)
    TIMESASSIGN     reduce using rule 50 (primary_expression -> constant .)
    DIVIDEASSIGN    reduce using rule 50 (primary_expression -> constant .)
    MODASSIGN       reduce using rule 50 (primary_expression -> constant .)
    PLUSASSIGN      reduce using rule 50 (primary_expression -> constant .)
    MINUSASSIGN     reduce using rule 50 (primary_expression -> constant .)
    COMMA           reduce using rule 50 (primary_expression -> constant .)
    SEMI            reduce using rule 50 (primary_expression -> constant .)
    RPAREN          reduce using rule 50 (primary_expression -> constant .)
    RBRACE          reduce using rule 50 (primary_expression -> constant .)


state 56

    (51) primary_expression -> STRING .

    LBRACKET        reduce using rule 51 (primary_expression -> STRING .)
    LPAREN          reduce using rule 51 (primary_expression -> STRING .)
    PLUSPLUS        reduce using rule 51 (primary_expression -> STRING .)
    MINUSMINUS      reduce using rule 51 (primary_expression -> STRING .)
    TIMES           reduce using rule 51 (primary_expression -> STRING .)
    DIVIDE          reduce using rule 51 (primary_expression -> STRING .)
    MOD             reduce using rule 51 (primary_expression -> STRING .)
    PLUS            reduce using rule 51 (primary_expression -> STRING .)
    MINUS           reduce using rule 51 (primary_expression -> STRING .)
    LT              reduce using rule 51 (primary_expression -> STRING .)
    EQUALS          reduce using rule 51 (primary_expression -> STRING .)
    EQ              reduce using rule 51 (primary_expression -> STRING .)
    LE              reduce using rule 51 (primary_expression -> STRING .)
    HT              reduce using rule 51 (primary_expression -> STRING .)
    HE              reduce using rule 51 (primary_expression -> STRING .)
    DIFF            reduce using rule 51 (primary_expression -> STRING .)
    AND             reduce using rule 51 (primary_expression -> STRING .)
    OR              reduce using rule 51 (primary_expression -> STRING .)
    RBRACKET        reduce using rule 51 (primary_expression -> STRING .)
    TIMESASSIGN     reduce using rule 51 (primary_expression -> STRING .)
    DIVIDEASSIGN    reduce using rule 51 (primary_expression -> STRING .)
    MODASSIGN       reduce using rule 51 (primary_expression -> STRING .)
    PLUSASSIGN      reduce using rule 51 (primary_expression -> STRING .)
    MINUSASSIGN     reduce using rule 51 (primary_expression -> STRING .)
    COMMA           reduce using rule 51 (primary_expression -> STRING .)
    SEMI            reduce using rule 51 (primary_expression -> STRING .)
    RPAREN          reduce using rule 51 (primary_expression -> STRING .)
    RBRACE          reduce using rule 51 (primary_expression -> STRING .)


state 57

    (53) constant -> INT_CONST .

    LBRACKET        reduce using rule 53 (constant -> INT_CONST .)
    LPAREN          reduce using rule 53 (constant -> INT_CONST .)
    PLUSPLUS        reduce using rule 53 (constant -> INT_CONST .)
    MINUSMINUS      reduce using rule 53 (constant -> INT_CONST .)
    TIMES           reduce using rule 53 (constant -> INT_CONST .)
    DIVIDE          reduce using rule 53 (constant -> INT_CONST .)
    MOD             reduce using rule 53 (constant -> INT_CONST .)
    PLUS            reduce using rule 53 (constant -> INT_CONST .)
    MINUS           reduce using rule 53 (constant -> INT_CONST .)
    LT              reduce using rule 53 (constant -> INT_CONST .)
    EQUALS          reduce using rule 53 (constant -> INT_CONST .)
    EQ              reduce using rule 53 (constant -> INT_CONST .)
    LE              reduce using rule 53 (constant -> INT_CONST .)
    HT              reduce using rule 53 (constant -> INT_CONST .)
    HE              reduce using rule 53 (constant -> INT_CONST .)
    DIFF            reduce using rule 53 (constant -> INT_CONST .)
    AND             reduce using rule 53 (constant -> INT_CONST .)
    OR              reduce using rule 53 (constant -> INT_CONST .)
    RBRACKET        reduce using rule 53 (constant -> INT_CONST .)
    TIMESASSIGN     reduce using rule 53 (constant -> INT_CONST .)
    DIVIDEASSIGN    reduce using rule 53 (constant -> INT_CONST .)
    MODASSIGN       reduce using rule 53 (constant -> INT_CONST .)
    PLUSASSIGN      reduce using rule 53 (constant -> INT_CONST .)
    MINUSASSIGN     reduce using rule 53 (constant -> INT_CONST .)
    COMMA           reduce using rule 53 (constant -> INT_CONST .)
    SEMI            reduce using rule 53 (constant -> INT_CONST .)
    RPAREN          reduce using rule 53 (constant -> INT_CONST .)
    RBRACE          reduce using rule 53 (constant -> INT_CONST .)


state 58

    (54) constant -> FLOAT_CONST .

    LBRACKET        reduce using rule 54 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 54 (constant -> FLOAT_CONST .)
    PLUSPLUS        reduce using rule 54 (constant -> FLOAT_CONST .)
    MINUSMINUS      reduce using rule 54 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 54 (constant -> FLOAT_CONST .)
    DIVIDE          reduce using rule 54 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 54 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 54 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 54 (constant -> FLOAT_CONST .)
    LT              reduce using rule 54 (constant -> FLOAT_CONST .)
    EQUALS          reduce using rule 54 (constant -> FLOAT_CONST .)
    EQ              reduce using rule 54 (constant -> FLOAT_CONST .)
    LE              reduce using rule 54 (constant -> FLOAT_CONST .)
    HT              reduce using rule 54 (constant -> FLOAT_CONST .)
    HE              reduce using rule 54 (constant -> FLOAT_CONST .)
    DIFF            reduce using rule 54 (constant -> FLOAT_CONST .)
    AND             reduce using rule 54 (constant -> FLOAT_CONST .)
    OR              reduce using rule 54 (constant -> FLOAT_CONST .)
    RBRACKET        reduce using rule 54 (constant -> FLOAT_CONST .)
    TIMESASSIGN     reduce using rule 54 (constant -> FLOAT_CONST .)
    DIVIDEASSIGN    reduce using rule 54 (constant -> FLOAT_CONST .)
    MODASSIGN       reduce using rule 54 (constant -> FLOAT_CONST .)
    PLUSASSIGN      reduce using rule 54 (constant -> FLOAT_CONST .)
    MINUSASSIGN     reduce using rule 54 (constant -> FLOAT_CONST .)
    COMMA           reduce using rule 54 (constant -> FLOAT_CONST .)
    SEMI            reduce using rule 54 (constant -> FLOAT_CONST .)
    RPAREN          reduce using rule 54 (constant -> FLOAT_CONST .)
    RBRACE          reduce using rule 54 (constant -> FLOAT_CONST .)


state 59

    (55) constant -> CHAR_CONST .

    LBRACKET        reduce using rule 55 (constant -> CHAR_CONST .)
    LPAREN          reduce using rule 55 (constant -> CHAR_CONST .)
    PLUSPLUS        reduce using rule 55 (constant -> CHAR_CONST .)
    MINUSMINUS      reduce using rule 55 (constant -> CHAR_CONST .)
    TIMES           reduce using rule 55 (constant -> CHAR_CONST .)
    DIVIDE          reduce using rule 55 (constant -> CHAR_CONST .)
    MOD             reduce using rule 55 (constant -> CHAR_CONST .)
    PLUS            reduce using rule 55 (constant -> CHAR_CONST .)
    MINUS           reduce using rule 55 (constant -> CHAR_CONST .)
    LT              reduce using rule 55 (constant -> CHAR_CONST .)
    EQUALS          reduce using rule 55 (constant -> CHAR_CONST .)
    EQ              reduce using rule 55 (constant -> CHAR_CONST .)
    LE              reduce using rule 55 (constant -> CHAR_CONST .)
    HT              reduce using rule 55 (constant -> CHAR_CONST .)
    HE              reduce using rule 55 (constant -> CHAR_CONST .)
    DIFF            reduce using rule 55 (constant -> CHAR_CONST .)
    AND             reduce using rule 55 (constant -> CHAR_CONST .)
    OR              reduce using rule 55 (constant -> CHAR_CONST .)
    RBRACKET        reduce using rule 55 (constant -> CHAR_CONST .)
    TIMESASSIGN     reduce using rule 55 (constant -> CHAR_CONST .)
    DIVIDEASSIGN    reduce using rule 55 (constant -> CHAR_CONST .)
    MODASSIGN       reduce using rule 55 (constant -> CHAR_CONST .)
    PLUSASSIGN      reduce using rule 55 (constant -> CHAR_CONST .)
    MINUSASSIGN     reduce using rule 55 (constant -> CHAR_CONST .)
    COMMA           reduce using rule 55 (constant -> CHAR_CONST .)
    SEMI            reduce using rule 55 (constant -> CHAR_CONST .)
    RPAREN          reduce using rule 55 (constant -> CHAR_CONST .)
    RBRACE          reduce using rule 55 (constant -> CHAR_CONST .)


state 60

    (14) direct_declarator -> direct_declarator LPAREN parameter_list . RPAREN
    (77) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          shift and go to state 100
    COMMA           shift and go to state 101


state 61

    (15) direct_declarator -> direct_declarator LPAREN identifier_list_opt . RPAREN

    RPAREN          shift and go to state 102


state 62

    (76) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 76 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 76 (parameter_list -> parameter_declaration .)


state 63

    (18) identifier_list_opt -> ID . identifier_list_opt
    (18) identifier_list_opt -> . ID identifier_list_opt
    (19) identifier_list_opt -> . empty
    (117) empty -> .

    ID              shift and go to state 63
    RPAREN          reduce using rule 117 (empty -> .)

    identifier_list_opt            shift and go to state 103
    empty                          shift and go to state 64

state 64

    (19) identifier_list_opt -> empty .

    RPAREN          reduce using rule 19 (identifier_list_opt -> empty .)


state 65

    (78) parameter_declaration -> type_specifier . declarator
    (10) declarator -> . direct_declarator
    (11) direct_declarator -> . ID
    (12) direct_declarator -> . LPAREN declarator RPAREN
    (13) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (14) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (15) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    ID              shift and go to state 14
    LPAREN          shift and go to state 15

    declarator                     shift and go to state 104
    direct_declarator              shift and go to state 13

state 66

    (12) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 12 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 12 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 12 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 12 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 12 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 12 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 12 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 12 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 12 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 12 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 12 (direct_declarator -> LPAREN declarator RPAREN .)


state 67

    (86) init_declarator -> declarator EQUALS initializer .

    COMMA           reduce using rule 86 (init_declarator -> declarator EQUALS initializer .)
    SEMI            reduce using rule 86 (init_declarator -> declarator EQUALS initializer .)


state 68

    (87) initializer -> assignment_expression .

    COMMA           reduce using rule 87 (initializer -> assignment_expression .)
    SEMI            reduce using rule 87 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 87 (initializer -> assignment_expression .)


state 69

    (88) initializer -> LBRACE . initializer_list RBRACE
    (89) initializer -> LBRACE . initializer_list COMMA RBRACE
    (90) initializer_list -> . initializer
    (91) initializer_list -> . initializer_list COMMA initializer
    (87) initializer -> . assignment_expression
    (88) initializer -> . LBRACE initializer_list RBRACE
    (89) initializer -> . LBRACE initializer_list COMMA RBRACE
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LBRACE          shift and go to state 69
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    initializer_list               shift and go to state 105
    initializer                    shift and go to state 106
    assignment_expression          shift and go to state 68
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 70

    (60) assignment_expression -> binary_expression .
    (22) binary_expression -> binary_expression . TIMES binary_expression
    (23) binary_expression -> binary_expression . DIVIDE binary_expression
    (24) binary_expression -> binary_expression . MOD binary_expression
    (25) binary_expression -> binary_expression . PLUS binary_expression
    (26) binary_expression -> binary_expression . MINUS binary_expression
    (27) binary_expression -> binary_expression . LT binary_expression
    (28) binary_expression -> binary_expression . EQUALS binary_expression
    (29) binary_expression -> binary_expression . EQ binary_expression
    (30) binary_expression -> binary_expression . LE binary_expression
    (31) binary_expression -> binary_expression . HT binary_expression
    (32) binary_expression -> binary_expression . HE binary_expression
    (33) binary_expression -> binary_expression . DIFF binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    COMMA           reduce using rule 60 (assignment_expression -> binary_expression .)
    SEMI            reduce using rule 60 (assignment_expression -> binary_expression .)
    RPAREN          reduce using rule 60 (assignment_expression -> binary_expression .)
    RBRACE          reduce using rule 60 (assignment_expression -> binary_expression .)
    RBRACKET        reduce using rule 60 (assignment_expression -> binary_expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    LT              shift and go to state 80
    EQUALS          shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    HT              shift and go to state 84
    HE              shift and go to state 85
    DIFF            shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88


state 71

    (61) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (36) cast_expression -> unary_expression .
    (62) assignment_operator -> . TIMESASSIGN
    (63) assignment_operator -> . DIVIDEASSIGN
    (64) assignment_operator -> . MODASSIGN
    (65) assignment_operator -> . PLUSASSIGN
    (66) assignment_operator -> . MINUSASSIGN

    TIMES           reduce using rule 36 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 36 (cast_expression -> unary_expression .)
    MOD             reduce using rule 36 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 36 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 36 (cast_expression -> unary_expression .)
    LT              reduce using rule 36 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 36 (cast_expression -> unary_expression .)
    EQ              reduce using rule 36 (cast_expression -> unary_expression .)
    LE              reduce using rule 36 (cast_expression -> unary_expression .)
    HT              reduce using rule 36 (cast_expression -> unary_expression .)
    HE              reduce using rule 36 (cast_expression -> unary_expression .)
    DIFF            reduce using rule 36 (cast_expression -> unary_expression .)
    AND             reduce using rule 36 (cast_expression -> unary_expression .)
    OR              reduce using rule 36 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 36 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 36 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 36 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 36 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 36 (cast_expression -> unary_expression .)
    TIMESASSIGN     shift and go to state 108
    DIVIDEASSIGN    shift and go to state 109
    MODASSIGN       shift and go to state 110
    PLUSASSIGN      shift and go to state 111
    MINUSASSIGN     shift and go to state 112

    assignment_operator            shift and go to state 107

state 72

    (92) compound_statement -> LBRACE declaration_list_opt . statement_list_opt RBRACE
    (93) statement_list_opt -> . statement statement_list_opt
    (94) statement_list_opt -> . empty
    (95) statement -> . expression_statement
    (96) statement -> . compound_statement
    (97) statement -> . selection_statement
    (98) statement -> . iteration_statement
    (99) statement -> . jump_statement
    (100) statement -> . assert_statement
    (101) statement -> . print_statement
    (102) statement -> . read_statement
    (117) empty -> .
    (103) expression_statement -> . expression_opt SEMI
    (92) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (106) selection_statement -> . IF LPAREN expression RPAREN statement
    (107) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (108) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (109) iteration_statement -> . FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (110) iteration_statement -> . FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (111) jump_statement -> . BREAK SEMI
    (112) jump_statement -> . RETURN SEMI
    (113) jump_statement -> . RETURN expression SEMI
    (114) assert_statement -> . ASSERT expression SEMI
    (115) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (116) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (104) expression_opt -> . expression
    (105) expression_opt -> . empty
    (56) expression -> . assignment_expression
    (57) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    RBRACE          reduce using rule 117 (empty -> .)
    SEMI            reduce using rule 117 (empty -> .)
    LBRACE          shift and go to state 32
    IF              shift and go to state 125
    WHILE           shift and go to state 127
    FOR             shift and go to state 128
    BREAK           shift and go to state 129
    RETURN          shift and go to state 130
    ASSERT          shift and go to state 131
    PRINT           shift and go to state 132
    READ            shift and go to state 133
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    statement_list_opt             shift and go to state 113
    statement                      shift and go to state 114
    empty                          shift and go to state 115
    expression_statement           shift and go to state 116
    compound_statement             shift and go to state 117
    selection_statement            shift and go to state 118
    iteration_statement            shift and go to state 119
    jump_statement                 shift and go to state 120
    assert_statement               shift and go to state 121
    print_statement                shift and go to state 122
    read_statement                 shift and go to state 123
    expression_opt                 shift and go to state 124
    expression                     shift and go to state 126
    assignment_expression          shift and go to state 91
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 73

    (84) init_declarator_list -> init_declarator_list COMMA init_declarator .

    COMMA           reduce using rule 84 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 84 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 74

    (13) direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .

    LBRACKET        reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LPAREN          reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    VOID            reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    CHAR            reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    INT             reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    FLOAT           reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LBRACE          reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    EQUALS          reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    COMMA           reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    SEMI            reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    RPAREN          reduce using rule 13 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)


state 75

    (22) binary_expression -> binary_expression TIMES . binary_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    binary_expression              shift and go to state 134
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 76

    (23) binary_expression -> binary_expression DIVIDE . binary_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    binary_expression              shift and go to state 135
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 77

    (24) binary_expression -> binary_expression MOD . binary_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    binary_expression              shift and go to state 136
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 78

    (25) binary_expression -> binary_expression PLUS . binary_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    binary_expression              shift and go to state 137
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 79

    (26) binary_expression -> binary_expression MINUS . binary_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    binary_expression              shift and go to state 138
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 80

    (27) binary_expression -> binary_expression LT . binary_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    binary_expression              shift and go to state 139
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 81

    (28) binary_expression -> binary_expression EQUALS . binary_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    binary_expression              shift and go to state 140
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 82

    (29) binary_expression -> binary_expression EQ . binary_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    binary_expression              shift and go to state 141
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 83

    (30) binary_expression -> binary_expression LE . binary_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    binary_expression              shift and go to state 142
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 84

    (31) binary_expression -> binary_expression HT . binary_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    binary_expression              shift and go to state 143
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 85

    (32) binary_expression -> binary_expression HE . binary_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    binary_expression              shift and go to state 144
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 86

    (33) binary_expression -> binary_expression DIFF . binary_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    binary_expression              shift and go to state 145
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 87

    (34) binary_expression -> binary_expression AND . binary_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    binary_expression              shift and go to state 146
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 88

    (35) binary_expression -> binary_expression OR . binary_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    binary_expression              shift and go to state 147
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 89

    (37) cast_expression -> LPAREN type_specifier . RPAREN cast_expression

    RPAREN          shift and go to state 148


state 90

    (52) primary_expression -> LPAREN expression . RPAREN
    (57) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 149
    COMMA           shift and go to state 150


state 91

    (56) expression -> assignment_expression .

    RPAREN          reduce using rule 56 (expression -> assignment_expression .)
    COMMA           reduce using rule 56 (expression -> assignment_expression .)
    SEMI            reduce using rule 56 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 56 (expression -> assignment_expression .)


state 92

    (43) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (56) expression -> . assignment_expression
    (57) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    postfix_expression             shift and go to state 47
    expression                     shift and go to state 151
    assignment_expression          shift and go to state 91
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 93

    (44) postfix_expression -> postfix_expression LPAREN . argument_expression_opt RPAREN
    (47) argument_expression_opt -> . argument_expression
    (48) argument_expression_opt -> . empty
    (58) argument_expression -> . assignment_expression
    (59) argument_expression -> . argument_expression COMMA assignment_expression
    (117) empty -> .
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    RPAREN          reduce using rule 117 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    postfix_expression             shift and go to state 47
    argument_expression_opt        shift and go to state 152
    argument_expression            shift and go to state 153
    empty                          shift and go to state 154
    assignment_expression          shift and go to state 155
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 94

    (45) postfix_expression -> postfix_expression PLUSPLUS .

    LBRACKET        reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    LE              reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    HT              reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    HE              reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIFF            reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMESASSIGN     reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDEASSIGN    reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    MODASSIGN       reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSASSIGN      reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSASSIGN     reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 45 (postfix_expression -> postfix_expression PLUSPLUS .)


state 95

    (46) postfix_expression -> postfix_expression MINUSMINUS .

    LBRACKET        reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    LE              reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    HT              reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    HE              reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIFF            reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMESASSIGN     reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDEASSIGN    reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    MODASSIGN       reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSASSIGN      reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSASSIGN     reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 46 (postfix_expression -> postfix_expression MINUSMINUS .)


state 96

    (39) unary_expression -> PLUSPLUS unary_expression .

    TIMES           reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    EQUALS          reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    LE              reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    HT              reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    HE              reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    DIFF            reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    TIMESASSIGN     reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDEASSIGN    reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    MODASSIGN       reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    PLUSASSIGN      reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    MINUSASSIGN     reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 39 (unary_expression -> PLUSPLUS unary_expression .)


state 97

    (52) primary_expression -> LPAREN . expression RPAREN
    (56) expression -> . assignment_expression
    (57) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    expression                     shift and go to state 90
    assignment_expression          shift and go to state 91
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 98

    (40) unary_expression -> MINUSMINUS unary_expression .

    TIMES           reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    EQUALS          reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    LE              reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    HT              reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    HE              reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    DIFF            reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    TIMESASSIGN     reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDEASSIGN    reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    MODASSIGN       reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    PLUSASSIGN      reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    MINUSASSIGN     reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 40 (unary_expression -> MINUSMINUS unary_expression .)


state 99

    (41) unary_expression -> unary_operator cast_expression .

    TIMES           reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    EQUALS          reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    HT              reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    HE              reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    DIFF            reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    TIMESASSIGN     reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    DIVIDEASSIGN    reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    MODASSIGN       reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    PLUSASSIGN      reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    MINUSASSIGN     reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 41 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 41 (unary_expression -> unary_operator cast_expression .)


state 100

    (14) direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .

    LBRACKET        reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LPAREN          reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    VOID            reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    CHAR            reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    INT             reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    FLOAT           reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LBRACE          reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    EQUALS          reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 14 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)


state 101

    (77) parameter_list -> parameter_list COMMA . parameter_declaration
    (78) parameter_declaration -> . type_specifier declarator
    (72) type_specifier -> . VOID
    (73) type_specifier -> . CHAR
    (74) type_specifier -> . INT
    (75) type_specifier -> . FLOAT

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    parameter_declaration          shift and go to state 156
    type_specifier                 shift and go to state 65

state 102

    (15) direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .

    LBRACKET        reduce using rule 15 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LPAREN          reduce using rule 15 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    VOID            reduce using rule 15 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    CHAR            reduce using rule 15 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    INT             reduce using rule 15 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    FLOAT           reduce using rule 15 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LBRACE          reduce using rule 15 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    EQUALS          reduce using rule 15 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    COMMA           reduce using rule 15 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    SEMI            reduce using rule 15 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 15 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)


state 103

    (18) identifier_list_opt -> ID identifier_list_opt .

    RPAREN          reduce using rule 18 (identifier_list_opt -> ID identifier_list_opt .)


state 104

    (78) parameter_declaration -> type_specifier declarator .

    RPAREN          reduce using rule 78 (parameter_declaration -> type_specifier declarator .)
    COMMA           reduce using rule 78 (parameter_declaration -> type_specifier declarator .)


state 105

    (88) initializer -> LBRACE initializer_list . RBRACE
    (89) initializer -> LBRACE initializer_list . COMMA RBRACE
    (91) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 157
    COMMA           shift and go to state 158


state 106

    (90) initializer_list -> initializer .

    RBRACE          reduce using rule 90 (initializer_list -> initializer .)
    COMMA           reduce using rule 90 (initializer_list -> initializer .)


state 107

    (61) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    unary_expression               shift and go to state 71
    assignment_expression          shift and go to state 159
    binary_expression              shift and go to state 70
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 108

    (62) assignment_operator -> TIMESASSIGN .

    PLUSPLUS        reduce using rule 62 (assignment_operator -> TIMESASSIGN .)
    MINUSMINUS      reduce using rule 62 (assignment_operator -> TIMESASSIGN .)
    LPAREN          reduce using rule 62 (assignment_operator -> TIMESASSIGN .)
    ADDRESS         reduce using rule 62 (assignment_operator -> TIMESASSIGN .)
    TIMES           reduce using rule 62 (assignment_operator -> TIMESASSIGN .)
    PLUS            reduce using rule 62 (assignment_operator -> TIMESASSIGN .)
    MINUS           reduce using rule 62 (assignment_operator -> TIMESASSIGN .)
    UNARYDIFF       reduce using rule 62 (assignment_operator -> TIMESASSIGN .)
    ID              reduce using rule 62 (assignment_operator -> TIMESASSIGN .)
    STRING          reduce using rule 62 (assignment_operator -> TIMESASSIGN .)
    INT_CONST       reduce using rule 62 (assignment_operator -> TIMESASSIGN .)
    FLOAT_CONST     reduce using rule 62 (assignment_operator -> TIMESASSIGN .)
    CHAR_CONST      reduce using rule 62 (assignment_operator -> TIMESASSIGN .)


state 109

    (63) assignment_operator -> DIVIDEASSIGN .

    PLUSPLUS        reduce using rule 63 (assignment_operator -> DIVIDEASSIGN .)
    MINUSMINUS      reduce using rule 63 (assignment_operator -> DIVIDEASSIGN .)
    LPAREN          reduce using rule 63 (assignment_operator -> DIVIDEASSIGN .)
    ADDRESS         reduce using rule 63 (assignment_operator -> DIVIDEASSIGN .)
    TIMES           reduce using rule 63 (assignment_operator -> DIVIDEASSIGN .)
    PLUS            reduce using rule 63 (assignment_operator -> DIVIDEASSIGN .)
    MINUS           reduce using rule 63 (assignment_operator -> DIVIDEASSIGN .)
    UNARYDIFF       reduce using rule 63 (assignment_operator -> DIVIDEASSIGN .)
    ID              reduce using rule 63 (assignment_operator -> DIVIDEASSIGN .)
    STRING          reduce using rule 63 (assignment_operator -> DIVIDEASSIGN .)
    INT_CONST       reduce using rule 63 (assignment_operator -> DIVIDEASSIGN .)
    FLOAT_CONST     reduce using rule 63 (assignment_operator -> DIVIDEASSIGN .)
    CHAR_CONST      reduce using rule 63 (assignment_operator -> DIVIDEASSIGN .)


state 110

    (64) assignment_operator -> MODASSIGN .

    PLUSPLUS        reduce using rule 64 (assignment_operator -> MODASSIGN .)
    MINUSMINUS      reduce using rule 64 (assignment_operator -> MODASSIGN .)
    LPAREN          reduce using rule 64 (assignment_operator -> MODASSIGN .)
    ADDRESS         reduce using rule 64 (assignment_operator -> MODASSIGN .)
    TIMES           reduce using rule 64 (assignment_operator -> MODASSIGN .)
    PLUS            reduce using rule 64 (assignment_operator -> MODASSIGN .)
    MINUS           reduce using rule 64 (assignment_operator -> MODASSIGN .)
    UNARYDIFF       reduce using rule 64 (assignment_operator -> MODASSIGN .)
    ID              reduce using rule 64 (assignment_operator -> MODASSIGN .)
    STRING          reduce using rule 64 (assignment_operator -> MODASSIGN .)
    INT_CONST       reduce using rule 64 (assignment_operator -> MODASSIGN .)
    FLOAT_CONST     reduce using rule 64 (assignment_operator -> MODASSIGN .)
    CHAR_CONST      reduce using rule 64 (assignment_operator -> MODASSIGN .)


state 111

    (65) assignment_operator -> PLUSASSIGN .

    PLUSPLUS        reduce using rule 65 (assignment_operator -> PLUSASSIGN .)
    MINUSMINUS      reduce using rule 65 (assignment_operator -> PLUSASSIGN .)
    LPAREN          reduce using rule 65 (assignment_operator -> PLUSASSIGN .)
    ADDRESS         reduce using rule 65 (assignment_operator -> PLUSASSIGN .)
    TIMES           reduce using rule 65 (assignment_operator -> PLUSASSIGN .)
    PLUS            reduce using rule 65 (assignment_operator -> PLUSASSIGN .)
    MINUS           reduce using rule 65 (assignment_operator -> PLUSASSIGN .)
    UNARYDIFF       reduce using rule 65 (assignment_operator -> PLUSASSIGN .)
    ID              reduce using rule 65 (assignment_operator -> PLUSASSIGN .)
    STRING          reduce using rule 65 (assignment_operator -> PLUSASSIGN .)
    INT_CONST       reduce using rule 65 (assignment_operator -> PLUSASSIGN .)
    FLOAT_CONST     reduce using rule 65 (assignment_operator -> PLUSASSIGN .)
    CHAR_CONST      reduce using rule 65 (assignment_operator -> PLUSASSIGN .)


state 112

    (66) assignment_operator -> MINUSASSIGN .

    PLUSPLUS        reduce using rule 66 (assignment_operator -> MINUSASSIGN .)
    MINUSMINUS      reduce using rule 66 (assignment_operator -> MINUSASSIGN .)
    LPAREN          reduce using rule 66 (assignment_operator -> MINUSASSIGN .)
    ADDRESS         reduce using rule 66 (assignment_operator -> MINUSASSIGN .)
    TIMES           reduce using rule 66 (assignment_operator -> MINUSASSIGN .)
    PLUS            reduce using rule 66 (assignment_operator -> MINUSASSIGN .)
    MINUS           reduce using rule 66 (assignment_operator -> MINUSASSIGN .)
    UNARYDIFF       reduce using rule 66 (assignment_operator -> MINUSASSIGN .)
    ID              reduce using rule 66 (assignment_operator -> MINUSASSIGN .)
    STRING          reduce using rule 66 (assignment_operator -> MINUSASSIGN .)
    INT_CONST       reduce using rule 66 (assignment_operator -> MINUSASSIGN .)
    FLOAT_CONST     reduce using rule 66 (assignment_operator -> MINUSASSIGN .)
    CHAR_CONST      reduce using rule 66 (assignment_operator -> MINUSASSIGN .)


state 113

    (92) compound_statement -> LBRACE declaration_list_opt statement_list_opt . RBRACE

    RBRACE          shift and go to state 160


state 114

    (93) statement_list_opt -> statement . statement_list_opt
    (93) statement_list_opt -> . statement statement_list_opt
    (94) statement_list_opt -> . empty
    (95) statement -> . expression_statement
    (96) statement -> . compound_statement
    (97) statement -> . selection_statement
    (98) statement -> . iteration_statement
    (99) statement -> . jump_statement
    (100) statement -> . assert_statement
    (101) statement -> . print_statement
    (102) statement -> . read_statement
    (117) empty -> .
    (103) expression_statement -> . expression_opt SEMI
    (92) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (106) selection_statement -> . IF LPAREN expression RPAREN statement
    (107) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (108) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (109) iteration_statement -> . FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (110) iteration_statement -> . FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (111) jump_statement -> . BREAK SEMI
    (112) jump_statement -> . RETURN SEMI
    (113) jump_statement -> . RETURN expression SEMI
    (114) assert_statement -> . ASSERT expression SEMI
    (115) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (116) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (104) expression_opt -> . expression
    (105) expression_opt -> . empty
    (56) expression -> . assignment_expression
    (57) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    RBRACE          reduce using rule 117 (empty -> .)
    SEMI            reduce using rule 117 (empty -> .)
    LBRACE          shift and go to state 32
    IF              shift and go to state 125
    WHILE           shift and go to state 127
    FOR             shift and go to state 128
    BREAK           shift and go to state 129
    RETURN          shift and go to state 130
    ASSERT          shift and go to state 131
    PRINT           shift and go to state 132
    READ            shift and go to state 133
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    statement                      shift and go to state 114
    statement_list_opt             shift and go to state 161
    empty                          shift and go to state 115
    expression_statement           shift and go to state 116
    compound_statement             shift and go to state 117
    selection_statement            shift and go to state 118
    iteration_statement            shift and go to state 119
    jump_statement                 shift and go to state 120
    assert_statement               shift and go to state 121
    print_statement                shift and go to state 122
    read_statement                 shift and go to state 123
    expression_opt                 shift and go to state 124
    expression                     shift and go to state 126
    assignment_expression          shift and go to state 91
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 115

    (94) statement_list_opt -> empty .
    (105) expression_opt -> empty .

    RBRACE          reduce using rule 94 (statement_list_opt -> empty .)
    SEMI            reduce using rule 105 (expression_opt -> empty .)


state 116

    (95) statement -> expression_statement .

    LBRACE          reduce using rule 95 (statement -> expression_statement .)
    IF              reduce using rule 95 (statement -> expression_statement .)
    WHILE           reduce using rule 95 (statement -> expression_statement .)
    FOR             reduce using rule 95 (statement -> expression_statement .)
    BREAK           reduce using rule 95 (statement -> expression_statement .)
    RETURN          reduce using rule 95 (statement -> expression_statement .)
    ASSERT          reduce using rule 95 (statement -> expression_statement .)
    PRINT           reduce using rule 95 (statement -> expression_statement .)
    READ            reduce using rule 95 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 95 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 95 (statement -> expression_statement .)
    LPAREN          reduce using rule 95 (statement -> expression_statement .)
    ADDRESS         reduce using rule 95 (statement -> expression_statement .)
    TIMES           reduce using rule 95 (statement -> expression_statement .)
    PLUS            reduce using rule 95 (statement -> expression_statement .)
    MINUS           reduce using rule 95 (statement -> expression_statement .)
    UNARYDIFF       reduce using rule 95 (statement -> expression_statement .)
    ID              reduce using rule 95 (statement -> expression_statement .)
    STRING          reduce using rule 95 (statement -> expression_statement .)
    INT_CONST       reduce using rule 95 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 95 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 95 (statement -> expression_statement .)
    SEMI            reduce using rule 95 (statement -> expression_statement .)
    RBRACE          reduce using rule 95 (statement -> expression_statement .)
    ELSE            reduce using rule 95 (statement -> expression_statement .)


state 117

    (96) statement -> compound_statement .

    LBRACE          reduce using rule 96 (statement -> compound_statement .)
    IF              reduce using rule 96 (statement -> compound_statement .)
    WHILE           reduce using rule 96 (statement -> compound_statement .)
    FOR             reduce using rule 96 (statement -> compound_statement .)
    BREAK           reduce using rule 96 (statement -> compound_statement .)
    RETURN          reduce using rule 96 (statement -> compound_statement .)
    ASSERT          reduce using rule 96 (statement -> compound_statement .)
    PRINT           reduce using rule 96 (statement -> compound_statement .)
    READ            reduce using rule 96 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 96 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 96 (statement -> compound_statement .)
    LPAREN          reduce using rule 96 (statement -> compound_statement .)
    ADDRESS         reduce using rule 96 (statement -> compound_statement .)
    TIMES           reduce using rule 96 (statement -> compound_statement .)
    PLUS            reduce using rule 96 (statement -> compound_statement .)
    MINUS           reduce using rule 96 (statement -> compound_statement .)
    UNARYDIFF       reduce using rule 96 (statement -> compound_statement .)
    ID              reduce using rule 96 (statement -> compound_statement .)
    STRING          reduce using rule 96 (statement -> compound_statement .)
    INT_CONST       reduce using rule 96 (statement -> compound_statement .)
    FLOAT_CONST     reduce using rule 96 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 96 (statement -> compound_statement .)
    SEMI            reduce using rule 96 (statement -> compound_statement .)
    RBRACE          reduce using rule 96 (statement -> compound_statement .)
    ELSE            reduce using rule 96 (statement -> compound_statement .)


state 118

    (97) statement -> selection_statement .

    LBRACE          reduce using rule 97 (statement -> selection_statement .)
    IF              reduce using rule 97 (statement -> selection_statement .)
    WHILE           reduce using rule 97 (statement -> selection_statement .)
    FOR             reduce using rule 97 (statement -> selection_statement .)
    BREAK           reduce using rule 97 (statement -> selection_statement .)
    RETURN          reduce using rule 97 (statement -> selection_statement .)
    ASSERT          reduce using rule 97 (statement -> selection_statement .)
    PRINT           reduce using rule 97 (statement -> selection_statement .)
    READ            reduce using rule 97 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 97 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 97 (statement -> selection_statement .)
    LPAREN          reduce using rule 97 (statement -> selection_statement .)
    ADDRESS         reduce using rule 97 (statement -> selection_statement .)
    TIMES           reduce using rule 97 (statement -> selection_statement .)
    PLUS            reduce using rule 97 (statement -> selection_statement .)
    MINUS           reduce using rule 97 (statement -> selection_statement .)
    UNARYDIFF       reduce using rule 97 (statement -> selection_statement .)
    ID              reduce using rule 97 (statement -> selection_statement .)
    STRING          reduce using rule 97 (statement -> selection_statement .)
    INT_CONST       reduce using rule 97 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 97 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 97 (statement -> selection_statement .)
    SEMI            reduce using rule 97 (statement -> selection_statement .)
    RBRACE          reduce using rule 97 (statement -> selection_statement .)
    ELSE            reduce using rule 97 (statement -> selection_statement .)


state 119

    (98) statement -> iteration_statement .

    LBRACE          reduce using rule 98 (statement -> iteration_statement .)
    IF              reduce using rule 98 (statement -> iteration_statement .)
    WHILE           reduce using rule 98 (statement -> iteration_statement .)
    FOR             reduce using rule 98 (statement -> iteration_statement .)
    BREAK           reduce using rule 98 (statement -> iteration_statement .)
    RETURN          reduce using rule 98 (statement -> iteration_statement .)
    ASSERT          reduce using rule 98 (statement -> iteration_statement .)
    PRINT           reduce using rule 98 (statement -> iteration_statement .)
    READ            reduce using rule 98 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 98 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 98 (statement -> iteration_statement .)
    LPAREN          reduce using rule 98 (statement -> iteration_statement .)
    ADDRESS         reduce using rule 98 (statement -> iteration_statement .)
    TIMES           reduce using rule 98 (statement -> iteration_statement .)
    PLUS            reduce using rule 98 (statement -> iteration_statement .)
    MINUS           reduce using rule 98 (statement -> iteration_statement .)
    UNARYDIFF       reduce using rule 98 (statement -> iteration_statement .)
    ID              reduce using rule 98 (statement -> iteration_statement .)
    STRING          reduce using rule 98 (statement -> iteration_statement .)
    INT_CONST       reduce using rule 98 (statement -> iteration_statement .)
    FLOAT_CONST     reduce using rule 98 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 98 (statement -> iteration_statement .)
    SEMI            reduce using rule 98 (statement -> iteration_statement .)
    RBRACE          reduce using rule 98 (statement -> iteration_statement .)
    ELSE            reduce using rule 98 (statement -> iteration_statement .)


state 120

    (99) statement -> jump_statement .

    LBRACE          reduce using rule 99 (statement -> jump_statement .)
    IF              reduce using rule 99 (statement -> jump_statement .)
    WHILE           reduce using rule 99 (statement -> jump_statement .)
    FOR             reduce using rule 99 (statement -> jump_statement .)
    BREAK           reduce using rule 99 (statement -> jump_statement .)
    RETURN          reduce using rule 99 (statement -> jump_statement .)
    ASSERT          reduce using rule 99 (statement -> jump_statement .)
    PRINT           reduce using rule 99 (statement -> jump_statement .)
    READ            reduce using rule 99 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 99 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 99 (statement -> jump_statement .)
    LPAREN          reduce using rule 99 (statement -> jump_statement .)
    ADDRESS         reduce using rule 99 (statement -> jump_statement .)
    TIMES           reduce using rule 99 (statement -> jump_statement .)
    PLUS            reduce using rule 99 (statement -> jump_statement .)
    MINUS           reduce using rule 99 (statement -> jump_statement .)
    UNARYDIFF       reduce using rule 99 (statement -> jump_statement .)
    ID              reduce using rule 99 (statement -> jump_statement .)
    STRING          reduce using rule 99 (statement -> jump_statement .)
    INT_CONST       reduce using rule 99 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 99 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 99 (statement -> jump_statement .)
    SEMI            reduce using rule 99 (statement -> jump_statement .)
    RBRACE          reduce using rule 99 (statement -> jump_statement .)
    ELSE            reduce using rule 99 (statement -> jump_statement .)


state 121

    (100) statement -> assert_statement .

    LBRACE          reduce using rule 100 (statement -> assert_statement .)
    IF              reduce using rule 100 (statement -> assert_statement .)
    WHILE           reduce using rule 100 (statement -> assert_statement .)
    FOR             reduce using rule 100 (statement -> assert_statement .)
    BREAK           reduce using rule 100 (statement -> assert_statement .)
    RETURN          reduce using rule 100 (statement -> assert_statement .)
    ASSERT          reduce using rule 100 (statement -> assert_statement .)
    PRINT           reduce using rule 100 (statement -> assert_statement .)
    READ            reduce using rule 100 (statement -> assert_statement .)
    PLUSPLUS        reduce using rule 100 (statement -> assert_statement .)
    MINUSMINUS      reduce using rule 100 (statement -> assert_statement .)
    LPAREN          reduce using rule 100 (statement -> assert_statement .)
    ADDRESS         reduce using rule 100 (statement -> assert_statement .)
    TIMES           reduce using rule 100 (statement -> assert_statement .)
    PLUS            reduce using rule 100 (statement -> assert_statement .)
    MINUS           reduce using rule 100 (statement -> assert_statement .)
    UNARYDIFF       reduce using rule 100 (statement -> assert_statement .)
    ID              reduce using rule 100 (statement -> assert_statement .)
    STRING          reduce using rule 100 (statement -> assert_statement .)
    INT_CONST       reduce using rule 100 (statement -> assert_statement .)
    FLOAT_CONST     reduce using rule 100 (statement -> assert_statement .)
    CHAR_CONST      reduce using rule 100 (statement -> assert_statement .)
    SEMI            reduce using rule 100 (statement -> assert_statement .)
    RBRACE          reduce using rule 100 (statement -> assert_statement .)
    ELSE            reduce using rule 100 (statement -> assert_statement .)


state 122

    (101) statement -> print_statement .

    LBRACE          reduce using rule 101 (statement -> print_statement .)
    IF              reduce using rule 101 (statement -> print_statement .)
    WHILE           reduce using rule 101 (statement -> print_statement .)
    FOR             reduce using rule 101 (statement -> print_statement .)
    BREAK           reduce using rule 101 (statement -> print_statement .)
    RETURN          reduce using rule 101 (statement -> print_statement .)
    ASSERT          reduce using rule 101 (statement -> print_statement .)
    PRINT           reduce using rule 101 (statement -> print_statement .)
    READ            reduce using rule 101 (statement -> print_statement .)
    PLUSPLUS        reduce using rule 101 (statement -> print_statement .)
    MINUSMINUS      reduce using rule 101 (statement -> print_statement .)
    LPAREN          reduce using rule 101 (statement -> print_statement .)
    ADDRESS         reduce using rule 101 (statement -> print_statement .)
    TIMES           reduce using rule 101 (statement -> print_statement .)
    PLUS            reduce using rule 101 (statement -> print_statement .)
    MINUS           reduce using rule 101 (statement -> print_statement .)
    UNARYDIFF       reduce using rule 101 (statement -> print_statement .)
    ID              reduce using rule 101 (statement -> print_statement .)
    STRING          reduce using rule 101 (statement -> print_statement .)
    INT_CONST       reduce using rule 101 (statement -> print_statement .)
    FLOAT_CONST     reduce using rule 101 (statement -> print_statement .)
    CHAR_CONST      reduce using rule 101 (statement -> print_statement .)
    SEMI            reduce using rule 101 (statement -> print_statement .)
    RBRACE          reduce using rule 101 (statement -> print_statement .)
    ELSE            reduce using rule 101 (statement -> print_statement .)


state 123

    (102) statement -> read_statement .

    LBRACE          reduce using rule 102 (statement -> read_statement .)
    IF              reduce using rule 102 (statement -> read_statement .)
    WHILE           reduce using rule 102 (statement -> read_statement .)
    FOR             reduce using rule 102 (statement -> read_statement .)
    BREAK           reduce using rule 102 (statement -> read_statement .)
    RETURN          reduce using rule 102 (statement -> read_statement .)
    ASSERT          reduce using rule 102 (statement -> read_statement .)
    PRINT           reduce using rule 102 (statement -> read_statement .)
    READ            reduce using rule 102 (statement -> read_statement .)
    PLUSPLUS        reduce using rule 102 (statement -> read_statement .)
    MINUSMINUS      reduce using rule 102 (statement -> read_statement .)
    LPAREN          reduce using rule 102 (statement -> read_statement .)
    ADDRESS         reduce using rule 102 (statement -> read_statement .)
    TIMES           reduce using rule 102 (statement -> read_statement .)
    PLUS            reduce using rule 102 (statement -> read_statement .)
    MINUS           reduce using rule 102 (statement -> read_statement .)
    UNARYDIFF       reduce using rule 102 (statement -> read_statement .)
    ID              reduce using rule 102 (statement -> read_statement .)
    STRING          reduce using rule 102 (statement -> read_statement .)
    INT_CONST       reduce using rule 102 (statement -> read_statement .)
    FLOAT_CONST     reduce using rule 102 (statement -> read_statement .)
    CHAR_CONST      reduce using rule 102 (statement -> read_statement .)
    SEMI            reduce using rule 102 (statement -> read_statement .)
    RBRACE          reduce using rule 102 (statement -> read_statement .)
    ELSE            reduce using rule 102 (statement -> read_statement .)


state 124

    (103) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 162


state 125

    (106) selection_statement -> IF . LPAREN expression RPAREN statement
    (107) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 163


state 126

    (104) expression_opt -> expression .
    (57) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 104 (expression_opt -> expression .)
    RPAREN          reduce using rule 104 (expression_opt -> expression .)
    COMMA           shift and go to state 150


state 127

    (108) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 164


state 128

    (109) iteration_statement -> FOR . LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (110) iteration_statement -> FOR . LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement

    LPAREN          shift and go to state 165


state 129

    (111) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 166


state 130

    (112) jump_statement -> RETURN . SEMI
    (113) jump_statement -> RETURN . expression SEMI
    (56) expression -> . assignment_expression
    (57) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    SEMI            shift and go to state 167
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    expression                     shift and go to state 168
    assignment_expression          shift and go to state 91
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 131

    (114) assert_statement -> ASSERT . expression SEMI
    (56) expression -> . assignment_expression
    (57) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    expression                     shift and go to state 169
    assignment_expression          shift and go to state 91
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 132

    (115) print_statement -> PRINT . LPAREN expression_opt RPAREN SEMI

    LPAREN          shift and go to state 170


state 133

    (116) read_statement -> READ . LPAREN argument_expression RPAREN SEMI

    LPAREN          shift and go to state 171


state 134

    (22) binary_expression -> binary_expression TIMES binary_expression .
    (22) binary_expression -> binary_expression . TIMES binary_expression
    (23) binary_expression -> binary_expression . DIVIDE binary_expression
    (24) binary_expression -> binary_expression . MOD binary_expression
    (25) binary_expression -> binary_expression . PLUS binary_expression
    (26) binary_expression -> binary_expression . MINUS binary_expression
    (27) binary_expression -> binary_expression . LT binary_expression
    (28) binary_expression -> binary_expression . EQUALS binary_expression
    (29) binary_expression -> binary_expression . EQ binary_expression
    (30) binary_expression -> binary_expression . LE binary_expression
    (31) binary_expression -> binary_expression . HT binary_expression
    (32) binary_expression -> binary_expression . HE binary_expression
    (33) binary_expression -> binary_expression . DIFF binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 22 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 22 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 22 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 22 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 22 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 22 (binary_expression -> binary_expression TIMES binary_expression .)
    EQUALS          reduce using rule 22 (binary_expression -> binary_expression TIMES binary_expression .)
    EQ              reduce using rule 22 (binary_expression -> binary_expression TIMES binary_expression .)
    LE              reduce using rule 22 (binary_expression -> binary_expression TIMES binary_expression .)
    HT              reduce using rule 22 (binary_expression -> binary_expression TIMES binary_expression .)
    HE              reduce using rule 22 (binary_expression -> binary_expression TIMES binary_expression .)
    DIFF            reduce using rule 22 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 22 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 22 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 22 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 22 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 22 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 22 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 22 (binary_expression -> binary_expression TIMES binary_expression .)

  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 76 ]
  ! MOD             [ shift and go to state 77 ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! EQUALS          [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! LE              [ shift and go to state 83 ]
  ! HT              [ shift and go to state 84 ]
  ! HE              [ shift and go to state 85 ]
  ! DIFF            [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 135

    (23) binary_expression -> binary_expression DIVIDE binary_expression .
    (22) binary_expression -> binary_expression . TIMES binary_expression
    (23) binary_expression -> binary_expression . DIVIDE binary_expression
    (24) binary_expression -> binary_expression . MOD binary_expression
    (25) binary_expression -> binary_expression . PLUS binary_expression
    (26) binary_expression -> binary_expression . MINUS binary_expression
    (27) binary_expression -> binary_expression . LT binary_expression
    (28) binary_expression -> binary_expression . EQUALS binary_expression
    (29) binary_expression -> binary_expression . EQ binary_expression
    (30) binary_expression -> binary_expression . LE binary_expression
    (31) binary_expression -> binary_expression . HT binary_expression
    (32) binary_expression -> binary_expression . HE binary_expression
    (33) binary_expression -> binary_expression . DIFF binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 23 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 23 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 23 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 23 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 23 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LT              reduce using rule 23 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQUALS          reduce using rule 23 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQ              reduce using rule 23 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LE              reduce using rule 23 (binary_expression -> binary_expression DIVIDE binary_expression .)
    HT              reduce using rule 23 (binary_expression -> binary_expression DIVIDE binary_expression .)
    HE              reduce using rule 23 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIFF            reduce using rule 23 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 23 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 23 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACKET        reduce using rule 23 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COMMA           reduce using rule 23 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SEMI            reduce using rule 23 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 23 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACE          reduce using rule 23 (binary_expression -> binary_expression DIVIDE binary_expression .)

  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 76 ]
  ! MOD             [ shift and go to state 77 ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! EQUALS          [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! LE              [ shift and go to state 83 ]
  ! HT              [ shift and go to state 84 ]
  ! HE              [ shift and go to state 85 ]
  ! DIFF            [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 136

    (24) binary_expression -> binary_expression MOD binary_expression .
    (22) binary_expression -> binary_expression . TIMES binary_expression
    (23) binary_expression -> binary_expression . DIVIDE binary_expression
    (24) binary_expression -> binary_expression . MOD binary_expression
    (25) binary_expression -> binary_expression . PLUS binary_expression
    (26) binary_expression -> binary_expression . MINUS binary_expression
    (27) binary_expression -> binary_expression . LT binary_expression
    (28) binary_expression -> binary_expression . EQUALS binary_expression
    (29) binary_expression -> binary_expression . EQ binary_expression
    (30) binary_expression -> binary_expression . LE binary_expression
    (31) binary_expression -> binary_expression . HT binary_expression
    (32) binary_expression -> binary_expression . HE binary_expression
    (33) binary_expression -> binary_expression . DIFF binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 24 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 24 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 24 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 24 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 24 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 24 (binary_expression -> binary_expression MOD binary_expression .)
    EQUALS          reduce using rule 24 (binary_expression -> binary_expression MOD binary_expression .)
    EQ              reduce using rule 24 (binary_expression -> binary_expression MOD binary_expression .)
    LE              reduce using rule 24 (binary_expression -> binary_expression MOD binary_expression .)
    HT              reduce using rule 24 (binary_expression -> binary_expression MOD binary_expression .)
    HE              reduce using rule 24 (binary_expression -> binary_expression MOD binary_expression .)
    DIFF            reduce using rule 24 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 24 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 24 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 24 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 24 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 24 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 24 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 24 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 76 ]
  ! MOD             [ shift and go to state 77 ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! EQUALS          [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! LE              [ shift and go to state 83 ]
  ! HT              [ shift and go to state 84 ]
  ! HE              [ shift and go to state 85 ]
  ! DIFF            [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 137

    (25) binary_expression -> binary_expression PLUS binary_expression .
    (22) binary_expression -> binary_expression . TIMES binary_expression
    (23) binary_expression -> binary_expression . DIVIDE binary_expression
    (24) binary_expression -> binary_expression . MOD binary_expression
    (25) binary_expression -> binary_expression . PLUS binary_expression
    (26) binary_expression -> binary_expression . MINUS binary_expression
    (27) binary_expression -> binary_expression . LT binary_expression
    (28) binary_expression -> binary_expression . EQUALS binary_expression
    (29) binary_expression -> binary_expression . EQ binary_expression
    (30) binary_expression -> binary_expression . LE binary_expression
    (31) binary_expression -> binary_expression . HT binary_expression
    (32) binary_expression -> binary_expression . HE binary_expression
    (33) binary_expression -> binary_expression . DIFF binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 25 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 25 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 25 (binary_expression -> binary_expression PLUS binary_expression .)
    EQUALS          reduce using rule 25 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 25 (binary_expression -> binary_expression PLUS binary_expression .)
    LE              reduce using rule 25 (binary_expression -> binary_expression PLUS binary_expression .)
    HT              reduce using rule 25 (binary_expression -> binary_expression PLUS binary_expression .)
    HE              reduce using rule 25 (binary_expression -> binary_expression PLUS binary_expression .)
    DIFF            reduce using rule 25 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 25 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 25 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 25 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 25 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 25 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 25 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 25 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77

  ! TIMES           [ reduce using rule 25 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 25 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 25 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! EQUALS          [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! LE              [ shift and go to state 83 ]
  ! HT              [ shift and go to state 84 ]
  ! HE              [ shift and go to state 85 ]
  ! DIFF            [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 138

    (26) binary_expression -> binary_expression MINUS binary_expression .
    (22) binary_expression -> binary_expression . TIMES binary_expression
    (23) binary_expression -> binary_expression . DIVIDE binary_expression
    (24) binary_expression -> binary_expression . MOD binary_expression
    (25) binary_expression -> binary_expression . PLUS binary_expression
    (26) binary_expression -> binary_expression . MINUS binary_expression
    (27) binary_expression -> binary_expression . LT binary_expression
    (28) binary_expression -> binary_expression . EQUALS binary_expression
    (29) binary_expression -> binary_expression . EQ binary_expression
    (30) binary_expression -> binary_expression . LE binary_expression
    (31) binary_expression -> binary_expression . HT binary_expression
    (32) binary_expression -> binary_expression . HE binary_expression
    (33) binary_expression -> binary_expression . DIFF binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 26 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 26 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 26 (binary_expression -> binary_expression MINUS binary_expression .)
    EQUALS          reduce using rule 26 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 26 (binary_expression -> binary_expression MINUS binary_expression .)
    LE              reduce using rule 26 (binary_expression -> binary_expression MINUS binary_expression .)
    HT              reduce using rule 26 (binary_expression -> binary_expression MINUS binary_expression .)
    HE              reduce using rule 26 (binary_expression -> binary_expression MINUS binary_expression .)
    DIFF            reduce using rule 26 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 26 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 26 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 26 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 26 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 26 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 26 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 26 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77

  ! TIMES           [ reduce using rule 26 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 26 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 26 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! EQUALS          [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! LE              [ shift and go to state 83 ]
  ! HT              [ shift and go to state 84 ]
  ! HE              [ shift and go to state 85 ]
  ! DIFF            [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 139

    (27) binary_expression -> binary_expression LT binary_expression .
    (22) binary_expression -> binary_expression . TIMES binary_expression
    (23) binary_expression -> binary_expression . DIVIDE binary_expression
    (24) binary_expression -> binary_expression . MOD binary_expression
    (25) binary_expression -> binary_expression . PLUS binary_expression
    (26) binary_expression -> binary_expression . MINUS binary_expression
    (27) binary_expression -> binary_expression . LT binary_expression
    (28) binary_expression -> binary_expression . EQUALS binary_expression
    (29) binary_expression -> binary_expression . EQ binary_expression
    (30) binary_expression -> binary_expression . LE binary_expression
    (31) binary_expression -> binary_expression . HT binary_expression
    (32) binary_expression -> binary_expression . HE binary_expression
    (33) binary_expression -> binary_expression . DIFF binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 27 (binary_expression -> binary_expression LT binary_expression .)
    EQUALS          reduce using rule 27 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 27 (binary_expression -> binary_expression LT binary_expression .)
    LE              reduce using rule 27 (binary_expression -> binary_expression LT binary_expression .)
    HT              reduce using rule 27 (binary_expression -> binary_expression LT binary_expression .)
    HE              reduce using rule 27 (binary_expression -> binary_expression LT binary_expression .)
    DIFF            reduce using rule 27 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 27 (binary_expression -> binary_expression LT binary_expression .)
    OR              reduce using rule 27 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 27 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 27 (binary_expression -> binary_expression LT binary_expression .)
    SEMI            reduce using rule 27 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 27 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 27 (binary_expression -> binary_expression LT binary_expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79

  ! TIMES           [ reduce using rule 27 (binary_expression -> binary_expression LT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 27 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MOD             [ reduce using rule 27 (binary_expression -> binary_expression LT binary_expression .) ]
  ! PLUS            [ reduce using rule 27 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 27 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LT              [ shift and go to state 80 ]
  ! EQUALS          [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! LE              [ shift and go to state 83 ]
  ! HT              [ shift and go to state 84 ]
  ! HE              [ shift and go to state 85 ]
  ! DIFF            [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 140

    (28) binary_expression -> binary_expression EQUALS binary_expression .
    (22) binary_expression -> binary_expression . TIMES binary_expression
    (23) binary_expression -> binary_expression . DIVIDE binary_expression
    (24) binary_expression -> binary_expression . MOD binary_expression
    (25) binary_expression -> binary_expression . PLUS binary_expression
    (26) binary_expression -> binary_expression . MINUS binary_expression
    (27) binary_expression -> binary_expression . LT binary_expression
    (28) binary_expression -> binary_expression . EQUALS binary_expression
    (29) binary_expression -> binary_expression . EQ binary_expression
    (30) binary_expression -> binary_expression . LE binary_expression
    (31) binary_expression -> binary_expression . HT binary_expression
    (32) binary_expression -> binary_expression . HE binary_expression
    (33) binary_expression -> binary_expression . DIFF binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    EQUALS          reduce using rule 28 (binary_expression -> binary_expression EQUALS binary_expression .)
    AND             reduce using rule 28 (binary_expression -> binary_expression EQUALS binary_expression .)
    OR              reduce using rule 28 (binary_expression -> binary_expression EQUALS binary_expression .)
    RBRACKET        reduce using rule 28 (binary_expression -> binary_expression EQUALS binary_expression .)
    COMMA           reduce using rule 28 (binary_expression -> binary_expression EQUALS binary_expression .)
    SEMI            reduce using rule 28 (binary_expression -> binary_expression EQUALS binary_expression .)
    RPAREN          reduce using rule 28 (binary_expression -> binary_expression EQUALS binary_expression .)
    RBRACE          reduce using rule 28 (binary_expression -> binary_expression EQUALS binary_expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    LT              shift and go to state 80
    EQ              shift and go to state 82
    LE              shift and go to state 83
    HT              shift and go to state 84
    HE              shift and go to state 85
    DIFF            shift and go to state 86

  ! TIMES           [ reduce using rule 28 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 28 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! MOD             [ reduce using rule 28 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! PLUS            [ reduce using rule 28 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! MINUS           [ reduce using rule 28 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! LT              [ reduce using rule 28 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! EQ              [ reduce using rule 28 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! LE              [ reduce using rule 28 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! HT              [ reduce using rule 28 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! HE              [ reduce using rule 28 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! DIFF            [ reduce using rule 28 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! EQUALS          [ shift and go to state 81 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 141

    (29) binary_expression -> binary_expression EQ binary_expression .
    (22) binary_expression -> binary_expression . TIMES binary_expression
    (23) binary_expression -> binary_expression . DIVIDE binary_expression
    (24) binary_expression -> binary_expression . MOD binary_expression
    (25) binary_expression -> binary_expression . PLUS binary_expression
    (26) binary_expression -> binary_expression . MINUS binary_expression
    (27) binary_expression -> binary_expression . LT binary_expression
    (28) binary_expression -> binary_expression . EQUALS binary_expression
    (29) binary_expression -> binary_expression . EQ binary_expression
    (30) binary_expression -> binary_expression . LE binary_expression
    (31) binary_expression -> binary_expression . HT binary_expression
    (32) binary_expression -> binary_expression . HE binary_expression
    (33) binary_expression -> binary_expression . DIFF binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    EQUALS          reduce using rule 29 (binary_expression -> binary_expression EQ binary_expression .)
    EQ              reduce using rule 29 (binary_expression -> binary_expression EQ binary_expression .)
    DIFF            reduce using rule 29 (binary_expression -> binary_expression EQ binary_expression .)
    AND             reduce using rule 29 (binary_expression -> binary_expression EQ binary_expression .)
    OR              reduce using rule 29 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACKET        reduce using rule 29 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 29 (binary_expression -> binary_expression EQ binary_expression .)
    SEMI            reduce using rule 29 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 29 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 29 (binary_expression -> binary_expression EQ binary_expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    LT              shift and go to state 80
    LE              shift and go to state 83
    HT              shift and go to state 84
    HE              shift and go to state 85

  ! TIMES           [ reduce using rule 29 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 29 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MOD             [ reduce using rule 29 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! PLUS            [ reduce using rule 29 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MINUS           [ reduce using rule 29 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LT              [ reduce using rule 29 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LE              [ reduce using rule 29 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! HT              [ reduce using rule 29 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! HE              [ reduce using rule 29 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! EQUALS          [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! DIFF            [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 142

    (30) binary_expression -> binary_expression LE binary_expression .
    (22) binary_expression -> binary_expression . TIMES binary_expression
    (23) binary_expression -> binary_expression . DIVIDE binary_expression
    (24) binary_expression -> binary_expression . MOD binary_expression
    (25) binary_expression -> binary_expression . PLUS binary_expression
    (26) binary_expression -> binary_expression . MINUS binary_expression
    (27) binary_expression -> binary_expression . LT binary_expression
    (28) binary_expression -> binary_expression . EQUALS binary_expression
    (29) binary_expression -> binary_expression . EQ binary_expression
    (30) binary_expression -> binary_expression . LE binary_expression
    (31) binary_expression -> binary_expression . HT binary_expression
    (32) binary_expression -> binary_expression . HE binary_expression
    (33) binary_expression -> binary_expression . DIFF binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 30 (binary_expression -> binary_expression LE binary_expression .)
    EQUALS          reduce using rule 30 (binary_expression -> binary_expression LE binary_expression .)
    EQ              reduce using rule 30 (binary_expression -> binary_expression LE binary_expression .)
    LE              reduce using rule 30 (binary_expression -> binary_expression LE binary_expression .)
    HT              reduce using rule 30 (binary_expression -> binary_expression LE binary_expression .)
    HE              reduce using rule 30 (binary_expression -> binary_expression LE binary_expression .)
    DIFF            reduce using rule 30 (binary_expression -> binary_expression LE binary_expression .)
    AND             reduce using rule 30 (binary_expression -> binary_expression LE binary_expression .)
    OR              reduce using rule 30 (binary_expression -> binary_expression LE binary_expression .)
    RBRACKET        reduce using rule 30 (binary_expression -> binary_expression LE binary_expression .)
    COMMA           reduce using rule 30 (binary_expression -> binary_expression LE binary_expression .)
    SEMI            reduce using rule 30 (binary_expression -> binary_expression LE binary_expression .)
    RPAREN          reduce using rule 30 (binary_expression -> binary_expression LE binary_expression .)
    RBRACE          reduce using rule 30 (binary_expression -> binary_expression LE binary_expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79

  ! TIMES           [ reduce using rule 30 (binary_expression -> binary_expression LE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 30 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MOD             [ reduce using rule 30 (binary_expression -> binary_expression LE binary_expression .) ]
  ! PLUS            [ reduce using rule 30 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MINUS           [ reduce using rule 30 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LT              [ shift and go to state 80 ]
  ! EQUALS          [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! LE              [ shift and go to state 83 ]
  ! HT              [ shift and go to state 84 ]
  ! HE              [ shift and go to state 85 ]
  ! DIFF            [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 143

    (31) binary_expression -> binary_expression HT binary_expression .
    (22) binary_expression -> binary_expression . TIMES binary_expression
    (23) binary_expression -> binary_expression . DIVIDE binary_expression
    (24) binary_expression -> binary_expression . MOD binary_expression
    (25) binary_expression -> binary_expression . PLUS binary_expression
    (26) binary_expression -> binary_expression . MINUS binary_expression
    (27) binary_expression -> binary_expression . LT binary_expression
    (28) binary_expression -> binary_expression . EQUALS binary_expression
    (29) binary_expression -> binary_expression . EQ binary_expression
    (30) binary_expression -> binary_expression . LE binary_expression
    (31) binary_expression -> binary_expression . HT binary_expression
    (32) binary_expression -> binary_expression . HE binary_expression
    (33) binary_expression -> binary_expression . DIFF binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 31 (binary_expression -> binary_expression HT binary_expression .)
    EQUALS          reduce using rule 31 (binary_expression -> binary_expression HT binary_expression .)
    EQ              reduce using rule 31 (binary_expression -> binary_expression HT binary_expression .)
    LE              reduce using rule 31 (binary_expression -> binary_expression HT binary_expression .)
    HT              reduce using rule 31 (binary_expression -> binary_expression HT binary_expression .)
    HE              reduce using rule 31 (binary_expression -> binary_expression HT binary_expression .)
    DIFF            reduce using rule 31 (binary_expression -> binary_expression HT binary_expression .)
    AND             reduce using rule 31 (binary_expression -> binary_expression HT binary_expression .)
    OR              reduce using rule 31 (binary_expression -> binary_expression HT binary_expression .)
    RBRACKET        reduce using rule 31 (binary_expression -> binary_expression HT binary_expression .)
    COMMA           reduce using rule 31 (binary_expression -> binary_expression HT binary_expression .)
    SEMI            reduce using rule 31 (binary_expression -> binary_expression HT binary_expression .)
    RPAREN          reduce using rule 31 (binary_expression -> binary_expression HT binary_expression .)
    RBRACE          reduce using rule 31 (binary_expression -> binary_expression HT binary_expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79

  ! TIMES           [ reduce using rule 31 (binary_expression -> binary_expression HT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 31 (binary_expression -> binary_expression HT binary_expression .) ]
  ! MOD             [ reduce using rule 31 (binary_expression -> binary_expression HT binary_expression .) ]
  ! PLUS            [ reduce using rule 31 (binary_expression -> binary_expression HT binary_expression .) ]
  ! MINUS           [ reduce using rule 31 (binary_expression -> binary_expression HT binary_expression .) ]
  ! LT              [ shift and go to state 80 ]
  ! EQUALS          [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! LE              [ shift and go to state 83 ]
  ! HT              [ shift and go to state 84 ]
  ! HE              [ shift and go to state 85 ]
  ! DIFF            [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 144

    (32) binary_expression -> binary_expression HE binary_expression .
    (22) binary_expression -> binary_expression . TIMES binary_expression
    (23) binary_expression -> binary_expression . DIVIDE binary_expression
    (24) binary_expression -> binary_expression . MOD binary_expression
    (25) binary_expression -> binary_expression . PLUS binary_expression
    (26) binary_expression -> binary_expression . MINUS binary_expression
    (27) binary_expression -> binary_expression . LT binary_expression
    (28) binary_expression -> binary_expression . EQUALS binary_expression
    (29) binary_expression -> binary_expression . EQ binary_expression
    (30) binary_expression -> binary_expression . LE binary_expression
    (31) binary_expression -> binary_expression . HT binary_expression
    (32) binary_expression -> binary_expression . HE binary_expression
    (33) binary_expression -> binary_expression . DIFF binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 32 (binary_expression -> binary_expression HE binary_expression .)
    EQUALS          reduce using rule 32 (binary_expression -> binary_expression HE binary_expression .)
    EQ              reduce using rule 32 (binary_expression -> binary_expression HE binary_expression .)
    LE              reduce using rule 32 (binary_expression -> binary_expression HE binary_expression .)
    HT              reduce using rule 32 (binary_expression -> binary_expression HE binary_expression .)
    HE              reduce using rule 32 (binary_expression -> binary_expression HE binary_expression .)
    DIFF            reduce using rule 32 (binary_expression -> binary_expression HE binary_expression .)
    AND             reduce using rule 32 (binary_expression -> binary_expression HE binary_expression .)
    OR              reduce using rule 32 (binary_expression -> binary_expression HE binary_expression .)
    RBRACKET        reduce using rule 32 (binary_expression -> binary_expression HE binary_expression .)
    COMMA           reduce using rule 32 (binary_expression -> binary_expression HE binary_expression .)
    SEMI            reduce using rule 32 (binary_expression -> binary_expression HE binary_expression .)
    RPAREN          reduce using rule 32 (binary_expression -> binary_expression HE binary_expression .)
    RBRACE          reduce using rule 32 (binary_expression -> binary_expression HE binary_expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79

  ! TIMES           [ reduce using rule 32 (binary_expression -> binary_expression HE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 32 (binary_expression -> binary_expression HE binary_expression .) ]
  ! MOD             [ reduce using rule 32 (binary_expression -> binary_expression HE binary_expression .) ]
  ! PLUS            [ reduce using rule 32 (binary_expression -> binary_expression HE binary_expression .) ]
  ! MINUS           [ reduce using rule 32 (binary_expression -> binary_expression HE binary_expression .) ]
  ! LT              [ shift and go to state 80 ]
  ! EQUALS          [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! LE              [ shift and go to state 83 ]
  ! HT              [ shift and go to state 84 ]
  ! HE              [ shift and go to state 85 ]
  ! DIFF            [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 145

    (33) binary_expression -> binary_expression DIFF binary_expression .
    (22) binary_expression -> binary_expression . TIMES binary_expression
    (23) binary_expression -> binary_expression . DIVIDE binary_expression
    (24) binary_expression -> binary_expression . MOD binary_expression
    (25) binary_expression -> binary_expression . PLUS binary_expression
    (26) binary_expression -> binary_expression . MINUS binary_expression
    (27) binary_expression -> binary_expression . LT binary_expression
    (28) binary_expression -> binary_expression . EQUALS binary_expression
    (29) binary_expression -> binary_expression . EQ binary_expression
    (30) binary_expression -> binary_expression . LE binary_expression
    (31) binary_expression -> binary_expression . HT binary_expression
    (32) binary_expression -> binary_expression . HE binary_expression
    (33) binary_expression -> binary_expression . DIFF binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    EQUALS          reduce using rule 33 (binary_expression -> binary_expression DIFF binary_expression .)
    EQ              reduce using rule 33 (binary_expression -> binary_expression DIFF binary_expression .)
    DIFF            reduce using rule 33 (binary_expression -> binary_expression DIFF binary_expression .)
    AND             reduce using rule 33 (binary_expression -> binary_expression DIFF binary_expression .)
    OR              reduce using rule 33 (binary_expression -> binary_expression DIFF binary_expression .)
    RBRACKET        reduce using rule 33 (binary_expression -> binary_expression DIFF binary_expression .)
    COMMA           reduce using rule 33 (binary_expression -> binary_expression DIFF binary_expression .)
    SEMI            reduce using rule 33 (binary_expression -> binary_expression DIFF binary_expression .)
    RPAREN          reduce using rule 33 (binary_expression -> binary_expression DIFF binary_expression .)
    RBRACE          reduce using rule 33 (binary_expression -> binary_expression DIFF binary_expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    LT              shift and go to state 80
    LE              shift and go to state 83
    HT              shift and go to state 84
    HE              shift and go to state 85

  ! TIMES           [ reduce using rule 33 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! DIVIDE          [ reduce using rule 33 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! MOD             [ reduce using rule 33 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! PLUS            [ reduce using rule 33 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! MINUS           [ reduce using rule 33 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! LT              [ reduce using rule 33 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! LE              [ reduce using rule 33 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! HT              [ reduce using rule 33 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! HE              [ reduce using rule 33 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! EQUALS          [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! DIFF            [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 146

    (34) binary_expression -> binary_expression AND binary_expression .
    (22) binary_expression -> binary_expression . TIMES binary_expression
    (23) binary_expression -> binary_expression . DIVIDE binary_expression
    (24) binary_expression -> binary_expression . MOD binary_expression
    (25) binary_expression -> binary_expression . PLUS binary_expression
    (26) binary_expression -> binary_expression . MINUS binary_expression
    (27) binary_expression -> binary_expression . LT binary_expression
    (28) binary_expression -> binary_expression . EQUALS binary_expression
    (29) binary_expression -> binary_expression . EQ binary_expression
    (30) binary_expression -> binary_expression . LE binary_expression
    (31) binary_expression -> binary_expression . HT binary_expression
    (32) binary_expression -> binary_expression . HE binary_expression
    (33) binary_expression -> binary_expression . DIFF binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    EQUALS          reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    AND             reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    LT              shift and go to state 80
    EQ              shift and go to state 82
    LE              shift and go to state 83
    HT              shift and go to state 84
    HE              shift and go to state 85
    DIFF            shift and go to state 86

  ! TIMES           [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LT              [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQ              [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LE              [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! HT              [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! HE              [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIFF            [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQUALS          [ shift and go to state 81 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 147

    (35) binary_expression -> binary_expression OR binary_expression .
    (22) binary_expression -> binary_expression . TIMES binary_expression
    (23) binary_expression -> binary_expression . DIVIDE binary_expression
    (24) binary_expression -> binary_expression . MOD binary_expression
    (25) binary_expression -> binary_expression . PLUS binary_expression
    (26) binary_expression -> binary_expression . MINUS binary_expression
    (27) binary_expression -> binary_expression . LT binary_expression
    (28) binary_expression -> binary_expression . EQUALS binary_expression
    (29) binary_expression -> binary_expression . EQ binary_expression
    (30) binary_expression -> binary_expression . LE binary_expression
    (31) binary_expression -> binary_expression . HT binary_expression
    (32) binary_expression -> binary_expression . HE binary_expression
    (33) binary_expression -> binary_expression . DIFF binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    OR              reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    LT              shift and go to state 80
    EQUALS          shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    HT              shift and go to state 84
    HE              shift and go to state 85
    DIFF            shift and go to state 86
    AND             shift and go to state 87

  ! TIMES           [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LT              [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQUALS          [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQ              [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LE              [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! HT              [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! HE              [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIFF            [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! OR              [ shift and go to state 88 ]


state 148

    (37) cast_expression -> LPAREN type_specifier RPAREN . cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    cast_expression                shift and go to state 172
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 149

    (52) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    HT              reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    HE              reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    DIFF            reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    TIMESASSIGN     reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDEASSIGN    reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    MODASSIGN       reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    PLUSASSIGN      reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    MINUSASSIGN     reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 52 (primary_expression -> LPAREN expression RPAREN .)


state 150

    (57) expression -> expression COMMA . assignment_expression
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    assignment_expression          shift and go to state 173
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 151

    (43) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (57) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 174
    COMMA           shift and go to state 150


state 152

    (44) postfix_expression -> postfix_expression LPAREN argument_expression_opt . RPAREN

    RPAREN          shift and go to state 175


state 153

    (47) argument_expression_opt -> argument_expression .
    (59) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          reduce using rule 47 (argument_expression_opt -> argument_expression .)
    COMMA           shift and go to state 176


state 154

    (48) argument_expression_opt -> empty .

    RPAREN          reduce using rule 48 (argument_expression_opt -> empty .)


state 155

    (58) argument_expression -> assignment_expression .

    COMMA           reduce using rule 58 (argument_expression -> assignment_expression .)
    RPAREN          reduce using rule 58 (argument_expression -> assignment_expression .)


state 156

    (77) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 77 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 77 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 157

    (88) initializer -> LBRACE initializer_list RBRACE .

    COMMA           reduce using rule 88 (initializer -> LBRACE initializer_list RBRACE .)
    SEMI            reduce using rule 88 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 88 (initializer -> LBRACE initializer_list RBRACE .)


state 158

    (89) initializer -> LBRACE initializer_list COMMA . RBRACE
    (91) initializer_list -> initializer_list COMMA . initializer
    (87) initializer -> . assignment_expression
    (88) initializer -> . LBRACE initializer_list RBRACE
    (89) initializer -> . LBRACE initializer_list COMMA RBRACE
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    RBRACE          shift and go to state 177
    LBRACE          shift and go to state 69
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    initializer                    shift and go to state 178
    assignment_expression          shift and go to state 68
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 159

    (61) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COMMA           reduce using rule 61 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 61 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 61 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 61 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 61 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 160

    (92) compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .

    VOID            reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    CHAR            reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    INT             reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    FLOAT           reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    ID              reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    LPAREN          reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    $end            reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    LBRACE          reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    IF              reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    WHILE           reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    FOR             reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    BREAK           reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    RETURN          reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    ASSERT          reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    PRINT           reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    READ            reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    PLUSPLUS        reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    MINUSMINUS      reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    ADDRESS         reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    TIMES           reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    PLUS            reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    MINUS           reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    UNARYDIFF       reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    STRING          reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    INT_CONST       reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    FLOAT_CONST     reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    CHAR_CONST      reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    SEMI            reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    RBRACE          reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    ELSE            reduce using rule 92 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)


state 161

    (93) statement_list_opt -> statement statement_list_opt .

    RBRACE          reduce using rule 93 (statement_list_opt -> statement statement_list_opt .)


state 162

    (103) expression_statement -> expression_opt SEMI .

    LBRACE          reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    IF              reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    ASSERT          reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    PRINT           reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    READ            reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    PLUSPLUS        reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    MINUSMINUS      reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    ADDRESS         reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    TIMES           reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    PLUS            reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    MINUS           reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    UNARYDIFF       reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    ID              reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    STRING          reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    INT_CONST       reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    FLOAT_CONST     reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    CHAR_CONST      reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    RBRACE          reduce using rule 103 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 103 (expression_statement -> expression_opt SEMI .)


state 163

    (106) selection_statement -> IF LPAREN . expression RPAREN statement
    (107) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (56) expression -> . assignment_expression
    (57) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    expression                     shift and go to state 179
    assignment_expression          shift and go to state 91
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 164

    (108) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (56) expression -> . assignment_expression
    (57) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    expression                     shift and go to state 180
    assignment_expression          shift and go to state 91
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 165

    (109) iteration_statement -> FOR LPAREN . init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (110) iteration_statement -> FOR LPAREN . type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (85) init_declarator -> . declarator
    (86) init_declarator -> . declarator EQUALS initializer
    (72) type_specifier -> . VOID
    (73) type_specifier -> . CHAR
    (74) type_specifier -> . INT
    (75) type_specifier -> . FLOAT
    (10) declarator -> . direct_declarator
    (11) direct_declarator -> . ID
    (12) direct_declarator -> . LPAREN declarator RPAREN
    (13) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (14) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (15) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 14
    LPAREN          shift and go to state 15

    init_declarator                shift and go to state 181
    type_specifier                 shift and go to state 182
    declarator                     shift and go to state 36
    direct_declarator              shift and go to state 13

state 166

    (111) jump_statement -> BREAK SEMI .

    LBRACE          reduce using rule 111 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 111 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 111 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 111 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 111 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 111 (jump_statement -> BREAK SEMI .)
    ASSERT          reduce using rule 111 (jump_statement -> BREAK SEMI .)
    PRINT           reduce using rule 111 (jump_statement -> BREAK SEMI .)
    READ            reduce using rule 111 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 111 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 111 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 111 (jump_statement -> BREAK SEMI .)
    ADDRESS         reduce using rule 111 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 111 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 111 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 111 (jump_statement -> BREAK SEMI .)
    UNARYDIFF       reduce using rule 111 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 111 (jump_statement -> BREAK SEMI .)
    STRING          reduce using rule 111 (jump_statement -> BREAK SEMI .)
    INT_CONST       reduce using rule 111 (jump_statement -> BREAK SEMI .)
    FLOAT_CONST     reduce using rule 111 (jump_statement -> BREAK SEMI .)
    CHAR_CONST      reduce using rule 111 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 111 (jump_statement -> BREAK SEMI .)
    RBRACE          reduce using rule 111 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 111 (jump_statement -> BREAK SEMI .)


state 167

    (112) jump_statement -> RETURN SEMI .

    LBRACE          reduce using rule 112 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 112 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 112 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 112 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 112 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 112 (jump_statement -> RETURN SEMI .)
    ASSERT          reduce using rule 112 (jump_statement -> RETURN SEMI .)
    PRINT           reduce using rule 112 (jump_statement -> RETURN SEMI .)
    READ            reduce using rule 112 (jump_statement -> RETURN SEMI .)
    PLUSPLUS        reduce using rule 112 (jump_statement -> RETURN SEMI .)
    MINUSMINUS      reduce using rule 112 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 112 (jump_statement -> RETURN SEMI .)
    ADDRESS         reduce using rule 112 (jump_statement -> RETURN SEMI .)
    TIMES           reduce using rule 112 (jump_statement -> RETURN SEMI .)
    PLUS            reduce using rule 112 (jump_statement -> RETURN SEMI .)
    MINUS           reduce using rule 112 (jump_statement -> RETURN SEMI .)
    UNARYDIFF       reduce using rule 112 (jump_statement -> RETURN SEMI .)
    ID              reduce using rule 112 (jump_statement -> RETURN SEMI .)
    STRING          reduce using rule 112 (jump_statement -> RETURN SEMI .)
    INT_CONST       reduce using rule 112 (jump_statement -> RETURN SEMI .)
    FLOAT_CONST     reduce using rule 112 (jump_statement -> RETURN SEMI .)
    CHAR_CONST      reduce using rule 112 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 112 (jump_statement -> RETURN SEMI .)
    RBRACE          reduce using rule 112 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 112 (jump_statement -> RETURN SEMI .)


state 168

    (113) jump_statement -> RETURN expression . SEMI
    (57) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 183
    COMMA           shift and go to state 150


state 169

    (114) assert_statement -> ASSERT expression . SEMI
    (57) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 184
    COMMA           shift and go to state 150


state 170

    (115) print_statement -> PRINT LPAREN . expression_opt RPAREN SEMI
    (104) expression_opt -> . expression
    (105) expression_opt -> . empty
    (56) expression -> . assignment_expression
    (57) expression -> . expression COMMA assignment_expression
    (117) empty -> .
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    RPAREN          reduce using rule 117 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    expression_opt                 shift and go to state 185
    expression                     shift and go to state 126
    empty                          shift and go to state 186
    assignment_expression          shift and go to state 91
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 171

    (116) read_statement -> READ LPAREN . argument_expression RPAREN SEMI
    (58) argument_expression -> . assignment_expression
    (59) argument_expression -> . argument_expression COMMA assignment_expression
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    argument_expression            shift and go to state 187
    assignment_expression          shift and go to state 155
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 172

    (37) cast_expression -> LPAREN type_specifier RPAREN cast_expression .

    TIMES           reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDE          reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MOD             reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUS            reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS           reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LT              reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQUALS          reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQ              reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LE              reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    HT              reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    HE              reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIFF            reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    AND             reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    OR              reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACKET        reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    COMMA           reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SEMI            reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RPAREN          reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    TIMESASSIGN     reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDEASSIGN    reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MODASSIGN       reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUSASSIGN      reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUSASSIGN     reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACE          reduce using rule 37 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)


state 173

    (57) expression -> expression COMMA assignment_expression .

    RPAREN          reduce using rule 57 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 57 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 57 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 57 (expression -> expression COMMA assignment_expression .)


state 174

    (43) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    HT              reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    HE              reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIFF            reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMESASSIGN     reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDEASSIGN    reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODASSIGN       reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSASSIGN      reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSASSIGN     reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 175

    (44) postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .

    LBRACKET        reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    LPAREN          reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    PLUSPLUS        reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    MINUSMINUS      reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    TIMES           reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    DIVIDE          reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    MOD             reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    PLUS            reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    MINUS           reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    LT              reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    EQUALS          reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    EQ              reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    LE              reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    HT              reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    HE              reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    DIFF            reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    AND             reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    OR              reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    RBRACKET        reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    TIMESASSIGN     reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    DIVIDEASSIGN    reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    MODASSIGN       reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    PLUSASSIGN      reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    MINUSASSIGN     reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    COMMA           reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    SEMI            reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    RPAREN          reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    RBRACE          reduce using rule 44 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)


state 176

    (59) argument_expression -> argument_expression COMMA . assignment_expression
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    assignment_expression          shift and go to state 188
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 177

    (89) initializer -> LBRACE initializer_list COMMA RBRACE .

    COMMA           reduce using rule 89 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    SEMI            reduce using rule 89 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 89 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 178

    (91) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 91 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 91 (initializer_list -> initializer_list COMMA initializer .)


state 179

    (106) selection_statement -> IF LPAREN expression . RPAREN statement
    (107) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (57) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 189
    COMMA           shift and go to state 150


state 180

    (108) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (57) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 190
    COMMA           shift and go to state 150


state 181

    (109) iteration_statement -> FOR LPAREN init_declarator . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 191


state 182

    (110) iteration_statement -> FOR LPAREN type_specifier . init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (85) init_declarator -> . declarator
    (86) init_declarator -> . declarator EQUALS initializer
    (10) declarator -> . direct_declarator
    (11) direct_declarator -> . ID
    (12) direct_declarator -> . LPAREN declarator RPAREN
    (13) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (14) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (15) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    ID              shift and go to state 14
    LPAREN          shift and go to state 15

    init_declarator                shift and go to state 192
    declarator                     shift and go to state 36
    direct_declarator              shift and go to state 13

state 183

    (113) jump_statement -> RETURN expression SEMI .

    LBRACE          reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    ASSERT          reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    PRINT           reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    READ            reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    PLUSPLUS        reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    MINUSMINUS      reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    ADDRESS         reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    TIMES           reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    UNARYDIFF       reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    ID              reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    STRING          reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    INT_CONST       reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    FLOAT_CONST     reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    CHAR_CONST      reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    RBRACE          reduce using rule 113 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 113 (jump_statement -> RETURN expression SEMI .)


state 184

    (114) assert_statement -> ASSERT expression SEMI .

    LBRACE          reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    IF              reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    WHILE           reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    FOR             reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    BREAK           reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    RETURN          reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    ASSERT          reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    PRINT           reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    READ            reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    PLUSPLUS        reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    MINUSMINUS      reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    LPAREN          reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    ADDRESS         reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    TIMES           reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    PLUS            reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    MINUS           reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    UNARYDIFF       reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    ID              reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    STRING          reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    INT_CONST       reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    FLOAT_CONST     reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    CHAR_CONST      reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    SEMI            reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    RBRACE          reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)
    ELSE            reduce using rule 114 (assert_statement -> ASSERT expression SEMI .)


state 185

    (115) print_statement -> PRINT LPAREN expression_opt . RPAREN SEMI

    RPAREN          shift and go to state 193


state 186

    (105) expression_opt -> empty .

    RPAREN          reduce using rule 105 (expression_opt -> empty .)
    SEMI            reduce using rule 105 (expression_opt -> empty .)


state 187

    (116) read_statement -> READ LPAREN argument_expression . RPAREN SEMI
    (59) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 194
    COMMA           shift and go to state 176


state 188

    (59) argument_expression -> argument_expression COMMA assignment_expression .

    COMMA           reduce using rule 59 (argument_expression -> argument_expression COMMA assignment_expression .)
    RPAREN          reduce using rule 59 (argument_expression -> argument_expression COMMA assignment_expression .)


state 189

    (106) selection_statement -> IF LPAREN expression RPAREN . statement
    (107) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (95) statement -> . expression_statement
    (96) statement -> . compound_statement
    (97) statement -> . selection_statement
    (98) statement -> . iteration_statement
    (99) statement -> . jump_statement
    (100) statement -> . assert_statement
    (101) statement -> . print_statement
    (102) statement -> . read_statement
    (103) expression_statement -> . expression_opt SEMI
    (92) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (106) selection_statement -> . IF LPAREN expression RPAREN statement
    (107) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (108) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (109) iteration_statement -> . FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (110) iteration_statement -> . FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (111) jump_statement -> . BREAK SEMI
    (112) jump_statement -> . RETURN SEMI
    (113) jump_statement -> . RETURN expression SEMI
    (114) assert_statement -> . ASSERT expression SEMI
    (115) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (116) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (104) expression_opt -> . expression
    (105) expression_opt -> . empty
    (56) expression -> . assignment_expression
    (57) expression -> . expression COMMA assignment_expression
    (117) empty -> .
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LBRACE          shift and go to state 32
    IF              shift and go to state 125
    WHILE           shift and go to state 127
    FOR             shift and go to state 128
    BREAK           shift and go to state 129
    RETURN          shift and go to state 130
    ASSERT          shift and go to state 131
    PRINT           shift and go to state 132
    READ            shift and go to state 133
    SEMI            reduce using rule 117 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    expression                     shift and go to state 126
    statement                      shift and go to state 195
    expression_statement           shift and go to state 116
    compound_statement             shift and go to state 117
    selection_statement            shift and go to state 118
    iteration_statement            shift and go to state 119
    jump_statement                 shift and go to state 120
    assert_statement               shift and go to state 121
    print_statement                shift and go to state 122
    read_statement                 shift and go to state 123
    expression_opt                 shift and go to state 124
    empty                          shift and go to state 186
    assignment_expression          shift and go to state 91
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 190

    (108) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (95) statement -> . expression_statement
    (96) statement -> . compound_statement
    (97) statement -> . selection_statement
    (98) statement -> . iteration_statement
    (99) statement -> . jump_statement
    (100) statement -> . assert_statement
    (101) statement -> . print_statement
    (102) statement -> . read_statement
    (103) expression_statement -> . expression_opt SEMI
    (92) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (106) selection_statement -> . IF LPAREN expression RPAREN statement
    (107) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (108) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (109) iteration_statement -> . FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (110) iteration_statement -> . FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (111) jump_statement -> . BREAK SEMI
    (112) jump_statement -> . RETURN SEMI
    (113) jump_statement -> . RETURN expression SEMI
    (114) assert_statement -> . ASSERT expression SEMI
    (115) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (116) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (104) expression_opt -> . expression
    (105) expression_opt -> . empty
    (56) expression -> . assignment_expression
    (57) expression -> . expression COMMA assignment_expression
    (117) empty -> .
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LBRACE          shift and go to state 32
    IF              shift and go to state 125
    WHILE           shift and go to state 127
    FOR             shift and go to state 128
    BREAK           shift and go to state 129
    RETURN          shift and go to state 130
    ASSERT          shift and go to state 131
    PRINT           shift and go to state 132
    READ            shift and go to state 133
    SEMI            reduce using rule 117 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    expression                     shift and go to state 126
    statement                      shift and go to state 196
    expression_statement           shift and go to state 116
    compound_statement             shift and go to state 117
    selection_statement            shift and go to state 118
    iteration_statement            shift and go to state 119
    jump_statement                 shift and go to state 120
    assert_statement               shift and go to state 121
    print_statement                shift and go to state 122
    read_statement                 shift and go to state 123
    expression_opt                 shift and go to state 124
    empty                          shift and go to state 186
    assignment_expression          shift and go to state 91
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 191

    (109) iteration_statement -> FOR LPAREN init_declarator SEMI . expression_opt SEMI expression_opt RPAREN statement
    (104) expression_opt -> . expression
    (105) expression_opt -> . empty
    (56) expression -> . assignment_expression
    (57) expression -> . expression COMMA assignment_expression
    (117) empty -> .
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    SEMI            reduce using rule 117 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    expression_opt                 shift and go to state 197
    expression                     shift and go to state 126
    empty                          shift and go to state 186
    assignment_expression          shift and go to state 91
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 192

    (110) iteration_statement -> FOR LPAREN type_specifier init_declarator . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 198


state 193

    (115) print_statement -> PRINT LPAREN expression_opt RPAREN . SEMI

    SEMI            shift and go to state 199


state 194

    (116) read_statement -> READ LPAREN argument_expression RPAREN . SEMI

    SEMI            shift and go to state 200


state 195

    (106) selection_statement -> IF LPAREN expression RPAREN statement .
    (107) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    LBRACE          reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    READ            reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNARYDIFF       reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 201

  ! ELSE            [ reduce using rule 106 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 196

    (108) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    LBRACE          reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    READ            reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNARYDIFF       reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 108 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 197

    (109) iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 202


state 198

    (110) iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI . expression_opt SEMI expression_opt RPAREN statement
    (104) expression_opt -> . expression
    (105) expression_opt -> . empty
    (56) expression -> . assignment_expression
    (57) expression -> . expression COMMA assignment_expression
    (117) empty -> .
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    SEMI            reduce using rule 117 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    expression_opt                 shift and go to state 203
    expression                     shift and go to state 126
    empty                          shift and go to state 186
    assignment_expression          shift and go to state 91
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 199

    (115) print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .

    LBRACE          reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    IF              reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    WHILE           reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FOR             reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    BREAK           reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    RETURN          reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ASSERT          reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PRINT           reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    READ            reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PLUSPLUS        reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    MINUSMINUS      reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    LPAREN          reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ADDRESS         reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    TIMES           reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PLUS            reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    MINUS           reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    UNARYDIFF       reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ID              reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    STRING          reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    INT_CONST       reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    CHAR_CONST      reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    SEMI            reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    RBRACE          reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ELSE            reduce using rule 115 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)


state 200

    (116) read_statement -> READ LPAREN argument_expression RPAREN SEMI .

    LBRACE          reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    IF              reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    WHILE           reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FOR             reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    BREAK           reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RETURN          reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ASSERT          reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PRINT           reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    READ            reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUSPLUS        reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MINUSMINUS      reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LPAREN          reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ADDRESS         reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    TIMES           reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUS            reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MINUS           reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    UNARYDIFF       reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ID              reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    STRING          reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    INT_CONST       reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    SEMI            reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RBRACE          reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ELSE            reduce using rule 116 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)


state 201

    (107) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (95) statement -> . expression_statement
    (96) statement -> . compound_statement
    (97) statement -> . selection_statement
    (98) statement -> . iteration_statement
    (99) statement -> . jump_statement
    (100) statement -> . assert_statement
    (101) statement -> . print_statement
    (102) statement -> . read_statement
    (103) expression_statement -> . expression_opt SEMI
    (92) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (106) selection_statement -> . IF LPAREN expression RPAREN statement
    (107) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (108) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (109) iteration_statement -> . FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (110) iteration_statement -> . FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (111) jump_statement -> . BREAK SEMI
    (112) jump_statement -> . RETURN SEMI
    (113) jump_statement -> . RETURN expression SEMI
    (114) assert_statement -> . ASSERT expression SEMI
    (115) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (116) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (104) expression_opt -> . expression
    (105) expression_opt -> . empty
    (56) expression -> . assignment_expression
    (57) expression -> . expression COMMA assignment_expression
    (117) empty -> .
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LBRACE          shift and go to state 32
    IF              shift and go to state 125
    WHILE           shift and go to state 127
    FOR             shift and go to state 128
    BREAK           shift and go to state 129
    RETURN          shift and go to state 130
    ASSERT          shift and go to state 131
    PRINT           shift and go to state 132
    READ            shift and go to state 133
    SEMI            reduce using rule 117 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    expression                     shift and go to state 126
    statement                      shift and go to state 204
    expression_statement           shift and go to state 116
    compound_statement             shift and go to state 117
    selection_statement            shift and go to state 118
    iteration_statement            shift and go to state 119
    jump_statement                 shift and go to state 120
    assert_statement               shift and go to state 121
    print_statement                shift and go to state 122
    read_statement                 shift and go to state 123
    expression_opt                 shift and go to state 124
    empty                          shift and go to state 186
    assignment_expression          shift and go to state 91
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 202

    (109) iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI . expression_opt RPAREN statement
    (104) expression_opt -> . expression
    (105) expression_opt -> . empty
    (56) expression -> . assignment_expression
    (57) expression -> . expression COMMA assignment_expression
    (117) empty -> .
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    RPAREN          reduce using rule 117 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    expression_opt                 shift and go to state 205
    expression                     shift and go to state 126
    empty                          shift and go to state 186
    assignment_expression          shift and go to state 91
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 203

    (110) iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 206


state 204

    (107) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    LBRACE          reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASSERT          reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINT           reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    READ            reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ADDRESS         reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNARYDIFF       reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST       reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_CONST     reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_CONST      reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 107 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 205

    (109) iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 207


state 206

    (110) iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI . expression_opt RPAREN statement
    (104) expression_opt -> . expression
    (105) expression_opt -> . empty
    (56) expression -> . assignment_expression
    (57) expression -> . expression COMMA assignment_expression
    (117) empty -> .
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    RPAREN          reduce using rule 117 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    expression_opt                 shift and go to state 208
    expression                     shift and go to state 126
    empty                          shift and go to state 186
    assignment_expression          shift and go to state 91
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 207

    (109) iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN . statement
    (95) statement -> . expression_statement
    (96) statement -> . compound_statement
    (97) statement -> . selection_statement
    (98) statement -> . iteration_statement
    (99) statement -> . jump_statement
    (100) statement -> . assert_statement
    (101) statement -> . print_statement
    (102) statement -> . read_statement
    (103) expression_statement -> . expression_opt SEMI
    (92) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (106) selection_statement -> . IF LPAREN expression RPAREN statement
    (107) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (108) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (109) iteration_statement -> . FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (110) iteration_statement -> . FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (111) jump_statement -> . BREAK SEMI
    (112) jump_statement -> . RETURN SEMI
    (113) jump_statement -> . RETURN expression SEMI
    (114) assert_statement -> . ASSERT expression SEMI
    (115) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (116) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (104) expression_opt -> . expression
    (105) expression_opt -> . empty
    (56) expression -> . assignment_expression
    (57) expression -> . expression COMMA assignment_expression
    (117) empty -> .
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LBRACE          shift and go to state 32
    IF              shift and go to state 125
    WHILE           shift and go to state 127
    FOR             shift and go to state 128
    BREAK           shift and go to state 129
    RETURN          shift and go to state 130
    ASSERT          shift and go to state 131
    PRINT           shift and go to state 132
    READ            shift and go to state 133
    SEMI            reduce using rule 117 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    expression_opt                 shift and go to state 124
    statement                      shift and go to state 209
    expression_statement           shift and go to state 116
    compound_statement             shift and go to state 117
    selection_statement            shift and go to state 118
    iteration_statement            shift and go to state 119
    jump_statement                 shift and go to state 120
    assert_statement               shift and go to state 121
    print_statement                shift and go to state 122
    read_statement                 shift and go to state 123
    expression                     shift and go to state 126
    empty                          shift and go to state 186
    assignment_expression          shift and go to state 91
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 208

    (110) iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 210


state 209

    (109) iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .

    LBRACE          reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ADDRESS         reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    UNARYDIFF       reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STRING          reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST       reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RBRACE          reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 109 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)


state 210

    (110) iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN . statement
    (95) statement -> . expression_statement
    (96) statement -> . compound_statement
    (97) statement -> . selection_statement
    (98) statement -> . iteration_statement
    (99) statement -> . jump_statement
    (100) statement -> . assert_statement
    (101) statement -> . print_statement
    (102) statement -> . read_statement
    (103) expression_statement -> . expression_opt SEMI
    (92) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (106) selection_statement -> . IF LPAREN expression RPAREN statement
    (107) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (108) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (109) iteration_statement -> . FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (110) iteration_statement -> . FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (111) jump_statement -> . BREAK SEMI
    (112) jump_statement -> . RETURN SEMI
    (113) jump_statement -> . RETURN expression SEMI
    (114) assert_statement -> . ASSERT expression SEMI
    (115) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (116) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (104) expression_opt -> . expression
    (105) expression_opt -> . empty
    (56) expression -> . assignment_expression
    (57) expression -> . expression COMMA assignment_expression
    (117) empty -> .
    (60) assignment_expression -> . binary_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (21) binary_expression -> . cast_expression
    (22) binary_expression -> . binary_expression TIMES binary_expression
    (23) binary_expression -> . binary_expression DIVIDE binary_expression
    (24) binary_expression -> . binary_expression MOD binary_expression
    (25) binary_expression -> . binary_expression PLUS binary_expression
    (26) binary_expression -> . binary_expression MINUS binary_expression
    (27) binary_expression -> . binary_expression LT binary_expression
    (28) binary_expression -> . binary_expression EQUALS binary_expression
    (29) binary_expression -> . binary_expression EQ binary_expression
    (30) binary_expression -> . binary_expression LE binary_expression
    (31) binary_expression -> . binary_expression HT binary_expression
    (32) binary_expression -> . binary_expression HE binary_expression
    (33) binary_expression -> . binary_expression DIFF binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (38) unary_expression -> . postfix_expression
    (39) unary_expression -> . PLUSPLUS unary_expression
    (40) unary_expression -> . MINUSMINUS unary_expression
    (41) unary_expression -> . unary_operator cast_expression
    (36) cast_expression -> . unary_expression
    (37) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (42) postfix_expression -> . primary_expression
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (44) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (45) postfix_expression -> . postfix_expression PLUSPLUS
    (46) postfix_expression -> . postfix_expression MINUSMINUS
    (67) unary_operator -> . ADDRESS
    (68) unary_operator -> . TIMES
    (69) unary_operator -> . PLUS
    (70) unary_operator -> . MINUS
    (71) unary_operator -> . UNARYDIFF
    (49) primary_expression -> . ID
    (50) primary_expression -> . constant
    (51) primary_expression -> . STRING
    (52) primary_expression -> . LPAREN expression RPAREN
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . CHAR_CONST

    LBRACE          shift and go to state 32
    IF              shift and go to state 125
    WHILE           shift and go to state 127
    FOR             shift and go to state 128
    BREAK           shift and go to state 129
    RETURN          shift and go to state 130
    ASSERT          shift and go to state 131
    PRINT           shift and go to state 132
    READ            shift and go to state 133
    SEMI            reduce using rule 117 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    UNARYDIFF       shift and go to state 53
    ID              shift and go to state 54
    STRING          shift and go to state 56
    INT_CONST       shift and go to state 57
    FLOAT_CONST     shift and go to state 58
    CHAR_CONST      shift and go to state 59

    expression_opt                 shift and go to state 124
    statement                      shift and go to state 211
    expression_statement           shift and go to state 116
    compound_statement             shift and go to state 117
    selection_statement            shift and go to state 118
    iteration_statement            shift and go to state 119
    jump_statement                 shift and go to state 120
    assert_statement               shift and go to state 121
    print_statement                shift and go to state 122
    read_statement                 shift and go to state 123
    expression                     shift and go to state 126
    empty                          shift and go to state 186
    assignment_expression          shift and go to state 91
    binary_expression              shift and go to state 70
    unary_expression               shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    constant                       shift and go to state 55

state 211

    (110) iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .

    LBRACE          reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ADDRESS         reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    UNARYDIFF       reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STRING          reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST       reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RBRACE          reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 110 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 195 resolved as shift
